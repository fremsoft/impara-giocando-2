
master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c20  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08006ce0  08006ce0  00007ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f1c  08006f1c  00008068  2**0
                  CONTENTS
  4 .ARM          00000000  08006f1c  08006f1c  00008068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006f1c  08006f1c  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f1c  08006f1c  00007f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f20  08006f20  00007f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006f24  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000066c  20000068  08006f8c  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006d4  08006f8c  000086d4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6cb  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000210d  00000000  00000000  0001575b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  00017868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000849  00000000  00000000  00018330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149d8  00000000  00000000  00018b79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ee50  00000000  00000000  0002d551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000807c9  00000000  00000000  0003c3a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bcb6a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ac8  00000000  00000000  000bcbb0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000bf678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000068 	.word	0x20000068
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006cc8 	.word	0x08006cc8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000006c 	.word	0x2000006c
 8000104:	08006cc8 	.word	0x08006cc8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000418:	b5f0      	push	{r4, r5, r6, r7, lr}
 800041a:	b089      	sub	sp, #36	@ 0x24
 800041c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800041e:	f001 fcda 	bl	8001dd6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000422:	f001 f829 	bl	8001478 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000426:	f001 f86b 	bl	8001500 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800042a:	f001 f9bf 	bl	80017ac <MX_GPIO_Init>
  MX_DMA_Init();
 800042e:	f001 f99f 	bl	8001770 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000432:	f001 f90d 	bl	8001650 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000436:	f001 f881 	bl	800153c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 800043a:	f001 f95d 	bl	80016f8 <MX_USART2_UART_Init>
  /* A4988 MS3, MS2, MS1 LOW  LOW  LOW  =   FULL STEP  */
  /* A4988 MS3, MS2, MS1 LOW  LOW  HIGH =   HALF STEP  */
  /* A4988 MS3, MS2, MS1 LOW  HIGH LOW  =  4 microstep */
  /* A4988 MS3, MS2, MS1 LOW  HIGH HIGH =  8 microstep */
  /* A4988 MS3, MS2, MS1 HIGH HIGH HIGH = 16 microstep */
  HAL_GPIO_WritePin(A4988_MS1_GPIO_Port, A4988_MS1_Pin, 0);
 800043e:	23a0      	movs	r3, #160	@ 0xa0
 8000440:	05db      	lsls	r3, r3, #23
 8000442:	2200      	movs	r2, #0
 8000444:	2120      	movs	r1, #32
 8000446:	0018      	movs	r0, r3
 8000448:	f003 fb73 	bl	8003b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A4988_MS2_GPIO_Port, A4988_MS2_Pin, 0);
 800044c:	23a0      	movs	r3, #160	@ 0xa0
 800044e:	05db      	lsls	r3, r3, #23
 8000450:	2200      	movs	r2, #0
 8000452:	2140      	movs	r1, #64	@ 0x40
 8000454:	0018      	movs	r0, r3
 8000456:	f003 fb6c 	bl	8003b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A4988_MS3_GPIO_Port, A4988_MS3_Pin, 0);
 800045a:	23a0      	movs	r3, #160	@ 0xa0
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	2200      	movs	r2, #0
 8000460:	2180      	movs	r1, #128	@ 0x80
 8000462:	0018      	movs	r0, r3
 8000464:	f003 fb65 	bl	8003b32 <HAL_GPIO_WritePin>

  /* imposto step e direzione */
  HAL_GPIO_WritePin(A4988_DIR_GPIO_Port,  A4988_DIR_Pin,  0);
 8000468:	2380      	movs	r3, #128	@ 0x80
 800046a:	00db      	lsls	r3, r3, #3
 800046c:	48f9      	ldr	r0, [pc, #996]	@ (8000854 <main+0x43c>)
 800046e:	2200      	movs	r2, #0
 8000470:	0019      	movs	r1, r3
 8000472:	f003 fb5e 	bl	8003b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A4988_STEP_GPIO_Port, A4988_STEP_Pin, 0);
 8000476:	4bf7      	ldr	r3, [pc, #988]	@ (8000854 <main+0x43c>)
 8000478:	2200      	movs	r2, #0
 800047a:	2104      	movs	r1, #4
 800047c:	0018      	movs	r0, r3
 800047e:	f003 fb58 	bl	8003b32 <HAL_GPIO_WritePin>

  /* abilito il driver */
  HAL_GPIO_WritePin(A4988_nRST_GPIO_Port,   A4988_nRST_Pin,   1);
 8000482:	4bf4      	ldr	r3, [pc, #976]	@ (8000854 <main+0x43c>)
 8000484:	2201      	movs	r2, #1
 8000486:	2101      	movs	r1, #1
 8000488:	0018      	movs	r0, r3
 800048a:	f003 fb52 	bl	8003b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A4988_nSLEEP_GPIO_Port, A4988_nSLEEP_Pin, 1);
 800048e:	4bf1      	ldr	r3, [pc, #964]	@ (8000854 <main+0x43c>)
 8000490:	2201      	movs	r2, #1
 8000492:	2102      	movs	r1, #2
 8000494:	0018      	movs	r0, r3
 8000496:	f003 fb4c 	bl	8003b32 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A4988_nEN_GPIO_Port,    A4988_nEN_Pin,    0);
 800049a:	23a0      	movs	r3, #160	@ 0xa0
 800049c:	05db      	lsls	r3, r3, #23
 800049e:	2200      	movs	r2, #0
 80004a0:	2110      	movs	r1, #16
 80004a2:	0018      	movs	r0, r3
 80004a4:	f003 fb45 	bl	8003b32 <HAL_GPIO_WritePin>

  /* lettura device-id */
  int temp;
  device_id = -1;
 80004a8:	2301      	movs	r3, #1
 80004aa:	425b      	negs	r3, r3
 80004ac:	60fb      	str	r3, [r7, #12]
  do {
	  temp = device_id;
 80004ae:	68fb      	ldr	r3, [r7, #12]
 80004b0:	60bb      	str	r3, [r7, #8]
	  HAL_Delay(100);
 80004b2:	2064      	movs	r0, #100	@ 0x64
 80004b4:	f001 fd0c 	bl	8001ed0 <HAL_Delay>
	  device_id = HAL_GPIO_ReadPin(ADD7_GPIO_Port, ADD7_Pin) & 0x01;
 80004b8:	2380      	movs	r3, #128	@ 0x80
 80004ba:	00da      	lsls	r2, r3, #3
 80004bc:	23a0      	movs	r3, #160	@ 0xa0
 80004be:	05db      	lsls	r3, r3, #23
 80004c0:	0011      	movs	r1, r2
 80004c2:	0018      	movs	r0, r3
 80004c4:	f003 fb18 	bl	8003af8 <HAL_GPIO_ReadPin>
 80004c8:	0003      	movs	r3, r0
 80004ca:	001a      	movs	r2, r3
 80004cc:	2301      	movs	r3, #1
 80004ce:	4013      	ands	r3, r2
 80004d0:	60fb      	str	r3, [r7, #12]
	  device_id = device_id << 1;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	005b      	lsls	r3, r3, #1
 80004d6:	60fb      	str	r3, [r7, #12]
	  device_id += HAL_GPIO_ReadPin(ADD6_GPIO_Port, ADD6_Pin) & 0x01;
 80004d8:	4bdf      	ldr	r3, [pc, #892]	@ (8000858 <main+0x440>)
 80004da:	2180      	movs	r1, #128	@ 0x80
 80004dc:	0018      	movs	r0, r3
 80004de:	f003 fb0b 	bl	8003af8 <HAL_GPIO_ReadPin>
 80004e2:	0003      	movs	r3, r0
 80004e4:	001a      	movs	r2, r3
 80004e6:	2301      	movs	r3, #1
 80004e8:	4013      	ands	r3, r2
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	18d3      	adds	r3, r2, r3
 80004ee:	60fb      	str	r3, [r7, #12]
	  device_id = device_id << 1;
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	005b      	lsls	r3, r3, #1
 80004f4:	60fb      	str	r3, [r7, #12]
	  device_id += HAL_GPIO_ReadPin(ADD5_GPIO_Port, ADD5_Pin) & 0x01;
 80004f6:	4bd8      	ldr	r3, [pc, #864]	@ (8000858 <main+0x440>)
 80004f8:	2140      	movs	r1, #64	@ 0x40
 80004fa:	0018      	movs	r0, r3
 80004fc:	f003 fafc 	bl	8003af8 <HAL_GPIO_ReadPin>
 8000500:	0003      	movs	r3, r0
 8000502:	001a      	movs	r2, r3
 8000504:	2301      	movs	r3, #1
 8000506:	4013      	ands	r3, r2
 8000508:	68fa      	ldr	r2, [r7, #12]
 800050a:	18d3      	adds	r3, r2, r3
 800050c:	60fb      	str	r3, [r7, #12]
	  device_id = device_id << 1;
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	60fb      	str	r3, [r7, #12]
	  device_id += HAL_GPIO_ReadPin(ADD4_GPIO_Port, ADD4_Pin) & 0x01;
 8000514:	2380      	movs	r3, #128	@ 0x80
 8000516:	009a      	lsls	r2, r3, #2
 8000518:	23a0      	movs	r3, #160	@ 0xa0
 800051a:	05db      	lsls	r3, r3, #23
 800051c:	0011      	movs	r1, r2
 800051e:	0018      	movs	r0, r3
 8000520:	f003 faea 	bl	8003af8 <HAL_GPIO_ReadPin>
 8000524:	0003      	movs	r3, r0
 8000526:	001a      	movs	r2, r3
 8000528:	2301      	movs	r3, #1
 800052a:	4013      	ands	r3, r2
 800052c:	68fa      	ldr	r2, [r7, #12]
 800052e:	18d3      	adds	r3, r2, r3
 8000530:	60fb      	str	r3, [r7, #12]
	  device_id = device_id << 1;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	60fb      	str	r3, [r7, #12]
	  device_id += HAL_GPIO_ReadPin(ADD3_GPIO_Port, ADD3_Pin) & 0x01;
 8000538:	2380      	movs	r3, #128	@ 0x80
 800053a:	005a      	lsls	r2, r3, #1
 800053c:	23a0      	movs	r3, #160	@ 0xa0
 800053e:	05db      	lsls	r3, r3, #23
 8000540:	0011      	movs	r1, r2
 8000542:	0018      	movs	r0, r3
 8000544:	f003 fad8 	bl	8003af8 <HAL_GPIO_ReadPin>
 8000548:	0003      	movs	r3, r0
 800054a:	001a      	movs	r2, r3
 800054c:	2301      	movs	r3, #1
 800054e:	4013      	ands	r3, r2
 8000550:	68fa      	ldr	r2, [r7, #12]
 8000552:	18d3      	adds	r3, r2, r3
 8000554:	60fb      	str	r3, [r7, #12]
	  device_id = device_id << 1;
 8000556:	68fb      	ldr	r3, [r7, #12]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	60fb      	str	r3, [r7, #12]
	  device_id += HAL_GPIO_ReadPin(ADD2_GPIO_Port, ADD2_Pin) & 0x01;
 800055c:	2380      	movs	r3, #128	@ 0x80
 800055e:	021b      	lsls	r3, r3, #8
 8000560:	4abc      	ldr	r2, [pc, #752]	@ (8000854 <main+0x43c>)
 8000562:	0019      	movs	r1, r3
 8000564:	0010      	movs	r0, r2
 8000566:	f003 fac7 	bl	8003af8 <HAL_GPIO_ReadPin>
 800056a:	0003      	movs	r3, r0
 800056c:	001a      	movs	r2, r3
 800056e:	2301      	movs	r3, #1
 8000570:	4013      	ands	r3, r2
 8000572:	68fa      	ldr	r2, [r7, #12]
 8000574:	18d3      	adds	r3, r2, r3
 8000576:	60fb      	str	r3, [r7, #12]
	  device_id = device_id << 1;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	005b      	lsls	r3, r3, #1
 800057c:	60fb      	str	r3, [r7, #12]
	  device_id += HAL_GPIO_ReadPin(ADD1_GPIO_Port, ADD1_Pin) & 0x01;
 800057e:	2380      	movs	r3, #128	@ 0x80
 8000580:	01db      	lsls	r3, r3, #7
 8000582:	4ab4      	ldr	r2, [pc, #720]	@ (8000854 <main+0x43c>)
 8000584:	0019      	movs	r1, r3
 8000586:	0010      	movs	r0, r2
 8000588:	f003 fab6 	bl	8003af8 <HAL_GPIO_ReadPin>
 800058c:	0003      	movs	r3, r0
 800058e:	001a      	movs	r2, r3
 8000590:	2301      	movs	r3, #1
 8000592:	4013      	ands	r3, r2
 8000594:	68fa      	ldr	r2, [r7, #12]
 8000596:	18d3      	adds	r3, r2, r3
 8000598:	60fb      	str	r3, [r7, #12]
	  device_id = device_id << 1;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	005b      	lsls	r3, r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
	  device_id += HAL_GPIO_ReadPin(ADD0_GPIO_Port, ADD0_Pin) & 0x01;
 80005a0:	2380      	movs	r3, #128	@ 0x80
 80005a2:	019b      	lsls	r3, r3, #6
 80005a4:	4aab      	ldr	r2, [pc, #684]	@ (8000854 <main+0x43c>)
 80005a6:	0019      	movs	r1, r3
 80005a8:	0010      	movs	r0, r2
 80005aa:	f003 faa5 	bl	8003af8 <HAL_GPIO_ReadPin>
 80005ae:	0003      	movs	r3, r0
 80005b0:	001a      	movs	r2, r3
 80005b2:	2301      	movs	r3, #1
 80005b4:	4013      	ands	r3, r2
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	18d3      	adds	r3, r2, r3
 80005ba:	60fb      	str	r3, [r7, #12]
  } while (temp != device_id);
 80005bc:	68ba      	ldr	r2, [r7, #8]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	429a      	cmp	r2, r3
 80005c2:	d000      	beq.n	80005c6 <main+0x1ae>
 80005c4:	e773      	b.n	80004ae <main+0x96>


  // attiva la trasmissione su RS485

  EN_TX_485();
 80005c6:	4ba3      	ldr	r3, [pc, #652]	@ (8000854 <main+0x43c>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	2108      	movs	r1, #8
 80005cc:	0018      	movs	r0, r3
 80005ce:	f003 fab0 	bl	8003b32 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80005d2:	200a      	movs	r0, #10
 80005d4:	f001 fc7c 	bl	8001ed0 <HAL_Delay>

  // attiva la ricezione su RS485
  //EN_RX_485();
  rxIndex = 0;
 80005d8:	4ba0      	ldr	r3, [pc, #640]	@ (800085c <main+0x444>)
 80005da:	2200      	movs	r2, #0
 80005dc:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, &rxRcvd, 1);
 80005de:	49a0      	ldr	r1, [pc, #640]	@ (8000860 <main+0x448>)
 80005e0:	4ba0      	ldr	r3, [pc, #640]	@ (8000864 <main+0x44c>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	0018      	movs	r0, r3
 80005e6:	f003 fffb 	bl	80045e0 <HAL_UART_Receive_IT>

  // attiva la ricezione sulla seriale di servizio
  HAL_UART_Receive_IT(&huart2, &rxRcvd, 1);
 80005ea:	499d      	ldr	r1, [pc, #628]	@ (8000860 <main+0x448>)
 80005ec:	4b9e      	ldr	r3, [pc, #632]	@ (8000868 <main+0x450>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	0018      	movs	r0, r3
 80005f2:	f003 fff5 	bl	80045e0 <HAL_UART_Receive_IT>


  // Avvia la conversione
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)anValues, 3) != HAL_OK) { Error_Handler(); }
 80005f6:	499d      	ldr	r1, [pc, #628]	@ (800086c <main+0x454>)
 80005f8:	4b9d      	ldr	r3, [pc, #628]	@ (8000870 <main+0x458>)
 80005fa:	2203      	movs	r2, #3
 80005fc:	0018      	movs	r0, r3
 80005fe:	f001 ff89 	bl	8002514 <HAL_ADC_Start_DMA>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d001      	beq.n	800060a <main+0x1f2>
 8000606:	f001 f9c1 	bl	800198c <Error_Handler>

  // invio stringa di debug
  sprintf((char *)txBuffer, "\r\n" VERSION "\r\n");
 800060a:	4a9a      	ldr	r2, [pc, #616]	@ (8000874 <main+0x45c>)
 800060c:	4b9a      	ldr	r3, [pc, #616]	@ (8000878 <main+0x460>)
 800060e:	0011      	movs	r1, r2
 8000610:	0018      	movs	r0, r3
 8000612:	f005 febb 	bl	800638c <siprintf>
  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000616:	4b98      	ldr	r3, [pc, #608]	@ (8000878 <main+0x460>)
 8000618:	0018      	movs	r0, r3
 800061a:	f7ff fd75 	bl	8000108 <strlen>
 800061e:	0003      	movs	r3, r0
 8000620:	b29a      	uxth	r2, r3
 8000622:	4995      	ldr	r1, [pc, #596]	@ (8000878 <main+0x460>)
 8000624:	4890      	ldr	r0, [pc, #576]	@ (8000868 <main+0x450>)
 8000626:	2364      	movs	r3, #100	@ 0x64
 8000628:	f003 ff36 	bl	8004498 <HAL_UART_Transmit>


  command = NO_COMMAND;
 800062c:	4b93      	ldr	r3, [pc, #588]	@ (800087c <main+0x464>)
 800062e:	222e      	movs	r2, #46	@ 0x2e
 8000630:	701a      	strb	r2, [r3, #0]
	  static long int json5 = 0;         // deg 4096 closed loop positioning
	  static long int json6 = 0;         // go
	  long int json7;
	  long int csum;

	  json7 = HAL_GetTick() & 0xffff; // genera numero pseudo casuale
 8000632:	f001 fc43 	bl	8001ebc <HAL_GetTick>
 8000636:	0003      	movs	r3, r0
 8000638:	041b      	lsls	r3, r3, #16
 800063a:	0c1b      	lsrs	r3, r3, #16
 800063c:	607b      	str	r3, [r7, #4]

	  // invio stringa a DRIVER

	  if (command == '1') {
 800063e:	4b8f      	ldr	r3, [pc, #572]	@ (800087c <main+0x464>)
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2b31      	cmp	r3, #49	@ 0x31
 8000646:	d17d      	bne.n	8000744 <main+0x32c>

		  // trasmissione debug string
		  sprintf((char *)txBuffer, "--> ");
 8000648:	4a8d      	ldr	r2, [pc, #564]	@ (8000880 <main+0x468>)
 800064a:	4b8b      	ldr	r3, [pc, #556]	@ (8000878 <main+0x460>)
 800064c:	0011      	movs	r1, r2
 800064e:	0018      	movs	r0, r3
 8000650:	f005 fe9c 	bl	800638c <siprintf>
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000654:	4b88      	ldr	r3, [pc, #544]	@ (8000878 <main+0x460>)
 8000656:	0018      	movs	r0, r3
 8000658:	f7ff fd56 	bl	8000108 <strlen>
 800065c:	0003      	movs	r3, r0
 800065e:	b29a      	uxth	r2, r3
 8000660:	4985      	ldr	r1, [pc, #532]	@ (8000878 <main+0x460>)
 8000662:	4881      	ldr	r0, [pc, #516]	@ (8000868 <main+0x450>)
 8000664:	2364      	movs	r3, #100	@ 0x64
 8000666:	f003 ff17 	bl	8004498 <HAL_UART_Transmit>

		  json2 = 1;     // direzione avanti
 800066a:	4b86      	ldr	r3, [pc, #536]	@ (8000884 <main+0x46c>)
 800066c:	2201      	movs	r2, #1
 800066e:	601a      	str	r2, [r3, #0]
		  json3 = 1000;  // passi
 8000670:	4b85      	ldr	r3, [pc, #532]	@ (8000888 <main+0x470>)
 8000672:	22fa      	movs	r2, #250	@ 0xfa
 8000674:	0092      	lsls	r2, r2, #2
 8000676:	601a      	str	r2, [r3, #0]
		  csum = json1+json2+json3+json4+json7;
 8000678:	4b84      	ldr	r3, [pc, #528]	@ (800088c <main+0x474>)
 800067a:	681a      	ldr	r2, [r3, #0]
 800067c:	4b81      	ldr	r3, [pc, #516]	@ (8000884 <main+0x46c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	18d2      	adds	r2, r2, r3
 8000682:	4b81      	ldr	r3, [pc, #516]	@ (8000888 <main+0x470>)
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	18d2      	adds	r2, r2, r3
 8000688:	4b81      	ldr	r3, [pc, #516]	@ (8000890 <main+0x478>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	18d3      	adds	r3, r2, r3
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	18d3      	adds	r3, r2, r3
 8000692:	603b      	str	r3, [r7, #0]
		  sprintf((char *)txBuffer, "     {id:%ld,dir:%ld,step:%ld,ppr:%ld,rnd:%ld,csum:%ld}"
 8000694:	4b7d      	ldr	r3, [pc, #500]	@ (800088c <main+0x474>)
 8000696:	681d      	ldr	r5, [r3, #0]
 8000698:	4b7a      	ldr	r3, [pc, #488]	@ (8000884 <main+0x46c>)
 800069a:	681e      	ldr	r6, [r3, #0]
 800069c:	4b7a      	ldr	r3, [pc, #488]	@ (8000888 <main+0x470>)
 800069e:	681a      	ldr	r2, [r3, #0]
 80006a0:	4b7b      	ldr	r3, [pc, #492]	@ (8000890 <main+0x478>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4c7b      	ldr	r4, [pc, #492]	@ (8000894 <main+0x47c>)
 80006a6:	4874      	ldr	r0, [pc, #464]	@ (8000878 <main+0x460>)
 80006a8:	6839      	ldr	r1, [r7, #0]
 80006aa:	9103      	str	r1, [sp, #12]
 80006ac:	6879      	ldr	r1, [r7, #4]
 80006ae:	9102      	str	r1, [sp, #8]
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	9200      	str	r2, [sp, #0]
 80006b4:	0033      	movs	r3, r6
 80006b6:	002a      	movs	r2, r5
 80006b8:	0021      	movs	r1, r4
 80006ba:	f005 fe67 	bl	800638c <siprintf>
 			 , json1 /* id */
			 , json2 /* dir */
			 , json3 /* step */
			 , json4 /* ppr */
			 , json7, csum);
		  EN_TX_485();   // IDLE VCC
 80006be:	4b65      	ldr	r3, [pc, #404]	@ (8000854 <main+0x43c>)
 80006c0:	2201      	movs	r2, #1
 80006c2:	2108      	movs	r1, #8
 80006c4:	0018      	movs	r0, r3
 80006c6:	f003 fa34 	bl	8003b32 <HAL_GPIO_WritePin>
		  // se Timeout != 0 la Transmit è bloccante
		  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 80006ca:	4b6b      	ldr	r3, [pc, #428]	@ (8000878 <main+0x460>)
 80006cc:	0018      	movs	r0, r3
 80006ce:	f7ff fd1b 	bl	8000108 <strlen>
 80006d2:	0003      	movs	r3, r0
 80006d4:	b29a      	uxth	r2, r3
 80006d6:	4968      	ldr	r1, [pc, #416]	@ (8000878 <main+0x460>)
 80006d8:	4862      	ldr	r0, [pc, #392]	@ (8000864 <main+0x44c>)
 80006da:	2364      	movs	r3, #100	@ 0x64
 80006dc:	f003 fedc 	bl	8004498 <HAL_UART_Transmit>
		  EN_RX_485();
 80006e0:	4b5c      	ldr	r3, [pc, #368]	@ (8000854 <main+0x43c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	2108      	movs	r1, #8
 80006e6:	0018      	movs	r0, r3
 80006e8:	f003 fa23 	bl	8003b32 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80006ec:	2064      	movs	r0, #100	@ 0x64
 80006ee:	f001 fbef 	bl	8001ed0 <HAL_Delay>

		  // trasmissione debug string
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 80006f2:	4b61      	ldr	r3, [pc, #388]	@ (8000878 <main+0x460>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f7ff fd07 	bl	8000108 <strlen>
 80006fa:	0003      	movs	r3, r0
 80006fc:	b29a      	uxth	r2, r3
 80006fe:	495e      	ldr	r1, [pc, #376]	@ (8000878 <main+0x460>)
 8000700:	4859      	ldr	r0, [pc, #356]	@ (8000868 <main+0x450>)
 8000702:	2364      	movs	r3, #100	@ 0x64
 8000704:	f003 fec8 	bl	8004498 <HAL_UART_Transmit>
		  sprintf((char *)txBuffer, "\r\n<-- %s\r\n", rxBuffer);
 8000708:	4a63      	ldr	r2, [pc, #396]	@ (8000898 <main+0x480>)
 800070a:	4964      	ldr	r1, [pc, #400]	@ (800089c <main+0x484>)
 800070c:	4b5a      	ldr	r3, [pc, #360]	@ (8000878 <main+0x460>)
 800070e:	0018      	movs	r0, r3
 8000710:	f005 fe3c 	bl	800638c <siprintf>
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000714:	4b58      	ldr	r3, [pc, #352]	@ (8000878 <main+0x460>)
 8000716:	0018      	movs	r0, r3
 8000718:	f7ff fcf6 	bl	8000108 <strlen>
 800071c:	0003      	movs	r3, r0
 800071e:	b29a      	uxth	r2, r3
 8000720:	4955      	ldr	r1, [pc, #340]	@ (8000878 <main+0x460>)
 8000722:	4851      	ldr	r0, [pc, #324]	@ (8000868 <main+0x450>)
 8000724:	2364      	movs	r3, #100	@ 0x64
 8000726:	f003 feb7 	bl	8004498 <HAL_UART_Transmit>
		  memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
 800072a:	2380      	movs	r3, #128	@ 0x80
 800072c:	005a      	lsls	r2, r3, #1
 800072e:	4b5a      	ldr	r3, [pc, #360]	@ (8000898 <main+0x480>)
 8000730:	2100      	movs	r1, #0
 8000732:	0018      	movs	r0, r3
 8000734:	f005 fe4a 	bl	80063cc <memset>
		  rxIndex = 0;
 8000738:	4b48      	ldr	r3, [pc, #288]	@ (800085c <main+0x444>)
 800073a:	2200      	movs	r2, #0
 800073c:	701a      	strb	r2, [r3, #0]

		  command = NO_COMMAND;
 800073e:	4b4f      	ldr	r3, [pc, #316]	@ (800087c <main+0x464>)
 8000740:	222e      	movs	r2, #46	@ 0x2e
 8000742:	701a      	strb	r2, [r3, #0]
	  }

	  if (command == '2') {
 8000744:	4b4d      	ldr	r3, [pc, #308]	@ (800087c <main+0x464>)
 8000746:	781b      	ldrb	r3, [r3, #0]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	2b32      	cmp	r3, #50	@ 0x32
 800074c:	d17d      	bne.n	800084a <main+0x432>

		  // trasmissione debug string
		  sprintf((char *)txBuffer, "--> ");
 800074e:	4a4c      	ldr	r2, [pc, #304]	@ (8000880 <main+0x468>)
 8000750:	4b49      	ldr	r3, [pc, #292]	@ (8000878 <main+0x460>)
 8000752:	0011      	movs	r1, r2
 8000754:	0018      	movs	r0, r3
 8000756:	f005 fe19 	bl	800638c <siprintf>
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 800075a:	4b47      	ldr	r3, [pc, #284]	@ (8000878 <main+0x460>)
 800075c:	0018      	movs	r0, r3
 800075e:	f7ff fcd3 	bl	8000108 <strlen>
 8000762:	0003      	movs	r3, r0
 8000764:	b29a      	uxth	r2, r3
 8000766:	4944      	ldr	r1, [pc, #272]	@ (8000878 <main+0x460>)
 8000768:	483f      	ldr	r0, [pc, #252]	@ (8000868 <main+0x450>)
 800076a:	2364      	movs	r3, #100	@ 0x64
 800076c:	f003 fe94 	bl	8004498 <HAL_UART_Transmit>

		  json2 = 1;
 8000770:	4b44      	ldr	r3, [pc, #272]	@ (8000884 <main+0x46c>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
		  json3 = 600;
 8000776:	4b44      	ldr	r3, [pc, #272]	@ (8000888 <main+0x470>)
 8000778:	2296      	movs	r2, #150	@ 0x96
 800077a:	0092      	lsls	r2, r2, #2
 800077c:	601a      	str	r2, [r3, #0]
		  csum = json1+json2+json3+json4+json7;
 800077e:	4b43      	ldr	r3, [pc, #268]	@ (800088c <main+0x474>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b40      	ldr	r3, [pc, #256]	@ (8000884 <main+0x46c>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	18d2      	adds	r2, r2, r3
 8000788:	4b3f      	ldr	r3, [pc, #252]	@ (8000888 <main+0x470>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	18d2      	adds	r2, r2, r3
 800078e:	4b40      	ldr	r3, [pc, #256]	@ (8000890 <main+0x478>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	18d3      	adds	r3, r2, r3
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	18d3      	adds	r3, r2, r3
 8000798:	603b      	str	r3, [r7, #0]
		  sprintf((char *)txBuffer, "     {id:%ld,dir:%ld,step:%ld,ppr:%ld,rnd:%ld,csum:%ld}"
 800079a:	4b3c      	ldr	r3, [pc, #240]	@ (800088c <main+0x474>)
 800079c:	681d      	ldr	r5, [r3, #0]
 800079e:	4b39      	ldr	r3, [pc, #228]	@ (8000884 <main+0x46c>)
 80007a0:	681e      	ldr	r6, [r3, #0]
 80007a2:	4b39      	ldr	r3, [pc, #228]	@ (8000888 <main+0x470>)
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	4b3a      	ldr	r3, [pc, #232]	@ (8000890 <main+0x478>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	4c3a      	ldr	r4, [pc, #232]	@ (8000894 <main+0x47c>)
 80007ac:	4832      	ldr	r0, [pc, #200]	@ (8000878 <main+0x460>)
 80007ae:	6839      	ldr	r1, [r7, #0]
 80007b0:	9103      	str	r1, [sp, #12]
 80007b2:	6879      	ldr	r1, [r7, #4]
 80007b4:	9102      	str	r1, [sp, #8]
 80007b6:	9301      	str	r3, [sp, #4]
 80007b8:	9200      	str	r2, [sp, #0]
 80007ba:	0033      	movs	r3, r6
 80007bc:	002a      	movs	r2, r5
 80007be:	0021      	movs	r1, r4
 80007c0:	f005 fde4 	bl	800638c <siprintf>
 			 , json1 /* id */
			 , json2 /* dir */
			 , json3 /* step */
			 , json4 /* ppr */
			 , json7, csum);
		  EN_TX_485();   // IDLE VCC
 80007c4:	4b23      	ldr	r3, [pc, #140]	@ (8000854 <main+0x43c>)
 80007c6:	2201      	movs	r2, #1
 80007c8:	2108      	movs	r1, #8
 80007ca:	0018      	movs	r0, r3
 80007cc:	f003 f9b1 	bl	8003b32 <HAL_GPIO_WritePin>
		  // se Timeout != 0 la Transmit è bloccante
		  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 80007d0:	4b29      	ldr	r3, [pc, #164]	@ (8000878 <main+0x460>)
 80007d2:	0018      	movs	r0, r3
 80007d4:	f7ff fc98 	bl	8000108 <strlen>
 80007d8:	0003      	movs	r3, r0
 80007da:	b29a      	uxth	r2, r3
 80007dc:	4926      	ldr	r1, [pc, #152]	@ (8000878 <main+0x460>)
 80007de:	4821      	ldr	r0, [pc, #132]	@ (8000864 <main+0x44c>)
 80007e0:	2364      	movs	r3, #100	@ 0x64
 80007e2:	f003 fe59 	bl	8004498 <HAL_UART_Transmit>
		  EN_RX_485();
 80007e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000854 <main+0x43c>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	2108      	movs	r1, #8
 80007ec:	0018      	movs	r0, r3
 80007ee:	f003 f9a0 	bl	8003b32 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 80007f2:	2064      	movs	r0, #100	@ 0x64
 80007f4:	f001 fb6c 	bl	8001ed0 <HAL_Delay>

		  // trasmissione debug string
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 80007f8:	4b1f      	ldr	r3, [pc, #124]	@ (8000878 <main+0x460>)
 80007fa:	0018      	movs	r0, r3
 80007fc:	f7ff fc84 	bl	8000108 <strlen>
 8000800:	0003      	movs	r3, r0
 8000802:	b29a      	uxth	r2, r3
 8000804:	491c      	ldr	r1, [pc, #112]	@ (8000878 <main+0x460>)
 8000806:	4818      	ldr	r0, [pc, #96]	@ (8000868 <main+0x450>)
 8000808:	2364      	movs	r3, #100	@ 0x64
 800080a:	f003 fe45 	bl	8004498 <HAL_UART_Transmit>
		  sprintf((char *)txBuffer, "\r\n<-- %s\r\n", rxBuffer);
 800080e:	4a22      	ldr	r2, [pc, #136]	@ (8000898 <main+0x480>)
 8000810:	4922      	ldr	r1, [pc, #136]	@ (800089c <main+0x484>)
 8000812:	4b19      	ldr	r3, [pc, #100]	@ (8000878 <main+0x460>)
 8000814:	0018      	movs	r0, r3
 8000816:	f005 fdb9 	bl	800638c <siprintf>
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 800081a:	4b17      	ldr	r3, [pc, #92]	@ (8000878 <main+0x460>)
 800081c:	0018      	movs	r0, r3
 800081e:	f7ff fc73 	bl	8000108 <strlen>
 8000822:	0003      	movs	r3, r0
 8000824:	b29a      	uxth	r2, r3
 8000826:	4914      	ldr	r1, [pc, #80]	@ (8000878 <main+0x460>)
 8000828:	480f      	ldr	r0, [pc, #60]	@ (8000868 <main+0x450>)
 800082a:	2364      	movs	r3, #100	@ 0x64
 800082c:	f003 fe34 	bl	8004498 <HAL_UART_Transmit>
		  memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
 8000830:	2380      	movs	r3, #128	@ 0x80
 8000832:	005a      	lsls	r2, r3, #1
 8000834:	4b18      	ldr	r3, [pc, #96]	@ (8000898 <main+0x480>)
 8000836:	2100      	movs	r1, #0
 8000838:	0018      	movs	r0, r3
 800083a:	f005 fdc7 	bl	80063cc <memset>
		  rxIndex = 0;
 800083e:	4b07      	ldr	r3, [pc, #28]	@ (800085c <main+0x444>)
 8000840:	2200      	movs	r2, #0
 8000842:	701a      	strb	r2, [r3, #0]

		  command = NO_COMMAND;
 8000844:	4b0d      	ldr	r3, [pc, #52]	@ (800087c <main+0x464>)
 8000846:	222e      	movs	r2, #46	@ 0x2e
 8000848:	701a      	strb	r2, [r3, #0]
	  }

	  if (command == '3') {
 800084a:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <main+0x464>)
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	e026      	b.n	80008a0 <main+0x488>
 8000852:	46c0      	nop			@ (mov r8, r8)
 8000854:	50000400 	.word	0x50000400
 8000858:	50000800 	.word	0x50000800
 800085c:	2000046c 	.word	0x2000046c
 8000860:	2000046d 	.word	0x2000046d
 8000864:	20000144 	.word	0x20000144
 8000868:	200001d8 	.word	0x200001d8
 800086c:	20000570 	.word	0x20000570
 8000870:	20000084 	.word	0x20000084
 8000874:	08006ce0 	.word	0x08006ce0
 8000878:	2000026c 	.word	0x2000026c
 800087c:	20000576 	.word	0x20000576
 8000880:	08006d4c 	.word	0x08006d4c
 8000884:	20000000 	.word	0x20000000
 8000888:	20000578 	.word	0x20000578
 800088c:	20000004 	.word	0x20000004
 8000890:	20000008 	.word	0x20000008
 8000894:	08006d54 	.word	0x08006d54
 8000898:	20000470 	.word	0x20000470
 800089c:	08006d8c 	.word	0x08006d8c
 80008a0:	2b33      	cmp	r3, #51	@ 0x33
 80008a2:	d17d      	bne.n	80009a0 <main+0x588>

		  // trasmissione debug string
		  sprintf((char *)txBuffer, "--> ");
 80008a4:	4af7      	ldr	r2, [pc, #988]	@ (8000c84 <main+0x86c>)
 80008a6:	4bf8      	ldr	r3, [pc, #992]	@ (8000c88 <main+0x870>)
 80008a8:	0011      	movs	r1, r2
 80008aa:	0018      	movs	r0, r3
 80008ac:	f005 fd6e 	bl	800638c <siprintf>
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 80008b0:	4bf5      	ldr	r3, [pc, #980]	@ (8000c88 <main+0x870>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f7ff fc28 	bl	8000108 <strlen>
 80008b8:	0003      	movs	r3, r0
 80008ba:	b29a      	uxth	r2, r3
 80008bc:	49f2      	ldr	r1, [pc, #968]	@ (8000c88 <main+0x870>)
 80008be:	48f3      	ldr	r0, [pc, #972]	@ (8000c8c <main+0x874>)
 80008c0:	2364      	movs	r3, #100	@ 0x64
 80008c2:	f003 fde9 	bl	8004498 <HAL_UART_Transmit>

		  json2 = 0;
 80008c6:	4bf2      	ldr	r3, [pc, #968]	@ (8000c90 <main+0x878>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
		  json3 = 1000;
 80008cc:	4bf1      	ldr	r3, [pc, #964]	@ (8000c94 <main+0x87c>)
 80008ce:	22fa      	movs	r2, #250	@ 0xfa
 80008d0:	0092      	lsls	r2, r2, #2
 80008d2:	601a      	str	r2, [r3, #0]
		  csum = json1+json2+json3+json4+json7;
 80008d4:	4bf0      	ldr	r3, [pc, #960]	@ (8000c98 <main+0x880>)
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	4bed      	ldr	r3, [pc, #948]	@ (8000c90 <main+0x878>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	18d2      	adds	r2, r2, r3
 80008de:	4bed      	ldr	r3, [pc, #948]	@ (8000c94 <main+0x87c>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	18d2      	adds	r2, r2, r3
 80008e4:	4bed      	ldr	r3, [pc, #948]	@ (8000c9c <main+0x884>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	18d3      	adds	r3, r2, r3
 80008ea:	687a      	ldr	r2, [r7, #4]
 80008ec:	18d3      	adds	r3, r2, r3
 80008ee:	603b      	str	r3, [r7, #0]
		  sprintf((char *)txBuffer, "     {id:%ld,dir:%ld,step:%ld,ppr:%ld,rnd:%ld,csum:%ld}"
 80008f0:	4be9      	ldr	r3, [pc, #932]	@ (8000c98 <main+0x880>)
 80008f2:	681d      	ldr	r5, [r3, #0]
 80008f4:	4be6      	ldr	r3, [pc, #920]	@ (8000c90 <main+0x878>)
 80008f6:	681e      	ldr	r6, [r3, #0]
 80008f8:	4be6      	ldr	r3, [pc, #920]	@ (8000c94 <main+0x87c>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4be7      	ldr	r3, [pc, #924]	@ (8000c9c <main+0x884>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	4ce7      	ldr	r4, [pc, #924]	@ (8000ca0 <main+0x888>)
 8000902:	48e1      	ldr	r0, [pc, #900]	@ (8000c88 <main+0x870>)
 8000904:	6839      	ldr	r1, [r7, #0]
 8000906:	9103      	str	r1, [sp, #12]
 8000908:	6879      	ldr	r1, [r7, #4]
 800090a:	9102      	str	r1, [sp, #8]
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	9200      	str	r2, [sp, #0]
 8000910:	0033      	movs	r3, r6
 8000912:	002a      	movs	r2, r5
 8000914:	0021      	movs	r1, r4
 8000916:	f005 fd39 	bl	800638c <siprintf>
 			 , json1 /* id */
			 , json2 /* dir */
			 , json3 /* step */
			 , json4 /* ppr */
			 , json7, csum);
		  EN_TX_485();   // IDLE VCC
 800091a:	4be2      	ldr	r3, [pc, #904]	@ (8000ca4 <main+0x88c>)
 800091c:	2201      	movs	r2, #1
 800091e:	2108      	movs	r1, #8
 8000920:	0018      	movs	r0, r3
 8000922:	f003 f906 	bl	8003b32 <HAL_GPIO_WritePin>
		  // se Timeout != 0 la Transmit è bloccante
		  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 8000926:	4bd8      	ldr	r3, [pc, #864]	@ (8000c88 <main+0x870>)
 8000928:	0018      	movs	r0, r3
 800092a:	f7ff fbed 	bl	8000108 <strlen>
 800092e:	0003      	movs	r3, r0
 8000930:	b29a      	uxth	r2, r3
 8000932:	49d5      	ldr	r1, [pc, #852]	@ (8000c88 <main+0x870>)
 8000934:	48dc      	ldr	r0, [pc, #880]	@ (8000ca8 <main+0x890>)
 8000936:	2364      	movs	r3, #100	@ 0x64
 8000938:	f003 fdae 	bl	8004498 <HAL_UART_Transmit>
		  EN_RX_485();
 800093c:	4bd9      	ldr	r3, [pc, #868]	@ (8000ca4 <main+0x88c>)
 800093e:	2200      	movs	r2, #0
 8000940:	2108      	movs	r1, #8
 8000942:	0018      	movs	r0, r3
 8000944:	f003 f8f5 	bl	8003b32 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000948:	2064      	movs	r0, #100	@ 0x64
 800094a:	f001 fac1 	bl	8001ed0 <HAL_Delay>

		  // trasmissione debug string
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 800094e:	4bce      	ldr	r3, [pc, #824]	@ (8000c88 <main+0x870>)
 8000950:	0018      	movs	r0, r3
 8000952:	f7ff fbd9 	bl	8000108 <strlen>
 8000956:	0003      	movs	r3, r0
 8000958:	b29a      	uxth	r2, r3
 800095a:	49cb      	ldr	r1, [pc, #812]	@ (8000c88 <main+0x870>)
 800095c:	48cb      	ldr	r0, [pc, #812]	@ (8000c8c <main+0x874>)
 800095e:	2364      	movs	r3, #100	@ 0x64
 8000960:	f003 fd9a 	bl	8004498 <HAL_UART_Transmit>
		  sprintf((char *)txBuffer, "\r\n<-- %s\r\n", rxBuffer);
 8000964:	4ad1      	ldr	r2, [pc, #836]	@ (8000cac <main+0x894>)
 8000966:	49d2      	ldr	r1, [pc, #840]	@ (8000cb0 <main+0x898>)
 8000968:	4bc7      	ldr	r3, [pc, #796]	@ (8000c88 <main+0x870>)
 800096a:	0018      	movs	r0, r3
 800096c:	f005 fd0e 	bl	800638c <siprintf>
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000970:	4bc5      	ldr	r3, [pc, #788]	@ (8000c88 <main+0x870>)
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff fbc8 	bl	8000108 <strlen>
 8000978:	0003      	movs	r3, r0
 800097a:	b29a      	uxth	r2, r3
 800097c:	49c2      	ldr	r1, [pc, #776]	@ (8000c88 <main+0x870>)
 800097e:	48c3      	ldr	r0, [pc, #780]	@ (8000c8c <main+0x874>)
 8000980:	2364      	movs	r3, #100	@ 0x64
 8000982:	f003 fd89 	bl	8004498 <HAL_UART_Transmit>
		  memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
 8000986:	2380      	movs	r3, #128	@ 0x80
 8000988:	005a      	lsls	r2, r3, #1
 800098a:	4bc8      	ldr	r3, [pc, #800]	@ (8000cac <main+0x894>)
 800098c:	2100      	movs	r1, #0
 800098e:	0018      	movs	r0, r3
 8000990:	f005 fd1c 	bl	80063cc <memset>
		  rxIndex = 0;
 8000994:	4bc7      	ldr	r3, [pc, #796]	@ (8000cb4 <main+0x89c>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]

		  command = NO_COMMAND;
 800099a:	4bc7      	ldr	r3, [pc, #796]	@ (8000cb8 <main+0x8a0>)
 800099c:	222e      	movs	r2, #46	@ 0x2e
 800099e:	701a      	strb	r2, [r3, #0]
	  }

	  if (command == '4') {
 80009a0:	4bc5      	ldr	r3, [pc, #788]	@ (8000cb8 <main+0x8a0>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	2b34      	cmp	r3, #52	@ 0x34
 80009a8:	d17d      	bne.n	8000aa6 <main+0x68e>

		  // trasmissione debug string
		  sprintf((char *)txBuffer, "--> ");
 80009aa:	4ab6      	ldr	r2, [pc, #728]	@ (8000c84 <main+0x86c>)
 80009ac:	4bb6      	ldr	r3, [pc, #728]	@ (8000c88 <main+0x870>)
 80009ae:	0011      	movs	r1, r2
 80009b0:	0018      	movs	r0, r3
 80009b2:	f005 fceb 	bl	800638c <siprintf>
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 80009b6:	4bb4      	ldr	r3, [pc, #720]	@ (8000c88 <main+0x870>)
 80009b8:	0018      	movs	r0, r3
 80009ba:	f7ff fba5 	bl	8000108 <strlen>
 80009be:	0003      	movs	r3, r0
 80009c0:	b29a      	uxth	r2, r3
 80009c2:	49b1      	ldr	r1, [pc, #708]	@ (8000c88 <main+0x870>)
 80009c4:	48b1      	ldr	r0, [pc, #708]	@ (8000c8c <main+0x874>)
 80009c6:	2364      	movs	r3, #100	@ 0x64
 80009c8:	f003 fd66 	bl	8004498 <HAL_UART_Transmit>

		  json2 = 0;
 80009cc:	4bb0      	ldr	r3, [pc, #704]	@ (8000c90 <main+0x878>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
		  json3 = 600;
 80009d2:	4bb0      	ldr	r3, [pc, #704]	@ (8000c94 <main+0x87c>)
 80009d4:	2296      	movs	r2, #150	@ 0x96
 80009d6:	0092      	lsls	r2, r2, #2
 80009d8:	601a      	str	r2, [r3, #0]
		  csum = json1+json2+json3+json4+json7;
 80009da:	4baf      	ldr	r3, [pc, #700]	@ (8000c98 <main+0x880>)
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	4bac      	ldr	r3, [pc, #688]	@ (8000c90 <main+0x878>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	18d2      	adds	r2, r2, r3
 80009e4:	4bab      	ldr	r3, [pc, #684]	@ (8000c94 <main+0x87c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	18d2      	adds	r2, r2, r3
 80009ea:	4bac      	ldr	r3, [pc, #688]	@ (8000c9c <main+0x884>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	18d3      	adds	r3, r2, r3
 80009f0:	687a      	ldr	r2, [r7, #4]
 80009f2:	18d3      	adds	r3, r2, r3
 80009f4:	603b      	str	r3, [r7, #0]
		  sprintf((char *)txBuffer, "     {id:%ld,dir:%ld,step:%ld,ppr:%ld,rnd:%ld,csum:%ld}"
 80009f6:	4ba8      	ldr	r3, [pc, #672]	@ (8000c98 <main+0x880>)
 80009f8:	681d      	ldr	r5, [r3, #0]
 80009fa:	4ba5      	ldr	r3, [pc, #660]	@ (8000c90 <main+0x878>)
 80009fc:	681e      	ldr	r6, [r3, #0]
 80009fe:	4ba5      	ldr	r3, [pc, #660]	@ (8000c94 <main+0x87c>)
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	4ba6      	ldr	r3, [pc, #664]	@ (8000c9c <main+0x884>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4ca6      	ldr	r4, [pc, #664]	@ (8000ca0 <main+0x888>)
 8000a08:	489f      	ldr	r0, [pc, #636]	@ (8000c88 <main+0x870>)
 8000a0a:	6839      	ldr	r1, [r7, #0]
 8000a0c:	9103      	str	r1, [sp, #12]
 8000a0e:	6879      	ldr	r1, [r7, #4]
 8000a10:	9102      	str	r1, [sp, #8]
 8000a12:	9301      	str	r3, [sp, #4]
 8000a14:	9200      	str	r2, [sp, #0]
 8000a16:	0033      	movs	r3, r6
 8000a18:	002a      	movs	r2, r5
 8000a1a:	0021      	movs	r1, r4
 8000a1c:	f005 fcb6 	bl	800638c <siprintf>
 			 , json1 /* id */
			 , json2 /* dir */
			 , json3 /* step */
			 , json4 /* ppr */
			 , json7, csum);
		  EN_TX_485();   // IDLE VCC
 8000a20:	4ba0      	ldr	r3, [pc, #640]	@ (8000ca4 <main+0x88c>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	2108      	movs	r1, #8
 8000a26:	0018      	movs	r0, r3
 8000a28:	f003 f883 	bl	8003b32 <HAL_GPIO_WritePin>
		  // se Timeout != 0 la Transmit è bloccante
		  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 8000a2c:	4b96      	ldr	r3, [pc, #600]	@ (8000c88 <main+0x870>)
 8000a2e:	0018      	movs	r0, r3
 8000a30:	f7ff fb6a 	bl	8000108 <strlen>
 8000a34:	0003      	movs	r3, r0
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4993      	ldr	r1, [pc, #588]	@ (8000c88 <main+0x870>)
 8000a3a:	489b      	ldr	r0, [pc, #620]	@ (8000ca8 <main+0x890>)
 8000a3c:	2364      	movs	r3, #100	@ 0x64
 8000a3e:	f003 fd2b 	bl	8004498 <HAL_UART_Transmit>
		  EN_RX_485();
 8000a42:	4b98      	ldr	r3, [pc, #608]	@ (8000ca4 <main+0x88c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	2108      	movs	r1, #8
 8000a48:	0018      	movs	r0, r3
 8000a4a:	f003 f872 	bl	8003b32 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000a4e:	2064      	movs	r0, #100	@ 0x64
 8000a50:	f001 fa3e 	bl	8001ed0 <HAL_Delay>

		  // trasmissione debug string
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000a54:	4b8c      	ldr	r3, [pc, #560]	@ (8000c88 <main+0x870>)
 8000a56:	0018      	movs	r0, r3
 8000a58:	f7ff fb56 	bl	8000108 <strlen>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	b29a      	uxth	r2, r3
 8000a60:	4989      	ldr	r1, [pc, #548]	@ (8000c88 <main+0x870>)
 8000a62:	488a      	ldr	r0, [pc, #552]	@ (8000c8c <main+0x874>)
 8000a64:	2364      	movs	r3, #100	@ 0x64
 8000a66:	f003 fd17 	bl	8004498 <HAL_UART_Transmit>
		  sprintf((char *)txBuffer, "\r\n<-- %s\r\n", rxBuffer);
 8000a6a:	4a90      	ldr	r2, [pc, #576]	@ (8000cac <main+0x894>)
 8000a6c:	4990      	ldr	r1, [pc, #576]	@ (8000cb0 <main+0x898>)
 8000a6e:	4b86      	ldr	r3, [pc, #536]	@ (8000c88 <main+0x870>)
 8000a70:	0018      	movs	r0, r3
 8000a72:	f005 fc8b 	bl	800638c <siprintf>
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000a76:	4b84      	ldr	r3, [pc, #528]	@ (8000c88 <main+0x870>)
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f7ff fb45 	bl	8000108 <strlen>
 8000a7e:	0003      	movs	r3, r0
 8000a80:	b29a      	uxth	r2, r3
 8000a82:	4981      	ldr	r1, [pc, #516]	@ (8000c88 <main+0x870>)
 8000a84:	4881      	ldr	r0, [pc, #516]	@ (8000c8c <main+0x874>)
 8000a86:	2364      	movs	r3, #100	@ 0x64
 8000a88:	f003 fd06 	bl	8004498 <HAL_UART_Transmit>
		  memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
 8000a8c:	2380      	movs	r3, #128	@ 0x80
 8000a8e:	005a      	lsls	r2, r3, #1
 8000a90:	4b86      	ldr	r3, [pc, #536]	@ (8000cac <main+0x894>)
 8000a92:	2100      	movs	r1, #0
 8000a94:	0018      	movs	r0, r3
 8000a96:	f005 fc99 	bl	80063cc <memset>
		  rxIndex = 0;
 8000a9a:	4b86      	ldr	r3, [pc, #536]	@ (8000cb4 <main+0x89c>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	701a      	strb	r2, [r3, #0]

		  command = NO_COMMAND;
 8000aa0:	4b85      	ldr	r3, [pc, #532]	@ (8000cb8 <main+0x8a0>)
 8000aa2:	222e      	movs	r2, #46	@ 0x2e
 8000aa4:	701a      	strb	r2, [r3, #0]
	  }

	  if (command == '5') {
 8000aa6:	4b84      	ldr	r3, [pc, #528]	@ (8000cb8 <main+0x8a0>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	2b35      	cmp	r3, #53	@ 0x35
 8000aae:	d116      	bne.n	8000ade <main+0x6c6>

	  	  json4 = 200;
 8000ab0:	4b7a      	ldr	r3, [pc, #488]	@ (8000c9c <main+0x884>)
 8000ab2:	22c8      	movs	r2, #200	@ 0xc8
 8000ab4:	601a      	str	r2, [r3, #0]
  	  	  // trasmissione debug string
	  	  sprintf((char *)txBuffer, "Set 200 PPR\r\n");
 8000ab6:	4a81      	ldr	r2, [pc, #516]	@ (8000cbc <main+0x8a4>)
 8000ab8:	4b73      	ldr	r3, [pc, #460]	@ (8000c88 <main+0x870>)
 8000aba:	0011      	movs	r1, r2
 8000abc:	0018      	movs	r0, r3
 8000abe:	f005 fc65 	bl	800638c <siprintf>
	  	  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000ac2:	4b71      	ldr	r3, [pc, #452]	@ (8000c88 <main+0x870>)
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f7ff fb1f 	bl	8000108 <strlen>
 8000aca:	0003      	movs	r3, r0
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	496e      	ldr	r1, [pc, #440]	@ (8000c88 <main+0x870>)
 8000ad0:	486e      	ldr	r0, [pc, #440]	@ (8000c8c <main+0x874>)
 8000ad2:	2364      	movs	r3, #100	@ 0x64
 8000ad4:	f003 fce0 	bl	8004498 <HAL_UART_Transmit>

	  	  command = NO_COMMAND;
 8000ad8:	4b77      	ldr	r3, [pc, #476]	@ (8000cb8 <main+0x8a0>)
 8000ada:	222e      	movs	r2, #46	@ 0x2e
 8000adc:	701a      	strb	r2, [r3, #0]
	  }
	  if (command == '6') {
 8000ade:	4b76      	ldr	r3, [pc, #472]	@ (8000cb8 <main+0x8a0>)
 8000ae0:	781b      	ldrb	r3, [r3, #0]
 8000ae2:	b2db      	uxtb	r3, r3
 8000ae4:	2b36      	cmp	r3, #54	@ 0x36
 8000ae6:	d117      	bne.n	8000b18 <main+0x700>

	  	  json4 = 2*200;
 8000ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8000c9c <main+0x884>)
 8000aea:	22c8      	movs	r2, #200	@ 0xc8
 8000aec:	0052      	lsls	r2, r2, #1
 8000aee:	601a      	str	r2, [r3, #0]
  	  	  // trasmissione debug string
	  	  sprintf((char *)txBuffer, "Set 400 PPR\r\n");
 8000af0:	4a73      	ldr	r2, [pc, #460]	@ (8000cc0 <main+0x8a8>)
 8000af2:	4b65      	ldr	r3, [pc, #404]	@ (8000c88 <main+0x870>)
 8000af4:	0011      	movs	r1, r2
 8000af6:	0018      	movs	r0, r3
 8000af8:	f005 fc48 	bl	800638c <siprintf>
	  	  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000afc:	4b62      	ldr	r3, [pc, #392]	@ (8000c88 <main+0x870>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f7ff fb02 	bl	8000108 <strlen>
 8000b04:	0003      	movs	r3, r0
 8000b06:	b29a      	uxth	r2, r3
 8000b08:	495f      	ldr	r1, [pc, #380]	@ (8000c88 <main+0x870>)
 8000b0a:	4860      	ldr	r0, [pc, #384]	@ (8000c8c <main+0x874>)
 8000b0c:	2364      	movs	r3, #100	@ 0x64
 8000b0e:	f003 fcc3 	bl	8004498 <HAL_UART_Transmit>

	  	  command = NO_COMMAND;
 8000b12:	4b69      	ldr	r3, [pc, #420]	@ (8000cb8 <main+0x8a0>)
 8000b14:	222e      	movs	r2, #46	@ 0x2e
 8000b16:	701a      	strb	r2, [r3, #0]
	  }
	  if (command == '7') {
 8000b18:	4b67      	ldr	r3, [pc, #412]	@ (8000cb8 <main+0x8a0>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b37      	cmp	r3, #55	@ 0x37
 8000b20:	d117      	bne.n	8000b52 <main+0x73a>

	  	  json4 = 4*200;
 8000b22:	4b5e      	ldr	r3, [pc, #376]	@ (8000c9c <main+0x884>)
 8000b24:	22c8      	movs	r2, #200	@ 0xc8
 8000b26:	0092      	lsls	r2, r2, #2
 8000b28:	601a      	str	r2, [r3, #0]
  	  	  // trasmissione debug string
	  	  sprintf((char *)txBuffer, "Set 800 PPR\r\n");
 8000b2a:	4a66      	ldr	r2, [pc, #408]	@ (8000cc4 <main+0x8ac>)
 8000b2c:	4b56      	ldr	r3, [pc, #344]	@ (8000c88 <main+0x870>)
 8000b2e:	0011      	movs	r1, r2
 8000b30:	0018      	movs	r0, r3
 8000b32:	f005 fc2b 	bl	800638c <siprintf>
	  	  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000b36:	4b54      	ldr	r3, [pc, #336]	@ (8000c88 <main+0x870>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f7ff fae5 	bl	8000108 <strlen>
 8000b3e:	0003      	movs	r3, r0
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4951      	ldr	r1, [pc, #324]	@ (8000c88 <main+0x870>)
 8000b44:	4851      	ldr	r0, [pc, #324]	@ (8000c8c <main+0x874>)
 8000b46:	2364      	movs	r3, #100	@ 0x64
 8000b48:	f003 fca6 	bl	8004498 <HAL_UART_Transmit>

	  	  command = NO_COMMAND;
 8000b4c:	4b5a      	ldr	r3, [pc, #360]	@ (8000cb8 <main+0x8a0>)
 8000b4e:	222e      	movs	r2, #46	@ 0x2e
 8000b50:	701a      	strb	r2, [r3, #0]
	  }
	  if (command == '8') {
 8000b52:	4b59      	ldr	r3, [pc, #356]	@ (8000cb8 <main+0x8a0>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	2b38      	cmp	r3, #56	@ 0x38
 8000b5a:	d117      	bne.n	8000b8c <main+0x774>

	  	  json4 = 8*200;
 8000b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8000c9c <main+0x884>)
 8000b5e:	22c8      	movs	r2, #200	@ 0xc8
 8000b60:	00d2      	lsls	r2, r2, #3
 8000b62:	601a      	str	r2, [r3, #0]
  	  	  // trasmissione debug string
	  	  sprintf((char *)txBuffer, "Set 1600 PPR\r\n");
 8000b64:	4a58      	ldr	r2, [pc, #352]	@ (8000cc8 <main+0x8b0>)
 8000b66:	4b48      	ldr	r3, [pc, #288]	@ (8000c88 <main+0x870>)
 8000b68:	0011      	movs	r1, r2
 8000b6a:	0018      	movs	r0, r3
 8000b6c:	f005 fc0e 	bl	800638c <siprintf>
	  	  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000b70:	4b45      	ldr	r3, [pc, #276]	@ (8000c88 <main+0x870>)
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff fac8 	bl	8000108 <strlen>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	4942      	ldr	r1, [pc, #264]	@ (8000c88 <main+0x870>)
 8000b7e:	4843      	ldr	r0, [pc, #268]	@ (8000c8c <main+0x874>)
 8000b80:	2364      	movs	r3, #100	@ 0x64
 8000b82:	f003 fc89 	bl	8004498 <HAL_UART_Transmit>

	  	  command = NO_COMMAND;
 8000b86:	4b4c      	ldr	r3, [pc, #304]	@ (8000cb8 <main+0x8a0>)
 8000b88:	222e      	movs	r2, #46	@ 0x2e
 8000b8a:	701a      	strb	r2, [r3, #0]
	  }
	  if (command == '9') {
 8000b8c:	4b4a      	ldr	r3, [pc, #296]	@ (8000cb8 <main+0x8a0>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b39      	cmp	r3, #57	@ 0x39
 8000b94:	d117      	bne.n	8000bc6 <main+0x7ae>

	  	  json4 = 16*200;
 8000b96:	4b41      	ldr	r3, [pc, #260]	@ (8000c9c <main+0x884>)
 8000b98:	22c8      	movs	r2, #200	@ 0xc8
 8000b9a:	0112      	lsls	r2, r2, #4
 8000b9c:	601a      	str	r2, [r3, #0]
  	  	  // trasmissione debug string
	  	  sprintf((char *)txBuffer, "Set 3200 PPR\r\n");
 8000b9e:	4a4b      	ldr	r2, [pc, #300]	@ (8000ccc <main+0x8b4>)
 8000ba0:	4b39      	ldr	r3, [pc, #228]	@ (8000c88 <main+0x870>)
 8000ba2:	0011      	movs	r1, r2
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	f005 fbf1 	bl	800638c <siprintf>
	  	  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000baa:	4b37      	ldr	r3, [pc, #220]	@ (8000c88 <main+0x870>)
 8000bac:	0018      	movs	r0, r3
 8000bae:	f7ff faab 	bl	8000108 <strlen>
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	4934      	ldr	r1, [pc, #208]	@ (8000c88 <main+0x870>)
 8000bb8:	4834      	ldr	r0, [pc, #208]	@ (8000c8c <main+0x874>)
 8000bba:	2364      	movs	r3, #100	@ 0x64
 8000bbc:	f003 fc6c 	bl	8004498 <HAL_UART_Transmit>

	  	  command = NO_COMMAND;
 8000bc0:	4b3d      	ldr	r3, [pc, #244]	@ (8000cb8 <main+0x8a0>)
 8000bc2:	222e      	movs	r2, #46	@ 0x2e
 8000bc4:	701a      	strb	r2, [r3, #0]
	  }


	  if (command == 'g') {
 8000bc6:	4b3c      	ldr	r3, [pc, #240]	@ (8000cb8 <main+0x8a0>)
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	2b67      	cmp	r3, #103	@ 0x67
 8000bce:	d000      	beq.n	8000bd2 <main+0x7ba>
 8000bd0:	e08c      	b.n	8000cec <main+0x8d4>

		  // trasmissione debug string
		  sprintf((char *)txBuffer, "--> ");
 8000bd2:	4a2c      	ldr	r2, [pc, #176]	@ (8000c84 <main+0x86c>)
 8000bd4:	4b2c      	ldr	r3, [pc, #176]	@ (8000c88 <main+0x870>)
 8000bd6:	0011      	movs	r1, r2
 8000bd8:	0018      	movs	r0, r3
 8000bda:	f005 fbd7 	bl	800638c <siprintf>
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000bde:	4b2a      	ldr	r3, [pc, #168]	@ (8000c88 <main+0x870>)
 8000be0:	0018      	movs	r0, r3
 8000be2:	f7ff fa91 	bl	8000108 <strlen>
 8000be6:	0003      	movs	r3, r0
 8000be8:	b29a      	uxth	r2, r3
 8000bea:	4927      	ldr	r1, [pc, #156]	@ (8000c88 <main+0x870>)
 8000bec:	4827      	ldr	r0, [pc, #156]	@ (8000c8c <main+0x874>)
 8000bee:	2364      	movs	r3, #100	@ 0x64
 8000bf0:	f003 fc52 	bl	8004498 <HAL_UART_Transmit>

		  json6 = 1;
 8000bf4:	4b36      	ldr	r3, [pc, #216]	@ (8000cd0 <main+0x8b8>)
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	601a      	str	r2, [r3, #0]
		  csum = 255+json6+json7;
 8000bfa:	4b35      	ldr	r3, [pc, #212]	@ (8000cd0 <main+0x8b8>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	33ff      	adds	r3, #255	@ 0xff
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	18d3      	adds	r3, r2, r3
 8000c04:	603b      	str	r3, [r7, #0]
		  sprintf((char *)txBuffer, "     {id:%d,go:%ld,rnd:%ld,csum:%ld}"
 8000c06:	4b32      	ldr	r3, [pc, #200]	@ (8000cd0 <main+0x8b8>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4932      	ldr	r1, [pc, #200]	@ (8000cd4 <main+0x8bc>)
 8000c0c:	481e      	ldr	r0, [pc, #120]	@ (8000c88 <main+0x870>)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	9301      	str	r3, [sp, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	0013      	movs	r3, r2
 8000c18:	22ff      	movs	r2, #255	@ 0xff
 8000c1a:	f005 fbb7 	bl	800638c <siprintf>
 			 , 255 /* broadcast */
			 , json6 /* go */
			 , json7, csum);
		  EN_TX_485();   // IDLE VCC
 8000c1e:	4b21      	ldr	r3, [pc, #132]	@ (8000ca4 <main+0x88c>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	2108      	movs	r1, #8
 8000c24:	0018      	movs	r0, r3
 8000c26:	f002 ff84 	bl	8003b32 <HAL_GPIO_WritePin>
		  // se Timeout != 0 la Transmit è bloccante
		  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 8000c2a:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <main+0x870>)
 8000c2c:	0018      	movs	r0, r3
 8000c2e:	f7ff fa6b 	bl	8000108 <strlen>
 8000c32:	0003      	movs	r3, r0
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	4914      	ldr	r1, [pc, #80]	@ (8000c88 <main+0x870>)
 8000c38:	481b      	ldr	r0, [pc, #108]	@ (8000ca8 <main+0x890>)
 8000c3a:	2364      	movs	r3, #100	@ 0x64
 8000c3c:	f003 fc2c 	bl	8004498 <HAL_UART_Transmit>
		  EN_RX_485();
 8000c40:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <main+0x88c>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	2108      	movs	r1, #8
 8000c46:	0018      	movs	r0, r3
 8000c48:	f002 ff73 	bl	8003b32 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000c4c:	2064      	movs	r0, #100	@ 0x64
 8000c4e:	f001 f93f 	bl	8001ed0 <HAL_Delay>

		  // trasmissione debug string
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <main+0x870>)
 8000c54:	0018      	movs	r0, r3
 8000c56:	f7ff fa57 	bl	8000108 <strlen>
 8000c5a:	0003      	movs	r3, r0
 8000c5c:	b29a      	uxth	r2, r3
 8000c5e:	490a      	ldr	r1, [pc, #40]	@ (8000c88 <main+0x870>)
 8000c60:	480a      	ldr	r0, [pc, #40]	@ (8000c8c <main+0x874>)
 8000c62:	2364      	movs	r3, #100	@ 0x64
 8000c64:	f003 fc18 	bl	8004498 <HAL_UART_Transmit>
		  sprintf((char *)txBuffer, "\r\n");
 8000c68:	4a1b      	ldr	r2, [pc, #108]	@ (8000cd8 <main+0x8c0>)
 8000c6a:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <main+0x870>)
 8000c6c:	0011      	movs	r1, r2
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f005 fb8c 	bl	800638c <siprintf>
		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000c74:	4b04      	ldr	r3, [pc, #16]	@ (8000c88 <main+0x870>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f7ff fa46 	bl	8000108 <strlen>
 8000c7c:	0003      	movs	r3, r0
 8000c7e:	b29a      	uxth	r2, r3
 8000c80:	e02c      	b.n	8000cdc <main+0x8c4>
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	08006d4c 	.word	0x08006d4c
 8000c88:	2000026c 	.word	0x2000026c
 8000c8c:	200001d8 	.word	0x200001d8
 8000c90:	20000000 	.word	0x20000000
 8000c94:	20000578 	.word	0x20000578
 8000c98:	20000004 	.word	0x20000004
 8000c9c:	20000008 	.word	0x20000008
 8000ca0:	08006d54 	.word	0x08006d54
 8000ca4:	50000400 	.word	0x50000400
 8000ca8:	20000144 	.word	0x20000144
 8000cac:	20000470 	.word	0x20000470
 8000cb0:	08006d8c 	.word	0x08006d8c
 8000cb4:	2000046c 	.word	0x2000046c
 8000cb8:	20000576 	.word	0x20000576
 8000cbc:	08006d98 	.word	0x08006d98
 8000cc0:	08006da8 	.word	0x08006da8
 8000cc4:	08006db8 	.word	0x08006db8
 8000cc8:	08006dc8 	.word	0x08006dc8
 8000ccc:	08006dd8 	.word	0x08006dd8
 8000cd0:	2000057c 	.word	0x2000057c
 8000cd4:	08006de8 	.word	0x08006de8
 8000cd8:	08006e10 	.word	0x08006e10
 8000cdc:	49f9      	ldr	r1, [pc, #996]	@ (80010c4 <main+0xcac>)
 8000cde:	48fa      	ldr	r0, [pc, #1000]	@ (80010c8 <main+0xcb0>)
 8000ce0:	2364      	movs	r3, #100	@ 0x64
 8000ce2:	f003 fbd9 	bl	8004498 <HAL_UART_Transmit>

		  command = NO_COMMAND;
 8000ce6:	4bf9      	ldr	r3, [pc, #996]	@ (80010cc <main+0xcb4>)
 8000ce8:	222e      	movs	r2, #46	@ 0x2e
 8000cea:	701a      	strb	r2, [r3, #0]
	  }

	  if (command == 'w') {
 8000cec:	4bf7      	ldr	r3, [pc, #988]	@ (80010cc <main+0xcb4>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	2b77      	cmp	r3, #119	@ 0x77
 8000cf4:	d16b      	bne.n	8000dce <main+0x9b6>

	  		  // trasmissione debug string
	  		  sprintf((char *)txBuffer, "--> ");
 8000cf6:	4af6      	ldr	r2, [pc, #984]	@ (80010d0 <main+0xcb8>)
 8000cf8:	4bf2      	ldr	r3, [pc, #968]	@ (80010c4 <main+0xcac>)
 8000cfa:	0011      	movs	r1, r2
 8000cfc:	0018      	movs	r0, r3
 8000cfe:	f005 fb45 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000d02:	4bf0      	ldr	r3, [pc, #960]	@ (80010c4 <main+0xcac>)
 8000d04:	0018      	movs	r0, r3
 8000d06:	f7ff f9ff 	bl	8000108 <strlen>
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	b29a      	uxth	r2, r3
 8000d0e:	49ed      	ldr	r1, [pc, #948]	@ (80010c4 <main+0xcac>)
 8000d10:	48ed      	ldr	r0, [pc, #948]	@ (80010c8 <main+0xcb0>)
 8000d12:	2364      	movs	r3, #100	@ 0x64
 8000d14:	f003 fbc0 	bl	8004498 <HAL_UART_Transmit>

	  		  json5 = 0;     // deg 4096
 8000d18:	4bee      	ldr	r3, [pc, #952]	@ (80010d4 <main+0xcbc>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
	  		  csum = json1+json5+json7;
 8000d1e:	4bee      	ldr	r3, [pc, #952]	@ (80010d8 <main+0xcc0>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	4bec      	ldr	r3, [pc, #944]	@ (80010d4 <main+0xcbc>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	18d3      	adds	r3, r2, r3
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	18d3      	adds	r3, r2, r3
 8000d2c:	603b      	str	r3, [r7, #0]
	  		  sprintf((char *)txBuffer, "     {id:%ld,deg:%ld,rnd:%ld,csum:%ld}"
 8000d2e:	4bea      	ldr	r3, [pc, #936]	@ (80010d8 <main+0xcc0>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4be8      	ldr	r3, [pc, #928]	@ (80010d4 <main+0xcbc>)
 8000d34:	681c      	ldr	r4, [r3, #0]
 8000d36:	49e9      	ldr	r1, [pc, #932]	@ (80010dc <main+0xcc4>)
 8000d38:	48e2      	ldr	r0, [pc, #904]	@ (80010c4 <main+0xcac>)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	9301      	str	r3, [sp, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	0023      	movs	r3, r4
 8000d44:	f005 fb22 	bl	800638c <siprintf>
	   			 , json1 /* id */
	  			 , json5 /* dir */
	  			 , json7, csum);
	  		  EN_TX_485();   // IDLE VCC
 8000d48:	4be5      	ldr	r3, [pc, #916]	@ (80010e0 <main+0xcc8>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	2108      	movs	r1, #8
 8000d4e:	0018      	movs	r0, r3
 8000d50:	f002 feef 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  // se Timeout != 0 la Transmit è bloccante
	  		  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 8000d54:	4bdb      	ldr	r3, [pc, #876]	@ (80010c4 <main+0xcac>)
 8000d56:	0018      	movs	r0, r3
 8000d58:	f7ff f9d6 	bl	8000108 <strlen>
 8000d5c:	0003      	movs	r3, r0
 8000d5e:	b29a      	uxth	r2, r3
 8000d60:	49d8      	ldr	r1, [pc, #864]	@ (80010c4 <main+0xcac>)
 8000d62:	48e0      	ldr	r0, [pc, #896]	@ (80010e4 <main+0xccc>)
 8000d64:	2364      	movs	r3, #100	@ 0x64
 8000d66:	f003 fb97 	bl	8004498 <HAL_UART_Transmit>
	  		  EN_RX_485();
 8000d6a:	4bdd      	ldr	r3, [pc, #884]	@ (80010e0 <main+0xcc8>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	2108      	movs	r1, #8
 8000d70:	0018      	movs	r0, r3
 8000d72:	f002 fede 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  HAL_Delay(100);
 8000d76:	2064      	movs	r0, #100	@ 0x64
 8000d78:	f001 f8aa 	bl	8001ed0 <HAL_Delay>

	  		  // trasmissione debug string
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000d7c:	4bd1      	ldr	r3, [pc, #836]	@ (80010c4 <main+0xcac>)
 8000d7e:	0018      	movs	r0, r3
 8000d80:	f7ff f9c2 	bl	8000108 <strlen>
 8000d84:	0003      	movs	r3, r0
 8000d86:	b29a      	uxth	r2, r3
 8000d88:	49ce      	ldr	r1, [pc, #824]	@ (80010c4 <main+0xcac>)
 8000d8a:	48cf      	ldr	r0, [pc, #828]	@ (80010c8 <main+0xcb0>)
 8000d8c:	2364      	movs	r3, #100	@ 0x64
 8000d8e:	f003 fb83 	bl	8004498 <HAL_UART_Transmit>
	  		  sprintf((char *)txBuffer, "\r\n<-- %s\r\n", rxBuffer);
 8000d92:	4ad5      	ldr	r2, [pc, #852]	@ (80010e8 <main+0xcd0>)
 8000d94:	49d5      	ldr	r1, [pc, #852]	@ (80010ec <main+0xcd4>)
 8000d96:	4bcb      	ldr	r3, [pc, #812]	@ (80010c4 <main+0xcac>)
 8000d98:	0018      	movs	r0, r3
 8000d9a:	f005 faf7 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000d9e:	4bc9      	ldr	r3, [pc, #804]	@ (80010c4 <main+0xcac>)
 8000da0:	0018      	movs	r0, r3
 8000da2:	f7ff f9b1 	bl	8000108 <strlen>
 8000da6:	0003      	movs	r3, r0
 8000da8:	b29a      	uxth	r2, r3
 8000daa:	49c6      	ldr	r1, [pc, #792]	@ (80010c4 <main+0xcac>)
 8000dac:	48c6      	ldr	r0, [pc, #792]	@ (80010c8 <main+0xcb0>)
 8000dae:	2364      	movs	r3, #100	@ 0x64
 8000db0:	f003 fb72 	bl	8004498 <HAL_UART_Transmit>
	  		  memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
 8000db4:	2380      	movs	r3, #128	@ 0x80
 8000db6:	005a      	lsls	r2, r3, #1
 8000db8:	4bcb      	ldr	r3, [pc, #812]	@ (80010e8 <main+0xcd0>)
 8000dba:	2100      	movs	r1, #0
 8000dbc:	0018      	movs	r0, r3
 8000dbe:	f005 fb05 	bl	80063cc <memset>
	  		  rxIndex = 0;
 8000dc2:	4bcb      	ldr	r3, [pc, #812]	@ (80010f0 <main+0xcd8>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]

	  		  command = NO_COMMAND;
 8000dc8:	4bc0      	ldr	r3, [pc, #768]	@ (80010cc <main+0xcb4>)
 8000dca:	222e      	movs	r2, #46	@ 0x2e
 8000dcc:	701a      	strb	r2, [r3, #0]
	  	  }
	  if (command == 'e') {
 8000dce:	4bbf      	ldr	r3, [pc, #764]	@ (80010cc <main+0xcb4>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	2b65      	cmp	r3, #101	@ 0x65
 8000dd6:	d16c      	bne.n	8000eb2 <main+0xa9a>

	  		  // trasmissione debug string
	  		  sprintf((char *)txBuffer, "--> ");
 8000dd8:	4abd      	ldr	r2, [pc, #756]	@ (80010d0 <main+0xcb8>)
 8000dda:	4bba      	ldr	r3, [pc, #744]	@ (80010c4 <main+0xcac>)
 8000ddc:	0011      	movs	r1, r2
 8000dde:	0018      	movs	r0, r3
 8000de0:	f005 fad4 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000de4:	4bb7      	ldr	r3, [pc, #732]	@ (80010c4 <main+0xcac>)
 8000de6:	0018      	movs	r0, r3
 8000de8:	f7ff f98e 	bl	8000108 <strlen>
 8000dec:	0003      	movs	r3, r0
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	49b4      	ldr	r1, [pc, #720]	@ (80010c4 <main+0xcac>)
 8000df2:	48b5      	ldr	r0, [pc, #724]	@ (80010c8 <main+0xcb0>)
 8000df4:	2364      	movs	r3, #100	@ 0x64
 8000df6:	f003 fb4f 	bl	8004498 <HAL_UART_Transmit>

	  		  json5 = 512;     // deg 4096
 8000dfa:	4bb6      	ldr	r3, [pc, #728]	@ (80010d4 <main+0xcbc>)
 8000dfc:	2280      	movs	r2, #128	@ 0x80
 8000dfe:	0092      	lsls	r2, r2, #2
 8000e00:	601a      	str	r2, [r3, #0]
	  		  csum = json1+json5+json7;
 8000e02:	4bb5      	ldr	r3, [pc, #724]	@ (80010d8 <main+0xcc0>)
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	4bb3      	ldr	r3, [pc, #716]	@ (80010d4 <main+0xcbc>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	18d3      	adds	r3, r2, r3
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	18d3      	adds	r3, r2, r3
 8000e10:	603b      	str	r3, [r7, #0]
	  		  sprintf((char *)txBuffer, "     {id:%ld,deg:%ld,rnd:%ld,csum:%ld}"
 8000e12:	4bb1      	ldr	r3, [pc, #708]	@ (80010d8 <main+0xcc0>)
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	4baf      	ldr	r3, [pc, #700]	@ (80010d4 <main+0xcbc>)
 8000e18:	681c      	ldr	r4, [r3, #0]
 8000e1a:	49b0      	ldr	r1, [pc, #704]	@ (80010dc <main+0xcc4>)
 8000e1c:	48a9      	ldr	r0, [pc, #676]	@ (80010c4 <main+0xcac>)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	9301      	str	r3, [sp, #4]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	9300      	str	r3, [sp, #0]
 8000e26:	0023      	movs	r3, r4
 8000e28:	f005 fab0 	bl	800638c <siprintf>
	   			 , json1 /* id */
	  			 , json5 /* dir */
	  			 , json7, csum);
	  		  EN_TX_485();   // IDLE VCC
 8000e2c:	4bac      	ldr	r3, [pc, #688]	@ (80010e0 <main+0xcc8>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	2108      	movs	r1, #8
 8000e32:	0018      	movs	r0, r3
 8000e34:	f002 fe7d 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  // se Timeout != 0 la Transmit è bloccante
	  		  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 8000e38:	4ba2      	ldr	r3, [pc, #648]	@ (80010c4 <main+0xcac>)
 8000e3a:	0018      	movs	r0, r3
 8000e3c:	f7ff f964 	bl	8000108 <strlen>
 8000e40:	0003      	movs	r3, r0
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	499f      	ldr	r1, [pc, #636]	@ (80010c4 <main+0xcac>)
 8000e46:	48a7      	ldr	r0, [pc, #668]	@ (80010e4 <main+0xccc>)
 8000e48:	2364      	movs	r3, #100	@ 0x64
 8000e4a:	f003 fb25 	bl	8004498 <HAL_UART_Transmit>
	  		  EN_RX_485();
 8000e4e:	4ba4      	ldr	r3, [pc, #656]	@ (80010e0 <main+0xcc8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	2108      	movs	r1, #8
 8000e54:	0018      	movs	r0, r3
 8000e56:	f002 fe6c 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  HAL_Delay(100);
 8000e5a:	2064      	movs	r0, #100	@ 0x64
 8000e5c:	f001 f838 	bl	8001ed0 <HAL_Delay>

	  		  // trasmissione debug string
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000e60:	4b98      	ldr	r3, [pc, #608]	@ (80010c4 <main+0xcac>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f7ff f950 	bl	8000108 <strlen>
 8000e68:	0003      	movs	r3, r0
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	4995      	ldr	r1, [pc, #596]	@ (80010c4 <main+0xcac>)
 8000e6e:	4896      	ldr	r0, [pc, #600]	@ (80010c8 <main+0xcb0>)
 8000e70:	2364      	movs	r3, #100	@ 0x64
 8000e72:	f003 fb11 	bl	8004498 <HAL_UART_Transmit>
	  		  sprintf((char *)txBuffer, "\r\n<-- %s\r\n", rxBuffer);
 8000e76:	4a9c      	ldr	r2, [pc, #624]	@ (80010e8 <main+0xcd0>)
 8000e78:	499c      	ldr	r1, [pc, #624]	@ (80010ec <main+0xcd4>)
 8000e7a:	4b92      	ldr	r3, [pc, #584]	@ (80010c4 <main+0xcac>)
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f005 fa85 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000e82:	4b90      	ldr	r3, [pc, #576]	@ (80010c4 <main+0xcac>)
 8000e84:	0018      	movs	r0, r3
 8000e86:	f7ff f93f 	bl	8000108 <strlen>
 8000e8a:	0003      	movs	r3, r0
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	498d      	ldr	r1, [pc, #564]	@ (80010c4 <main+0xcac>)
 8000e90:	488d      	ldr	r0, [pc, #564]	@ (80010c8 <main+0xcb0>)
 8000e92:	2364      	movs	r3, #100	@ 0x64
 8000e94:	f003 fb00 	bl	8004498 <HAL_UART_Transmit>
	  		  memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
 8000e98:	2380      	movs	r3, #128	@ 0x80
 8000e9a:	005a      	lsls	r2, r3, #1
 8000e9c:	4b92      	ldr	r3, [pc, #584]	@ (80010e8 <main+0xcd0>)
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f005 fa93 	bl	80063cc <memset>
	  		  rxIndex = 0;
 8000ea6:	4b92      	ldr	r3, [pc, #584]	@ (80010f0 <main+0xcd8>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]

	  		  command = NO_COMMAND;
 8000eac:	4b87      	ldr	r3, [pc, #540]	@ (80010cc <main+0xcb4>)
 8000eae:	222e      	movs	r2, #46	@ 0x2e
 8000eb0:	701a      	strb	r2, [r3, #0]
	  	  }

	  if (command == 'd') {
 8000eb2:	4b86      	ldr	r3, [pc, #536]	@ (80010cc <main+0xcb4>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	2b64      	cmp	r3, #100	@ 0x64
 8000eba:	d16c      	bne.n	8000f96 <main+0xb7e>

	  		  // trasmissione debug string
	  		  sprintf((char *)txBuffer, "--> ");
 8000ebc:	4a84      	ldr	r2, [pc, #528]	@ (80010d0 <main+0xcb8>)
 8000ebe:	4b81      	ldr	r3, [pc, #516]	@ (80010c4 <main+0xcac>)
 8000ec0:	0011      	movs	r1, r2
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f005 fa62 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000ec8:	4b7e      	ldr	r3, [pc, #504]	@ (80010c4 <main+0xcac>)
 8000eca:	0018      	movs	r0, r3
 8000ecc:	f7ff f91c 	bl	8000108 <strlen>
 8000ed0:	0003      	movs	r3, r0
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	497b      	ldr	r1, [pc, #492]	@ (80010c4 <main+0xcac>)
 8000ed6:	487c      	ldr	r0, [pc, #496]	@ (80010c8 <main+0xcb0>)
 8000ed8:	2364      	movs	r3, #100	@ 0x64
 8000eda:	f003 fadd 	bl	8004498 <HAL_UART_Transmit>

	  		  json5 = 1024;     // deg 4096
 8000ede:	4b7d      	ldr	r3, [pc, #500]	@ (80010d4 <main+0xcbc>)
 8000ee0:	2280      	movs	r2, #128	@ 0x80
 8000ee2:	00d2      	lsls	r2, r2, #3
 8000ee4:	601a      	str	r2, [r3, #0]
	  		  csum = json1+json5+json7;
 8000ee6:	4b7c      	ldr	r3, [pc, #496]	@ (80010d8 <main+0xcc0>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	4b7a      	ldr	r3, [pc, #488]	@ (80010d4 <main+0xcbc>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	18d3      	adds	r3, r2, r3
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	18d3      	adds	r3, r2, r3
 8000ef4:	603b      	str	r3, [r7, #0]
	  		  sprintf((char *)txBuffer, "     {id:%ld,deg:%ld,rnd:%ld,csum:%ld}"
 8000ef6:	4b78      	ldr	r3, [pc, #480]	@ (80010d8 <main+0xcc0>)
 8000ef8:	681a      	ldr	r2, [r3, #0]
 8000efa:	4b76      	ldr	r3, [pc, #472]	@ (80010d4 <main+0xcbc>)
 8000efc:	681c      	ldr	r4, [r3, #0]
 8000efe:	4977      	ldr	r1, [pc, #476]	@ (80010dc <main+0xcc4>)
 8000f00:	4870      	ldr	r0, [pc, #448]	@ (80010c4 <main+0xcac>)
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	9301      	str	r3, [sp, #4]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	9300      	str	r3, [sp, #0]
 8000f0a:	0023      	movs	r3, r4
 8000f0c:	f005 fa3e 	bl	800638c <siprintf>
	   			 , json1 /* id */
	  			 , json5 /* dir */
	  			 , json7, csum);
	  		  EN_TX_485();   // IDLE VCC
 8000f10:	4b73      	ldr	r3, [pc, #460]	@ (80010e0 <main+0xcc8>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	2108      	movs	r1, #8
 8000f16:	0018      	movs	r0, r3
 8000f18:	f002 fe0b 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  // se Timeout != 0 la Transmit è bloccante
	  		  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 8000f1c:	4b69      	ldr	r3, [pc, #420]	@ (80010c4 <main+0xcac>)
 8000f1e:	0018      	movs	r0, r3
 8000f20:	f7ff f8f2 	bl	8000108 <strlen>
 8000f24:	0003      	movs	r3, r0
 8000f26:	b29a      	uxth	r2, r3
 8000f28:	4966      	ldr	r1, [pc, #408]	@ (80010c4 <main+0xcac>)
 8000f2a:	486e      	ldr	r0, [pc, #440]	@ (80010e4 <main+0xccc>)
 8000f2c:	2364      	movs	r3, #100	@ 0x64
 8000f2e:	f003 fab3 	bl	8004498 <HAL_UART_Transmit>
	  		  EN_RX_485();
 8000f32:	4b6b      	ldr	r3, [pc, #428]	@ (80010e0 <main+0xcc8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	2108      	movs	r1, #8
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f002 fdfa 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  HAL_Delay(100);
 8000f3e:	2064      	movs	r0, #100	@ 0x64
 8000f40:	f000 ffc6 	bl	8001ed0 <HAL_Delay>

	  		  // trasmissione debug string
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000f44:	4b5f      	ldr	r3, [pc, #380]	@ (80010c4 <main+0xcac>)
 8000f46:	0018      	movs	r0, r3
 8000f48:	f7ff f8de 	bl	8000108 <strlen>
 8000f4c:	0003      	movs	r3, r0
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	495c      	ldr	r1, [pc, #368]	@ (80010c4 <main+0xcac>)
 8000f52:	485d      	ldr	r0, [pc, #372]	@ (80010c8 <main+0xcb0>)
 8000f54:	2364      	movs	r3, #100	@ 0x64
 8000f56:	f003 fa9f 	bl	8004498 <HAL_UART_Transmit>
	  		  sprintf((char *)txBuffer, "\r\n<-- %s\r\n", rxBuffer);
 8000f5a:	4a63      	ldr	r2, [pc, #396]	@ (80010e8 <main+0xcd0>)
 8000f5c:	4963      	ldr	r1, [pc, #396]	@ (80010ec <main+0xcd4>)
 8000f5e:	4b59      	ldr	r3, [pc, #356]	@ (80010c4 <main+0xcac>)
 8000f60:	0018      	movs	r0, r3
 8000f62:	f005 fa13 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000f66:	4b57      	ldr	r3, [pc, #348]	@ (80010c4 <main+0xcac>)
 8000f68:	0018      	movs	r0, r3
 8000f6a:	f7ff f8cd 	bl	8000108 <strlen>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	b29a      	uxth	r2, r3
 8000f72:	4954      	ldr	r1, [pc, #336]	@ (80010c4 <main+0xcac>)
 8000f74:	4854      	ldr	r0, [pc, #336]	@ (80010c8 <main+0xcb0>)
 8000f76:	2364      	movs	r3, #100	@ 0x64
 8000f78:	f003 fa8e 	bl	8004498 <HAL_UART_Transmit>
	  		  memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
 8000f7c:	2380      	movs	r3, #128	@ 0x80
 8000f7e:	005a      	lsls	r2, r3, #1
 8000f80:	4b59      	ldr	r3, [pc, #356]	@ (80010e8 <main+0xcd0>)
 8000f82:	2100      	movs	r1, #0
 8000f84:	0018      	movs	r0, r3
 8000f86:	f005 fa21 	bl	80063cc <memset>
	  		  rxIndex = 0;
 8000f8a:	4b59      	ldr	r3, [pc, #356]	@ (80010f0 <main+0xcd8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]

	  		  command = NO_COMMAND;
 8000f90:	4b4e      	ldr	r3, [pc, #312]	@ (80010cc <main+0xcb4>)
 8000f92:	222e      	movs	r2, #46	@ 0x2e
 8000f94:	701a      	strb	r2, [r3, #0]
	  	  }
	  if (command == 'c') {
 8000f96:	4b4d      	ldr	r3, [pc, #308]	@ (80010cc <main+0xcb4>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	2b63      	cmp	r3, #99	@ 0x63
 8000f9e:	d16c      	bne.n	800107a <main+0xc62>

	  		  // trasmissione debug string
	  		  sprintf((char *)txBuffer, "--> ");
 8000fa0:	4a4b      	ldr	r2, [pc, #300]	@ (80010d0 <main+0xcb8>)
 8000fa2:	4b48      	ldr	r3, [pc, #288]	@ (80010c4 <main+0xcac>)
 8000fa4:	0011      	movs	r1, r2
 8000fa6:	0018      	movs	r0, r3
 8000fa8:	f005 f9f0 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8000fac:	4b45      	ldr	r3, [pc, #276]	@ (80010c4 <main+0xcac>)
 8000fae:	0018      	movs	r0, r3
 8000fb0:	f7ff f8aa 	bl	8000108 <strlen>
 8000fb4:	0003      	movs	r3, r0
 8000fb6:	b29a      	uxth	r2, r3
 8000fb8:	4942      	ldr	r1, [pc, #264]	@ (80010c4 <main+0xcac>)
 8000fba:	4843      	ldr	r0, [pc, #268]	@ (80010c8 <main+0xcb0>)
 8000fbc:	2364      	movs	r3, #100	@ 0x64
 8000fbe:	f003 fa6b 	bl	8004498 <HAL_UART_Transmit>

	  		  json5 = 1536;     // deg 4096
 8000fc2:	4b44      	ldr	r3, [pc, #272]	@ (80010d4 <main+0xcbc>)
 8000fc4:	22c0      	movs	r2, #192	@ 0xc0
 8000fc6:	00d2      	lsls	r2, r2, #3
 8000fc8:	601a      	str	r2, [r3, #0]
	  		  csum = json1+json5+json7;
 8000fca:	4b43      	ldr	r3, [pc, #268]	@ (80010d8 <main+0xcc0>)
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	4b41      	ldr	r3, [pc, #260]	@ (80010d4 <main+0xcbc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	18d3      	adds	r3, r2, r3
 8000fd4:	687a      	ldr	r2, [r7, #4]
 8000fd6:	18d3      	adds	r3, r2, r3
 8000fd8:	603b      	str	r3, [r7, #0]
	  		  sprintf((char *)txBuffer, "     {id:%ld,deg:%ld,rnd:%ld,csum:%ld}"
 8000fda:	4b3f      	ldr	r3, [pc, #252]	@ (80010d8 <main+0xcc0>)
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	4b3d      	ldr	r3, [pc, #244]	@ (80010d4 <main+0xcbc>)
 8000fe0:	681c      	ldr	r4, [r3, #0]
 8000fe2:	493e      	ldr	r1, [pc, #248]	@ (80010dc <main+0xcc4>)
 8000fe4:	4837      	ldr	r0, [pc, #220]	@ (80010c4 <main+0xcac>)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	0023      	movs	r3, r4
 8000ff0:	f005 f9cc 	bl	800638c <siprintf>
	   			 , json1 /* id */
	  			 , json5 /* dir */
	  			 , json7, csum);
	  		  EN_TX_485();   // IDLE VCC
 8000ff4:	4b3a      	ldr	r3, [pc, #232]	@ (80010e0 <main+0xcc8>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2108      	movs	r1, #8
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f002 fd99 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  // se Timeout != 0 la Transmit è bloccante
	  		  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 8001000:	4b30      	ldr	r3, [pc, #192]	@ (80010c4 <main+0xcac>)
 8001002:	0018      	movs	r0, r3
 8001004:	f7ff f880 	bl	8000108 <strlen>
 8001008:	0003      	movs	r3, r0
 800100a:	b29a      	uxth	r2, r3
 800100c:	492d      	ldr	r1, [pc, #180]	@ (80010c4 <main+0xcac>)
 800100e:	4835      	ldr	r0, [pc, #212]	@ (80010e4 <main+0xccc>)
 8001010:	2364      	movs	r3, #100	@ 0x64
 8001012:	f003 fa41 	bl	8004498 <HAL_UART_Transmit>
	  		  EN_RX_485();
 8001016:	4b32      	ldr	r3, [pc, #200]	@ (80010e0 <main+0xcc8>)
 8001018:	2200      	movs	r2, #0
 800101a:	2108      	movs	r1, #8
 800101c:	0018      	movs	r0, r3
 800101e:	f002 fd88 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  HAL_Delay(100);
 8001022:	2064      	movs	r0, #100	@ 0x64
 8001024:	f000 ff54 	bl	8001ed0 <HAL_Delay>

	  		  // trasmissione debug string
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8001028:	4b26      	ldr	r3, [pc, #152]	@ (80010c4 <main+0xcac>)
 800102a:	0018      	movs	r0, r3
 800102c:	f7ff f86c 	bl	8000108 <strlen>
 8001030:	0003      	movs	r3, r0
 8001032:	b29a      	uxth	r2, r3
 8001034:	4923      	ldr	r1, [pc, #140]	@ (80010c4 <main+0xcac>)
 8001036:	4824      	ldr	r0, [pc, #144]	@ (80010c8 <main+0xcb0>)
 8001038:	2364      	movs	r3, #100	@ 0x64
 800103a:	f003 fa2d 	bl	8004498 <HAL_UART_Transmit>
	  		  sprintf((char *)txBuffer, "\r\n<-- %s\r\n", rxBuffer);
 800103e:	4a2a      	ldr	r2, [pc, #168]	@ (80010e8 <main+0xcd0>)
 8001040:	492a      	ldr	r1, [pc, #168]	@ (80010ec <main+0xcd4>)
 8001042:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <main+0xcac>)
 8001044:	0018      	movs	r0, r3
 8001046:	f005 f9a1 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 800104a:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <main+0xcac>)
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff f85b 	bl	8000108 <strlen>
 8001052:	0003      	movs	r3, r0
 8001054:	b29a      	uxth	r2, r3
 8001056:	491b      	ldr	r1, [pc, #108]	@ (80010c4 <main+0xcac>)
 8001058:	481b      	ldr	r0, [pc, #108]	@ (80010c8 <main+0xcb0>)
 800105a:	2364      	movs	r3, #100	@ 0x64
 800105c:	f003 fa1c 	bl	8004498 <HAL_UART_Transmit>
	  		  memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
 8001060:	2380      	movs	r3, #128	@ 0x80
 8001062:	005a      	lsls	r2, r3, #1
 8001064:	4b20      	ldr	r3, [pc, #128]	@ (80010e8 <main+0xcd0>)
 8001066:	2100      	movs	r1, #0
 8001068:	0018      	movs	r0, r3
 800106a:	f005 f9af 	bl	80063cc <memset>
	  		  rxIndex = 0;
 800106e:	4b20      	ldr	r3, [pc, #128]	@ (80010f0 <main+0xcd8>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]

	  		  command = NO_COMMAND;
 8001074:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <main+0xcb4>)
 8001076:	222e      	movs	r2, #46	@ 0x2e
 8001078:	701a      	strb	r2, [r3, #0]
	  	  }
	  if (command == 'x') {
 800107a:	4b14      	ldr	r3, [pc, #80]	@ (80010cc <main+0xcb4>)
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	2b78      	cmp	r3, #120	@ 0x78
 8001082:	d000      	beq.n	8001086 <main+0xc6e>
 8001084:	e086      	b.n	8001194 <main+0xd7c>

	  		  // trasmissione debug string
	  		  sprintf((char *)txBuffer, "--> ");
 8001086:	4a12      	ldr	r2, [pc, #72]	@ (80010d0 <main+0xcb8>)
 8001088:	4b0e      	ldr	r3, [pc, #56]	@ (80010c4 <main+0xcac>)
 800108a:	0011      	movs	r1, r2
 800108c:	0018      	movs	r0, r3
 800108e:	f005 f97d 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8001092:	4b0c      	ldr	r3, [pc, #48]	@ (80010c4 <main+0xcac>)
 8001094:	0018      	movs	r0, r3
 8001096:	f7ff f837 	bl	8000108 <strlen>
 800109a:	0003      	movs	r3, r0
 800109c:	b29a      	uxth	r2, r3
 800109e:	4909      	ldr	r1, [pc, #36]	@ (80010c4 <main+0xcac>)
 80010a0:	4809      	ldr	r0, [pc, #36]	@ (80010c8 <main+0xcb0>)
 80010a2:	2364      	movs	r3, #100	@ 0x64
 80010a4:	f003 f9f8 	bl	8004498 <HAL_UART_Transmit>

	  		  json5 = 2048;     // deg 4096
 80010a8:	4b0a      	ldr	r3, [pc, #40]	@ (80010d4 <main+0xcbc>)
 80010aa:	2280      	movs	r2, #128	@ 0x80
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	601a      	str	r2, [r3, #0]
	  		  csum = json1+json5+json7;
 80010b0:	4b09      	ldr	r3, [pc, #36]	@ (80010d8 <main+0xcc0>)
 80010b2:	681a      	ldr	r2, [r3, #0]
 80010b4:	4b07      	ldr	r3, [pc, #28]	@ (80010d4 <main+0xcbc>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	18d3      	adds	r3, r2, r3
 80010ba:	687a      	ldr	r2, [r7, #4]
 80010bc:	18d3      	adds	r3, r2, r3
 80010be:	603b      	str	r3, [r7, #0]
 80010c0:	e018      	b.n	80010f4 <main+0xcdc>
 80010c2:	46c0      	nop			@ (mov r8, r8)
 80010c4:	2000026c 	.word	0x2000026c
 80010c8:	200001d8 	.word	0x200001d8
 80010cc:	20000576 	.word	0x20000576
 80010d0:	08006d4c 	.word	0x08006d4c
 80010d4:	20000580 	.word	0x20000580
 80010d8:	20000004 	.word	0x20000004
 80010dc:	08006e14 	.word	0x08006e14
 80010e0:	50000400 	.word	0x50000400
 80010e4:	20000144 	.word	0x20000144
 80010e8:	20000470 	.word	0x20000470
 80010ec:	08006d8c 	.word	0x08006d8c
 80010f0:	2000046c 	.word	0x2000046c
	  		  sprintf((char *)txBuffer, "     {id:%ld,deg:%ld,rnd:%ld,csum:%ld}"
 80010f4:	4bd4      	ldr	r3, [pc, #848]	@ (8001448 <main+0x1030>)
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	4bd4      	ldr	r3, [pc, #848]	@ (800144c <main+0x1034>)
 80010fa:	681c      	ldr	r4, [r3, #0]
 80010fc:	49d4      	ldr	r1, [pc, #848]	@ (8001450 <main+0x1038>)
 80010fe:	48d5      	ldr	r0, [pc, #852]	@ (8001454 <main+0x103c>)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	0023      	movs	r3, r4
 800110a:	f005 f93f 	bl	800638c <siprintf>
	   			 , json1 /* id */
	  			 , json5 /* dir */
	  			 , json7, csum);
	  		  EN_TX_485();   // IDLE VCC
 800110e:	4bd2      	ldr	r3, [pc, #840]	@ (8001458 <main+0x1040>)
 8001110:	2201      	movs	r2, #1
 8001112:	2108      	movs	r1, #8
 8001114:	0018      	movs	r0, r3
 8001116:	f002 fd0c 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  // se Timeout != 0 la Transmit è bloccante
	  		  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 800111a:	4bce      	ldr	r3, [pc, #824]	@ (8001454 <main+0x103c>)
 800111c:	0018      	movs	r0, r3
 800111e:	f7fe fff3 	bl	8000108 <strlen>
 8001122:	0003      	movs	r3, r0
 8001124:	b29a      	uxth	r2, r3
 8001126:	49cb      	ldr	r1, [pc, #812]	@ (8001454 <main+0x103c>)
 8001128:	48cc      	ldr	r0, [pc, #816]	@ (800145c <main+0x1044>)
 800112a:	2364      	movs	r3, #100	@ 0x64
 800112c:	f003 f9b4 	bl	8004498 <HAL_UART_Transmit>
	  		  EN_RX_485();
 8001130:	4bc9      	ldr	r3, [pc, #804]	@ (8001458 <main+0x1040>)
 8001132:	2200      	movs	r2, #0
 8001134:	2108      	movs	r1, #8
 8001136:	0018      	movs	r0, r3
 8001138:	f002 fcfb 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  HAL_Delay(100);
 800113c:	2064      	movs	r0, #100	@ 0x64
 800113e:	f000 fec7 	bl	8001ed0 <HAL_Delay>

	  		  // trasmissione debug string
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8001142:	4bc4      	ldr	r3, [pc, #784]	@ (8001454 <main+0x103c>)
 8001144:	0018      	movs	r0, r3
 8001146:	f7fe ffdf 	bl	8000108 <strlen>
 800114a:	0003      	movs	r3, r0
 800114c:	b29a      	uxth	r2, r3
 800114e:	49c1      	ldr	r1, [pc, #772]	@ (8001454 <main+0x103c>)
 8001150:	48c3      	ldr	r0, [pc, #780]	@ (8001460 <main+0x1048>)
 8001152:	2364      	movs	r3, #100	@ 0x64
 8001154:	f003 f9a0 	bl	8004498 <HAL_UART_Transmit>
	  		  sprintf((char *)txBuffer, "\r\n<-- %s\r\n", rxBuffer);
 8001158:	4ac2      	ldr	r2, [pc, #776]	@ (8001464 <main+0x104c>)
 800115a:	49c3      	ldr	r1, [pc, #780]	@ (8001468 <main+0x1050>)
 800115c:	4bbd      	ldr	r3, [pc, #756]	@ (8001454 <main+0x103c>)
 800115e:	0018      	movs	r0, r3
 8001160:	f005 f914 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8001164:	4bbb      	ldr	r3, [pc, #748]	@ (8001454 <main+0x103c>)
 8001166:	0018      	movs	r0, r3
 8001168:	f7fe ffce 	bl	8000108 <strlen>
 800116c:	0003      	movs	r3, r0
 800116e:	b29a      	uxth	r2, r3
 8001170:	49b8      	ldr	r1, [pc, #736]	@ (8001454 <main+0x103c>)
 8001172:	48bb      	ldr	r0, [pc, #748]	@ (8001460 <main+0x1048>)
 8001174:	2364      	movs	r3, #100	@ 0x64
 8001176:	f003 f98f 	bl	8004498 <HAL_UART_Transmit>
	  		  memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
 800117a:	2380      	movs	r3, #128	@ 0x80
 800117c:	005a      	lsls	r2, r3, #1
 800117e:	4bb9      	ldr	r3, [pc, #740]	@ (8001464 <main+0x104c>)
 8001180:	2100      	movs	r1, #0
 8001182:	0018      	movs	r0, r3
 8001184:	f005 f922 	bl	80063cc <memset>
	  		  rxIndex = 0;
 8001188:	4bb8      	ldr	r3, [pc, #736]	@ (800146c <main+0x1054>)
 800118a:	2200      	movs	r2, #0
 800118c:	701a      	strb	r2, [r3, #0]

	  		  command = NO_COMMAND;
 800118e:	4bb8      	ldr	r3, [pc, #736]	@ (8001470 <main+0x1058>)
 8001190:	222e      	movs	r2, #46	@ 0x2e
 8001192:	701a      	strb	r2, [r3, #0]
	  	  }
	  if (command == 'z') {
 8001194:	4bb6      	ldr	r3, [pc, #728]	@ (8001470 <main+0x1058>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b7a      	cmp	r3, #122	@ 0x7a
 800119c:	d16c      	bne.n	8001278 <main+0xe60>

	  		  // trasmissione debug string
	  		  sprintf((char *)txBuffer, "--> ");
 800119e:	4ab5      	ldr	r2, [pc, #724]	@ (8001474 <main+0x105c>)
 80011a0:	4bac      	ldr	r3, [pc, #688]	@ (8001454 <main+0x103c>)
 80011a2:	0011      	movs	r1, r2
 80011a4:	0018      	movs	r0, r3
 80011a6:	f005 f8f1 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 80011aa:	4baa      	ldr	r3, [pc, #680]	@ (8001454 <main+0x103c>)
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7fe ffab 	bl	8000108 <strlen>
 80011b2:	0003      	movs	r3, r0
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	49a7      	ldr	r1, [pc, #668]	@ (8001454 <main+0x103c>)
 80011b8:	48a9      	ldr	r0, [pc, #676]	@ (8001460 <main+0x1048>)
 80011ba:	2364      	movs	r3, #100	@ 0x64
 80011bc:	f003 f96c 	bl	8004498 <HAL_UART_Transmit>

	  		  json5 = 2560;     // deg 4096
 80011c0:	4ba2      	ldr	r3, [pc, #648]	@ (800144c <main+0x1034>)
 80011c2:	22a0      	movs	r2, #160	@ 0xa0
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	601a      	str	r2, [r3, #0]
	  		  csum = json1+json5+json7;
 80011c8:	4b9f      	ldr	r3, [pc, #636]	@ (8001448 <main+0x1030>)
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	4b9f      	ldr	r3, [pc, #636]	@ (800144c <main+0x1034>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	18d3      	adds	r3, r2, r3
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	18d3      	adds	r3, r2, r3
 80011d6:	603b      	str	r3, [r7, #0]
	  		  sprintf((char *)txBuffer, "     {id:%ld,deg:%ld,rnd:%ld,csum:%ld}"
 80011d8:	4b9b      	ldr	r3, [pc, #620]	@ (8001448 <main+0x1030>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	4b9b      	ldr	r3, [pc, #620]	@ (800144c <main+0x1034>)
 80011de:	681c      	ldr	r4, [r3, #0]
 80011e0:	499b      	ldr	r1, [pc, #620]	@ (8001450 <main+0x1038>)
 80011e2:	489c      	ldr	r0, [pc, #624]	@ (8001454 <main+0x103c>)
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	9301      	str	r3, [sp, #4]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	0023      	movs	r3, r4
 80011ee:	f005 f8cd 	bl	800638c <siprintf>
	   			 , json1 /* id */
	  			 , json5 /* dir */
	  			 , json7, csum);
	  		  EN_TX_485();   // IDLE VCC
 80011f2:	4b99      	ldr	r3, [pc, #612]	@ (8001458 <main+0x1040>)
 80011f4:	2201      	movs	r2, #1
 80011f6:	2108      	movs	r1, #8
 80011f8:	0018      	movs	r0, r3
 80011fa:	f002 fc9a 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  // se Timeout != 0 la Transmit è bloccante
	  		  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 80011fe:	4b95      	ldr	r3, [pc, #596]	@ (8001454 <main+0x103c>)
 8001200:	0018      	movs	r0, r3
 8001202:	f7fe ff81 	bl	8000108 <strlen>
 8001206:	0003      	movs	r3, r0
 8001208:	b29a      	uxth	r2, r3
 800120a:	4992      	ldr	r1, [pc, #584]	@ (8001454 <main+0x103c>)
 800120c:	4893      	ldr	r0, [pc, #588]	@ (800145c <main+0x1044>)
 800120e:	2364      	movs	r3, #100	@ 0x64
 8001210:	f003 f942 	bl	8004498 <HAL_UART_Transmit>
	  		  EN_RX_485();
 8001214:	4b90      	ldr	r3, [pc, #576]	@ (8001458 <main+0x1040>)
 8001216:	2200      	movs	r2, #0
 8001218:	2108      	movs	r1, #8
 800121a:	0018      	movs	r0, r3
 800121c:	f002 fc89 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  HAL_Delay(100);
 8001220:	2064      	movs	r0, #100	@ 0x64
 8001222:	f000 fe55 	bl	8001ed0 <HAL_Delay>

	  		  // trasmissione debug string
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8001226:	4b8b      	ldr	r3, [pc, #556]	@ (8001454 <main+0x103c>)
 8001228:	0018      	movs	r0, r3
 800122a:	f7fe ff6d 	bl	8000108 <strlen>
 800122e:	0003      	movs	r3, r0
 8001230:	b29a      	uxth	r2, r3
 8001232:	4988      	ldr	r1, [pc, #544]	@ (8001454 <main+0x103c>)
 8001234:	488a      	ldr	r0, [pc, #552]	@ (8001460 <main+0x1048>)
 8001236:	2364      	movs	r3, #100	@ 0x64
 8001238:	f003 f92e 	bl	8004498 <HAL_UART_Transmit>
	  		  sprintf((char *)txBuffer, "\r\n<-- %s\r\n", rxBuffer);
 800123c:	4a89      	ldr	r2, [pc, #548]	@ (8001464 <main+0x104c>)
 800123e:	498a      	ldr	r1, [pc, #552]	@ (8001468 <main+0x1050>)
 8001240:	4b84      	ldr	r3, [pc, #528]	@ (8001454 <main+0x103c>)
 8001242:	0018      	movs	r0, r3
 8001244:	f005 f8a2 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8001248:	4b82      	ldr	r3, [pc, #520]	@ (8001454 <main+0x103c>)
 800124a:	0018      	movs	r0, r3
 800124c:	f7fe ff5c 	bl	8000108 <strlen>
 8001250:	0003      	movs	r3, r0
 8001252:	b29a      	uxth	r2, r3
 8001254:	497f      	ldr	r1, [pc, #508]	@ (8001454 <main+0x103c>)
 8001256:	4882      	ldr	r0, [pc, #520]	@ (8001460 <main+0x1048>)
 8001258:	2364      	movs	r3, #100	@ 0x64
 800125a:	f003 f91d 	bl	8004498 <HAL_UART_Transmit>
	  		  memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
 800125e:	2380      	movs	r3, #128	@ 0x80
 8001260:	005a      	lsls	r2, r3, #1
 8001262:	4b80      	ldr	r3, [pc, #512]	@ (8001464 <main+0x104c>)
 8001264:	2100      	movs	r1, #0
 8001266:	0018      	movs	r0, r3
 8001268:	f005 f8b0 	bl	80063cc <memset>
	  		  rxIndex = 0;
 800126c:	4b7f      	ldr	r3, [pc, #508]	@ (800146c <main+0x1054>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]

	  		  command = NO_COMMAND;
 8001272:	4b7f      	ldr	r3, [pc, #508]	@ (8001470 <main+0x1058>)
 8001274:	222e      	movs	r2, #46	@ 0x2e
 8001276:	701a      	strb	r2, [r3, #0]
	  	  }
	  if (command == 'a') {
 8001278:	4b7d      	ldr	r3, [pc, #500]	@ (8001470 <main+0x1058>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	b2db      	uxtb	r3, r3
 800127e:	2b61      	cmp	r3, #97	@ 0x61
 8001280:	d16c      	bne.n	800135c <main+0xf44>

	  		  // trasmissione debug string
	  		  sprintf((char *)txBuffer, "--> ");
 8001282:	4a7c      	ldr	r2, [pc, #496]	@ (8001474 <main+0x105c>)
 8001284:	4b73      	ldr	r3, [pc, #460]	@ (8001454 <main+0x103c>)
 8001286:	0011      	movs	r1, r2
 8001288:	0018      	movs	r0, r3
 800128a:	f005 f87f 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 800128e:	4b71      	ldr	r3, [pc, #452]	@ (8001454 <main+0x103c>)
 8001290:	0018      	movs	r0, r3
 8001292:	f7fe ff39 	bl	8000108 <strlen>
 8001296:	0003      	movs	r3, r0
 8001298:	b29a      	uxth	r2, r3
 800129a:	496e      	ldr	r1, [pc, #440]	@ (8001454 <main+0x103c>)
 800129c:	4870      	ldr	r0, [pc, #448]	@ (8001460 <main+0x1048>)
 800129e:	2364      	movs	r3, #100	@ 0x64
 80012a0:	f003 f8fa 	bl	8004498 <HAL_UART_Transmit>

	  		  json5 = 3072;     // deg 4096
 80012a4:	4b69      	ldr	r3, [pc, #420]	@ (800144c <main+0x1034>)
 80012a6:	22c0      	movs	r2, #192	@ 0xc0
 80012a8:	0112      	lsls	r2, r2, #4
 80012aa:	601a      	str	r2, [r3, #0]
	  		  csum = json1+json5+json7;
 80012ac:	4b66      	ldr	r3, [pc, #408]	@ (8001448 <main+0x1030>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b66      	ldr	r3, [pc, #408]	@ (800144c <main+0x1034>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	18d3      	adds	r3, r2, r3
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	18d3      	adds	r3, r2, r3
 80012ba:	603b      	str	r3, [r7, #0]
	  		  sprintf((char *)txBuffer, "     {id:%ld,deg:%ld,rnd:%ld,csum:%ld}"
 80012bc:	4b62      	ldr	r3, [pc, #392]	@ (8001448 <main+0x1030>)
 80012be:	681a      	ldr	r2, [r3, #0]
 80012c0:	4b62      	ldr	r3, [pc, #392]	@ (800144c <main+0x1034>)
 80012c2:	681c      	ldr	r4, [r3, #0]
 80012c4:	4962      	ldr	r1, [pc, #392]	@ (8001450 <main+0x1038>)
 80012c6:	4863      	ldr	r0, [pc, #396]	@ (8001454 <main+0x103c>)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	9301      	str	r3, [sp, #4]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	9300      	str	r3, [sp, #0]
 80012d0:	0023      	movs	r3, r4
 80012d2:	f005 f85b 	bl	800638c <siprintf>
	   			 , json1 /* id */
	  			 , json5 /* dir */
	  			 , json7, csum);
	  		  EN_TX_485();   // IDLE VCC
 80012d6:	4b60      	ldr	r3, [pc, #384]	@ (8001458 <main+0x1040>)
 80012d8:	2201      	movs	r2, #1
 80012da:	2108      	movs	r1, #8
 80012dc:	0018      	movs	r0, r3
 80012de:	f002 fc28 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  // se Timeout != 0 la Transmit è bloccante
	  		  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 80012e2:	4b5c      	ldr	r3, [pc, #368]	@ (8001454 <main+0x103c>)
 80012e4:	0018      	movs	r0, r3
 80012e6:	f7fe ff0f 	bl	8000108 <strlen>
 80012ea:	0003      	movs	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	4959      	ldr	r1, [pc, #356]	@ (8001454 <main+0x103c>)
 80012f0:	485a      	ldr	r0, [pc, #360]	@ (800145c <main+0x1044>)
 80012f2:	2364      	movs	r3, #100	@ 0x64
 80012f4:	f003 f8d0 	bl	8004498 <HAL_UART_Transmit>
	  		  EN_RX_485();
 80012f8:	4b57      	ldr	r3, [pc, #348]	@ (8001458 <main+0x1040>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	2108      	movs	r1, #8
 80012fe:	0018      	movs	r0, r3
 8001300:	f002 fc17 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  HAL_Delay(100);
 8001304:	2064      	movs	r0, #100	@ 0x64
 8001306:	f000 fde3 	bl	8001ed0 <HAL_Delay>

	  		  // trasmissione debug string
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 800130a:	4b52      	ldr	r3, [pc, #328]	@ (8001454 <main+0x103c>)
 800130c:	0018      	movs	r0, r3
 800130e:	f7fe fefb 	bl	8000108 <strlen>
 8001312:	0003      	movs	r3, r0
 8001314:	b29a      	uxth	r2, r3
 8001316:	494f      	ldr	r1, [pc, #316]	@ (8001454 <main+0x103c>)
 8001318:	4851      	ldr	r0, [pc, #324]	@ (8001460 <main+0x1048>)
 800131a:	2364      	movs	r3, #100	@ 0x64
 800131c:	f003 f8bc 	bl	8004498 <HAL_UART_Transmit>
	  		  sprintf((char *)txBuffer, "\r\n<-- %s\r\n", rxBuffer);
 8001320:	4a50      	ldr	r2, [pc, #320]	@ (8001464 <main+0x104c>)
 8001322:	4951      	ldr	r1, [pc, #324]	@ (8001468 <main+0x1050>)
 8001324:	4b4b      	ldr	r3, [pc, #300]	@ (8001454 <main+0x103c>)
 8001326:	0018      	movs	r0, r3
 8001328:	f005 f830 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 800132c:	4b49      	ldr	r3, [pc, #292]	@ (8001454 <main+0x103c>)
 800132e:	0018      	movs	r0, r3
 8001330:	f7fe feea 	bl	8000108 <strlen>
 8001334:	0003      	movs	r3, r0
 8001336:	b29a      	uxth	r2, r3
 8001338:	4946      	ldr	r1, [pc, #280]	@ (8001454 <main+0x103c>)
 800133a:	4849      	ldr	r0, [pc, #292]	@ (8001460 <main+0x1048>)
 800133c:	2364      	movs	r3, #100	@ 0x64
 800133e:	f003 f8ab 	bl	8004498 <HAL_UART_Transmit>
	  		  memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
 8001342:	2380      	movs	r3, #128	@ 0x80
 8001344:	005a      	lsls	r2, r3, #1
 8001346:	4b47      	ldr	r3, [pc, #284]	@ (8001464 <main+0x104c>)
 8001348:	2100      	movs	r1, #0
 800134a:	0018      	movs	r0, r3
 800134c:	f005 f83e 	bl	80063cc <memset>
	  		  rxIndex = 0;
 8001350:	4b46      	ldr	r3, [pc, #280]	@ (800146c <main+0x1054>)
 8001352:	2200      	movs	r2, #0
 8001354:	701a      	strb	r2, [r3, #0]

	  		  command = NO_COMMAND;
 8001356:	4b46      	ldr	r3, [pc, #280]	@ (8001470 <main+0x1058>)
 8001358:	222e      	movs	r2, #46	@ 0x2e
 800135a:	701a      	strb	r2, [r3, #0]
	  	  }
	  if (command == 'q') {
 800135c:	4b44      	ldr	r3, [pc, #272]	@ (8001470 <main+0x1058>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	b2db      	uxtb	r3, r3
 8001362:	2b71      	cmp	r3, #113	@ 0x71
 8001364:	d001      	beq.n	800136a <main+0xf52>
 8001366:	f7ff f964 	bl	8000632 <main+0x21a>

	  		  // trasmissione debug string
	  		  sprintf((char *)txBuffer, "--> ");
 800136a:	4a42      	ldr	r2, [pc, #264]	@ (8001474 <main+0x105c>)
 800136c:	4b39      	ldr	r3, [pc, #228]	@ (8001454 <main+0x103c>)
 800136e:	0011      	movs	r1, r2
 8001370:	0018      	movs	r0, r3
 8001372:	f005 f80b 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8001376:	4b37      	ldr	r3, [pc, #220]	@ (8001454 <main+0x103c>)
 8001378:	0018      	movs	r0, r3
 800137a:	f7fe fec5 	bl	8000108 <strlen>
 800137e:	0003      	movs	r3, r0
 8001380:	b29a      	uxth	r2, r3
 8001382:	4934      	ldr	r1, [pc, #208]	@ (8001454 <main+0x103c>)
 8001384:	4836      	ldr	r0, [pc, #216]	@ (8001460 <main+0x1048>)
 8001386:	2364      	movs	r3, #100	@ 0x64
 8001388:	f003 f886 	bl	8004498 <HAL_UART_Transmit>

	  		  json5 = 3584;     // deg 4096
 800138c:	4b2f      	ldr	r3, [pc, #188]	@ (800144c <main+0x1034>)
 800138e:	22e0      	movs	r2, #224	@ 0xe0
 8001390:	0112      	lsls	r2, r2, #4
 8001392:	601a      	str	r2, [r3, #0]
	  		  csum = json1+json5+json7;
 8001394:	4b2c      	ldr	r3, [pc, #176]	@ (8001448 <main+0x1030>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	4b2c      	ldr	r3, [pc, #176]	@ (800144c <main+0x1034>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	18d3      	adds	r3, r2, r3
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	18d3      	adds	r3, r2, r3
 80013a2:	603b      	str	r3, [r7, #0]
	  		  sprintf((char *)txBuffer, "     {id:%ld,deg:%ld,rnd:%ld,csum:%ld}"
 80013a4:	4b28      	ldr	r3, [pc, #160]	@ (8001448 <main+0x1030>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	4b28      	ldr	r3, [pc, #160]	@ (800144c <main+0x1034>)
 80013aa:	681c      	ldr	r4, [r3, #0]
 80013ac:	4928      	ldr	r1, [pc, #160]	@ (8001450 <main+0x1038>)
 80013ae:	4829      	ldr	r0, [pc, #164]	@ (8001454 <main+0x103c>)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	0023      	movs	r3, r4
 80013ba:	f004 ffe7 	bl	800638c <siprintf>
	   			 , json1 /* id */
	  			 , json5 /* dir */
	  			 , json7, csum);
	  		  EN_TX_485();   // IDLE VCC
 80013be:	4b26      	ldr	r3, [pc, #152]	@ (8001458 <main+0x1040>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	2108      	movs	r1, #8
 80013c4:	0018      	movs	r0, r3
 80013c6:	f002 fbb4 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  // se Timeout != 0 la Transmit è bloccante
	  		  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 80013ca:	4b22      	ldr	r3, [pc, #136]	@ (8001454 <main+0x103c>)
 80013cc:	0018      	movs	r0, r3
 80013ce:	f7fe fe9b 	bl	8000108 <strlen>
 80013d2:	0003      	movs	r3, r0
 80013d4:	b29a      	uxth	r2, r3
 80013d6:	491f      	ldr	r1, [pc, #124]	@ (8001454 <main+0x103c>)
 80013d8:	4820      	ldr	r0, [pc, #128]	@ (800145c <main+0x1044>)
 80013da:	2364      	movs	r3, #100	@ 0x64
 80013dc:	f003 f85c 	bl	8004498 <HAL_UART_Transmit>
	  		  EN_RX_485();
 80013e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <main+0x1040>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	2108      	movs	r1, #8
 80013e6:	0018      	movs	r0, r3
 80013e8:	f002 fba3 	bl	8003b32 <HAL_GPIO_WritePin>
	  		  HAL_Delay(100);
 80013ec:	2064      	movs	r0, #100	@ 0x64
 80013ee:	f000 fd6f 	bl	8001ed0 <HAL_Delay>

	  		  // trasmissione debug string
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 80013f2:	4b18      	ldr	r3, [pc, #96]	@ (8001454 <main+0x103c>)
 80013f4:	0018      	movs	r0, r3
 80013f6:	f7fe fe87 	bl	8000108 <strlen>
 80013fa:	0003      	movs	r3, r0
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4915      	ldr	r1, [pc, #84]	@ (8001454 <main+0x103c>)
 8001400:	4817      	ldr	r0, [pc, #92]	@ (8001460 <main+0x1048>)
 8001402:	2364      	movs	r3, #100	@ 0x64
 8001404:	f003 f848 	bl	8004498 <HAL_UART_Transmit>
	  		  sprintf((char *)txBuffer, "\r\n<-- %s\r\n", rxBuffer);
 8001408:	4a16      	ldr	r2, [pc, #88]	@ (8001464 <main+0x104c>)
 800140a:	4917      	ldr	r1, [pc, #92]	@ (8001468 <main+0x1050>)
 800140c:	4b11      	ldr	r3, [pc, #68]	@ (8001454 <main+0x103c>)
 800140e:	0018      	movs	r0, r3
 8001410:	f004 ffbc 	bl	800638c <siprintf>
	  		  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8001414:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <main+0x103c>)
 8001416:	0018      	movs	r0, r3
 8001418:	f7fe fe76 	bl	8000108 <strlen>
 800141c:	0003      	movs	r3, r0
 800141e:	b29a      	uxth	r2, r3
 8001420:	490c      	ldr	r1, [pc, #48]	@ (8001454 <main+0x103c>)
 8001422:	480f      	ldr	r0, [pc, #60]	@ (8001460 <main+0x1048>)
 8001424:	2364      	movs	r3, #100	@ 0x64
 8001426:	f003 f837 	bl	8004498 <HAL_UART_Transmit>
	  		  memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
 800142a:	2380      	movs	r3, #128	@ 0x80
 800142c:	005a      	lsls	r2, r3, #1
 800142e:	4b0d      	ldr	r3, [pc, #52]	@ (8001464 <main+0x104c>)
 8001430:	2100      	movs	r1, #0
 8001432:	0018      	movs	r0, r3
 8001434:	f004 ffca 	bl	80063cc <memset>
	  		  rxIndex = 0;
 8001438:	4b0c      	ldr	r3, [pc, #48]	@ (800146c <main+0x1054>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]

	  		  command = NO_COMMAND;
 800143e:	4b0c      	ldr	r3, [pc, #48]	@ (8001470 <main+0x1058>)
 8001440:	222e      	movs	r2, #46	@ 0x2e
 8001442:	701a      	strb	r2, [r3, #0]
  {
 8001444:	f7ff f8f5 	bl	8000632 <main+0x21a>
 8001448:	20000004 	.word	0x20000004
 800144c:	20000580 	.word	0x20000580
 8001450:	08006e14 	.word	0x08006e14
 8001454:	2000026c 	.word	0x2000026c
 8001458:	50000400 	.word	0x50000400
 800145c:	20000144 	.word	0x20000144
 8001460:	200001d8 	.word	0x200001d8
 8001464:	20000470 	.word	0x20000470
 8001468:	08006d8c 	.word	0x08006d8c
 800146c:	2000046c 	.word	0x2000046c
 8001470:	20000576 	.word	0x20000576
 8001474:	08006d4c 	.word	0x08006d4c

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b590      	push	{r4, r7, lr}
 800147a:	b08d      	sub	sp, #52	@ 0x34
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	2414      	movs	r4, #20
 8001480:	193b      	adds	r3, r7, r4
 8001482:	0018      	movs	r0, r3
 8001484:	231c      	movs	r3, #28
 8001486:	001a      	movs	r2, r3
 8001488:	2100      	movs	r1, #0
 800148a:	f004 ff9f 	bl	80063cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148e:	003b      	movs	r3, r7
 8001490:	0018      	movs	r0, r3
 8001492:	2314      	movs	r3, #20
 8001494:	001a      	movs	r2, r3
 8001496:	2100      	movs	r1, #0
 8001498:	f004 ff98 	bl	80063cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800149c:	193b      	adds	r3, r7, r4
 800149e:	2202      	movs	r2, #2
 80014a0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a2:	193b      	adds	r3, r7, r4
 80014a4:	2280      	movs	r2, #128	@ 0x80
 80014a6:	0052      	lsls	r2, r2, #1
 80014a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014b0:	193b      	adds	r3, r7, r4
 80014b2:	2240      	movs	r2, #64	@ 0x40
 80014b4:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014b6:	193b      	adds	r3, r7, r4
 80014b8:	0018      	movs	r0, r3
 80014ba:	f002 fb57 	bl	8003b6c <HAL_RCC_OscConfig>
 80014be:	1e03      	subs	r3, r0, #0
 80014c0:	d001      	beq.n	80014c6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 80014c2:	f000 fa63 	bl	800198c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014c6:	003b      	movs	r3, r7
 80014c8:	2207      	movs	r2, #7
 80014ca:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80014cc:	003b      	movs	r3, r7
 80014ce:	2200      	movs	r2, #0
 80014d0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80014d2:	003b      	movs	r3, r7
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80014d8:	003b      	movs	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80014de:	003b      	movs	r3, r7
 80014e0:	2280      	movs	r2, #128	@ 0x80
 80014e2:	01d2      	lsls	r2, r2, #7
 80014e4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80014e6:	003b      	movs	r3, r7
 80014e8:	2101      	movs	r1, #1
 80014ea:	0018      	movs	r0, r3
 80014ec:	f002 fd22 	bl	8003f34 <HAL_RCC_ClockConfig>
 80014f0:	1e03      	subs	r3, r0, #0
 80014f2:	d001      	beq.n	80014f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80014f4:	f000 fa4a 	bl	800198c <Error_Handler>
  }
}
 80014f8:	46c0      	nop			@ (mov r8, r8)
 80014fa:	46bd      	mov	sp, r7
 80014fc:	b00d      	add	sp, #52	@ 0x34
 80014fe:	bd90      	pop	{r4, r7, pc}

08001500 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001506:	1d3b      	adds	r3, r7, #4
 8001508:	0018      	movs	r0, r3
 800150a:	231c      	movs	r3, #28
 800150c:	001a      	movs	r2, r3
 800150e:	2100      	movs	r1, #0
 8001510:	f004 ff5c 	bl	80063cc <memset>

  /** Initializes the common peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSIKER;
 8001514:	1d3b      	adds	r3, r7, #4
 8001516:	2280      	movs	r2, #128	@ 0x80
 8001518:	0612      	lsls	r2, r2, #24
 800151a:	601a      	str	r2, [r3, #0]
  PeriphClkInit.HSIKerClockDivider = RCC_HSIKER_DIV4;
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2260      	movs	r2, #96	@ 0x60
 8001520:	605a      	str	r2, [r3, #4]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001522:	1d3b      	adds	r3, r7, #4
 8001524:	0018      	movs	r0, r3
 8001526:	f002 fe73 	bl	8004210 <HAL_RCCEx_PeriphCLKConfig>
 800152a:	1e03      	subs	r3, r0, #0
 800152c:	d001      	beq.n	8001532 <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 800152e:	f000 fa2d 	bl	800198c <Error_Handler>
  }
}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	46bd      	mov	sp, r7
 8001536:	b008      	add	sp, #32
 8001538:	bd80      	pop	{r7, pc}
	...

0800153c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	0018      	movs	r0, r3
 8001546:	230c      	movs	r3, #12
 8001548:	001a      	movs	r2, r3
 800154a:	2100      	movs	r1, #0
 800154c:	f004 ff3e 	bl	80063cc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001550:	4b3d      	ldr	r3, [pc, #244]	@ (8001648 <MX_ADC1_Init+0x10c>)
 8001552:	4a3e      	ldr	r2, [pc, #248]	@ (800164c <MX_ADC1_Init+0x110>)
 8001554:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001556:	4b3c      	ldr	r3, [pc, #240]	@ (8001648 <MX_ADC1_Init+0x10c>)
 8001558:	2280      	movs	r2, #128	@ 0x80
 800155a:	05d2      	lsls	r2, r2, #23
 800155c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800155e:	4b3a      	ldr	r3, [pc, #232]	@ (8001648 <MX_ADC1_Init+0x10c>)
 8001560:	2200      	movs	r2, #0
 8001562:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001564:	4b38      	ldr	r3, [pc, #224]	@ (8001648 <MX_ADC1_Init+0x10c>)
 8001566:	2200      	movs	r2, #0
 8001568:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800156a:	4b37      	ldr	r3, [pc, #220]	@ (8001648 <MX_ADC1_Init+0x10c>)
 800156c:	2280      	movs	r2, #128	@ 0x80
 800156e:	0392      	lsls	r2, r2, #14
 8001570:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001572:	4b35      	ldr	r3, [pc, #212]	@ (8001648 <MX_ADC1_Init+0x10c>)
 8001574:	2204      	movs	r2, #4
 8001576:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001578:	4b33      	ldr	r3, [pc, #204]	@ (8001648 <MX_ADC1_Init+0x10c>)
 800157a:	2200      	movs	r2, #0
 800157c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 800157e:	4b32      	ldr	r3, [pc, #200]	@ (8001648 <MX_ADC1_Init+0x10c>)
 8001580:	2200      	movs	r2, #0
 8001582:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001584:	4b30      	ldr	r3, [pc, #192]	@ (8001648 <MX_ADC1_Init+0x10c>)
 8001586:	2200      	movs	r2, #0
 8001588:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 800158a:	4b2f      	ldr	r3, [pc, #188]	@ (8001648 <MX_ADC1_Init+0x10c>)
 800158c:	2203      	movs	r2, #3
 800158e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001590:	4b2d      	ldr	r3, [pc, #180]	@ (8001648 <MX_ADC1_Init+0x10c>)
 8001592:	2220      	movs	r2, #32
 8001594:	2100      	movs	r1, #0
 8001596:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001598:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <MX_ADC1_Init+0x10c>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800159e:	4b2a      	ldr	r3, [pc, #168]	@ (8001648 <MX_ADC1_Init+0x10c>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80015a4:	4b28      	ldr	r3, [pc, #160]	@ (8001648 <MX_ADC1_Init+0x10c>)
 80015a6:	222c      	movs	r2, #44	@ 0x2c
 80015a8:	2100      	movs	r1, #0
 80015aa:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80015ac:	4b26      	ldr	r3, [pc, #152]	@ (8001648 <MX_ADC1_Init+0x10c>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 80015b2:	4b25      	ldr	r3, [pc, #148]	@ (8001648 <MX_ADC1_Init+0x10c>)
 80015b4:	2205      	movs	r2, #5
 80015b6:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 80015b8:	4b23      	ldr	r3, [pc, #140]	@ (8001648 <MX_ADC1_Init+0x10c>)
 80015ba:	2205      	movs	r2, #5
 80015bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80015be:	4b22      	ldr	r3, [pc, #136]	@ (8001648 <MX_ADC1_Init+0x10c>)
 80015c0:	223c      	movs	r2, #60	@ 0x3c
 80015c2:	2100      	movs	r1, #0
 80015c4:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80015c6:	4b20      	ldr	r3, [pc, #128]	@ (8001648 <MX_ADC1_Init+0x10c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80015cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001648 <MX_ADC1_Init+0x10c>)
 80015ce:	0018      	movs	r0, r3
 80015d0:	f000 fdfa 	bl	80021c8 <HAL_ADC_Init>
 80015d4:	1e03      	subs	r3, r0, #0
 80015d6:	d001      	beq.n	80015dc <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 80015d8:	f000 f9d8 	bl	800198c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80015dc:	1d3b      	adds	r3, r7, #4
 80015de:	2201      	movs	r2, #1
 80015e0:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80015e2:	1d3b      	adds	r3, r7, #4
 80015e4:	2200      	movs	r2, #0
 80015e6:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	2200      	movs	r2, #0
 80015ec:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80015ee:	1d3a      	adds	r2, r7, #4
 80015f0:	4b15      	ldr	r3, [pc, #84]	@ (8001648 <MX_ADC1_Init+0x10c>)
 80015f2:	0011      	movs	r1, r2
 80015f4:	0018      	movs	r0, r3
 80015f6:	f001 f833 	bl	8002660 <HAL_ADC_ConfigChannel>
 80015fa:	1e03      	subs	r3, r0, #0
 80015fc:	d001      	beq.n	8001602 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 80015fe:	f000 f9c5 	bl	800198c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001602:	1d3b      	adds	r3, r7, #4
 8001604:	2204      	movs	r2, #4
 8001606:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001608:	1d3a      	adds	r2, r7, #4
 800160a:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <MX_ADC1_Init+0x10c>)
 800160c:	0011      	movs	r1, r2
 800160e:	0018      	movs	r0, r3
 8001610:	f001 f826 	bl	8002660 <HAL_ADC_ConfigChannel>
 8001614:	1e03      	subs	r3, r0, #0
 8001616:	d001      	beq.n	800161c <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001618:	f000 f9b8 	bl	800198c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800161c:	1d3b      	adds	r3, r7, #4
 800161e:	2208      	movs	r2, #8
 8001620:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001622:	1d3a      	adds	r2, r7, #4
 8001624:	4b08      	ldr	r3, [pc, #32]	@ (8001648 <MX_ADC1_Init+0x10c>)
 8001626:	0011      	movs	r1, r2
 8001628:	0018      	movs	r0, r3
 800162a:	f001 f819 	bl	8002660 <HAL_ADC_ConfigChannel>
 800162e:	1e03      	subs	r3, r0, #0
 8001630:	d001      	beq.n	8001636 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8001632:	f000 f9ab 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* Calibrazione ADC */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001636:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <MX_ADC1_Init+0x10c>)
 8001638:	0018      	movs	r0, r3
 800163a:	f001 fbe3 	bl	8002e04 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END ADC1_Init 2 */

}
 800163e:	46c0      	nop			@ (mov r8, r8)
 8001640:	46bd      	mov	sp, r7
 8001642:	b004      	add	sp, #16
 8001644:	bd80      	pop	{r7, pc}
 8001646:	46c0      	nop			@ (mov r8, r8)
 8001648:	20000084 	.word	0x20000084
 800164c:	40012400 	.word	0x40012400

08001650 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001654:	4b26      	ldr	r3, [pc, #152]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 8001656:	4a27      	ldr	r2, [pc, #156]	@ (80016f4 <MX_USART1_UART_Init+0xa4>)
 8001658:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 800165a:	4b25      	ldr	r3, [pc, #148]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 800165c:	2296      	movs	r2, #150	@ 0x96
 800165e:	01d2      	lsls	r2, r2, #7
 8001660:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b23      	ldr	r3, [pc, #140]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b21      	ldr	r3, [pc, #132]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800166e:	4b20      	ldr	r3, [pc, #128]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b1e      	ldr	r3, [pc, #120]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b1d      	ldr	r3, [pc, #116]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b1b      	ldr	r3, [pc, #108]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001686:	4b1a      	ldr	r3, [pc, #104]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800168c:	4b18      	ldr	r3, [pc, #96]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8001692:	4b17      	ldr	r3, [pc, #92]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 8001694:	2210      	movs	r2, #16
 8001696:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001698:	4b15      	ldr	r3, [pc, #84]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 800169a:	2280      	movs	r2, #128	@ 0x80
 800169c:	0152      	lsls	r2, r2, #5
 800169e:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016a0:	4b13      	ldr	r3, [pc, #76]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 80016a2:	0018      	movs	r0, r3
 80016a4:	f002 fea2 	bl	80043ec <HAL_UART_Init>
 80016a8:	1e03      	subs	r3, r0, #0
 80016aa:	d001      	beq.n	80016b0 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 80016ac:	f000 f96e 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 80016b0:	23a0      	movs	r3, #160	@ 0xa0
 80016b2:	061a      	lsls	r2, r3, #24
 80016b4:	4b0e      	ldr	r3, [pc, #56]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 80016b6:	0011      	movs	r1, r2
 80016b8:	0018      	movs	r0, r3
 80016ba:	f004 fd88 	bl	80061ce <HAL_UARTEx_SetTxFifoThreshold>
 80016be:	1e03      	subs	r3, r0, #0
 80016c0:	d001      	beq.n	80016c6 <MX_USART1_UART_Init+0x76>
  {
    Error_Handler();
 80016c2:	f000 f963 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c6:	4b0a      	ldr	r3, [pc, #40]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 80016c8:	2100      	movs	r1, #0
 80016ca:	0018      	movs	r0, r3
 80016cc:	f004 fdbe 	bl	800624c <HAL_UARTEx_SetRxFifoThreshold>
 80016d0:	1e03      	subs	r3, r0, #0
 80016d2:	d001      	beq.n	80016d8 <MX_USART1_UART_Init+0x88>
  {
    Error_Handler();
 80016d4:	f000 f95a 	bl	800198c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80016d8:	4b05      	ldr	r3, [pc, #20]	@ (80016f0 <MX_USART1_UART_Init+0xa0>)
 80016da:	0018      	movs	r0, r3
 80016dc:	f004 fd3a 	bl	8006154 <HAL_UARTEx_EnableFifoMode>
 80016e0:	1e03      	subs	r3, r0, #0
 80016e2:	d001      	beq.n	80016e8 <MX_USART1_UART_Init+0x98>
  {
    Error_Handler();
 80016e4:	f000 f952 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e8:	46c0      	nop			@ (mov r8, r8)
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	46c0      	nop			@ (mov r8, r8)
 80016f0:	20000144 	.word	0x20000144
 80016f4:	40013800 	.word	0x40013800

080016f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 80016fe:	4a1b      	ldr	r2, [pc, #108]	@ (800176c <MX_USART2_UART_Init+0x74>)
 8001700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001702:	4b19      	ldr	r3, [pc, #100]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 8001704:	2296      	movs	r2, #150	@ 0x96
 8001706:	01d2      	lsls	r2, r2, #7
 8001708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b17      	ldr	r3, [pc, #92]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b15      	ldr	r3, [pc, #84]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001716:	4b14      	ldr	r3, [pc, #80]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b12      	ldr	r3, [pc, #72]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b11      	ldr	r3, [pc, #68]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b0f      	ldr	r3, [pc, #60]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172e:	4b0e      	ldr	r3, [pc, #56]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001734:	4b0c      	ldr	r3, [pc, #48]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 800173a:	4b0b      	ldr	r3, [pc, #44]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 800173c:	2230      	movs	r2, #48	@ 0x30
 800173e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8001740:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 8001742:	2280      	movs	r2, #128	@ 0x80
 8001744:	0152      	lsls	r2, r2, #5
 8001746:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8001748:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 800174a:	2280      	movs	r2, #128	@ 0x80
 800174c:	0192      	lsls	r2, r2, #6
 800174e:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001750:	4b05      	ldr	r3, [pc, #20]	@ (8001768 <MX_USART2_UART_Init+0x70>)
 8001752:	0018      	movs	r0, r3
 8001754:	f002 fe4a 	bl	80043ec <HAL_UART_Init>
 8001758:	1e03      	subs	r3, r0, #0
 800175a:	d001      	beq.n	8001760 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 800175c:	f000 f916 	bl	800198c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001760:	46c0      	nop			@ (mov r8, r8)
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	46c0      	nop			@ (mov r8, r8)
 8001768:	200001d8 	.word	0x200001d8
 800176c:	40004400 	.word	0x40004400

08001770 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001776:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <MX_DMA_Init+0x38>)
 8001778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800177a:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <MX_DMA_Init+0x38>)
 800177c:	2101      	movs	r1, #1
 800177e:	430a      	orrs	r2, r1
 8001780:	639a      	str	r2, [r3, #56]	@ 0x38
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <MX_DMA_Init+0x38>)
 8001784:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001786:	2201      	movs	r2, #1
 8001788:	4013      	ands	r3, r2
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2100      	movs	r1, #0
 8001792:	2009      	movs	r0, #9
 8001794:	f001 fcdc 	bl	8003150 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001798:	2009      	movs	r0, #9
 800179a:	f001 fcee 	bl	800317a <HAL_NVIC_EnableIRQ>

}
 800179e:	46c0      	nop			@ (mov r8, r8)
 80017a0:	46bd      	mov	sp, r7
 80017a2:	b002      	add	sp, #8
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	46c0      	nop			@ (mov r8, r8)
 80017a8:	40021000 	.word	0x40021000

080017ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ac:	b590      	push	{r4, r7, lr}
 80017ae:	b089      	sub	sp, #36	@ 0x24
 80017b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017b2:	240c      	movs	r4, #12
 80017b4:	193b      	adds	r3, r7, r4
 80017b6:	0018      	movs	r0, r3
 80017b8:	2314      	movs	r3, #20
 80017ba:	001a      	movs	r2, r3
 80017bc:	2100      	movs	r1, #0
 80017be:	f004 fe05 	bl	80063cc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c2:	4b46      	ldr	r3, [pc, #280]	@ (80018dc <MX_GPIO_Init+0x130>)
 80017c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017c6:	4b45      	ldr	r3, [pc, #276]	@ (80018dc <MX_GPIO_Init+0x130>)
 80017c8:	2101      	movs	r1, #1
 80017ca:	430a      	orrs	r2, r1
 80017cc:	635a      	str	r2, [r3, #52]	@ 0x34
 80017ce:	4b43      	ldr	r3, [pc, #268]	@ (80018dc <MX_GPIO_Init+0x130>)
 80017d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017d2:	2201      	movs	r2, #1
 80017d4:	4013      	ands	r3, r2
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017da:	4b40      	ldr	r3, [pc, #256]	@ (80018dc <MX_GPIO_Init+0x130>)
 80017dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017de:	4b3f      	ldr	r3, [pc, #252]	@ (80018dc <MX_GPIO_Init+0x130>)
 80017e0:	2102      	movs	r1, #2
 80017e2:	430a      	orrs	r2, r1
 80017e4:	635a      	str	r2, [r3, #52]	@ 0x34
 80017e6:	4b3d      	ldr	r3, [pc, #244]	@ (80018dc <MX_GPIO_Init+0x130>)
 80017e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80017ea:	2202      	movs	r2, #2
 80017ec:	4013      	ands	r3, r2
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	4b3a      	ldr	r3, [pc, #232]	@ (80018dc <MX_GPIO_Init+0x130>)
 80017f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80017f6:	4b39      	ldr	r3, [pc, #228]	@ (80018dc <MX_GPIO_Init+0x130>)
 80017f8:	2104      	movs	r1, #4
 80017fa:	430a      	orrs	r2, r1
 80017fc:	635a      	str	r2, [r3, #52]	@ 0x34
 80017fe:	4b37      	ldr	r3, [pc, #220]	@ (80018dc <MX_GPIO_Init+0x130>)
 8001800:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001802:	2204      	movs	r2, #4
 8001804:	4013      	ands	r3, r2
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A4988_nEN_Pin|A4988_MS1_Pin|A4988_MS2_Pin|A4988_MS3_Pin, GPIO_PIN_RESET);
 800180a:	23a0      	movs	r3, #160	@ 0xa0
 800180c:	05db      	lsls	r3, r3, #23
 800180e:	2200      	movs	r2, #0
 8001810:	21f0      	movs	r1, #240	@ 0xf0
 8001812:	0018      	movs	r0, r3
 8001814:	f002 f98d 	bl	8003b32 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A4988_nRST_Pin|A4988_nSLEEP_Pin|A4988_STEP_Pin|A4988_DIR_Pin
 8001818:	4931      	ldr	r1, [pc, #196]	@ (80018e0 <MX_GPIO_Init+0x134>)
 800181a:	4b32      	ldr	r3, [pc, #200]	@ (80018e4 <MX_GPIO_Init+0x138>)
 800181c:	2200      	movs	r2, #0
 800181e:	0018      	movs	r0, r3
 8001820:	f002 f987 	bl	8003b32 <HAL_GPIO_WritePin>
                          |U1_TXEN_485_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : A4988_nEN_Pin A4988_MS1_Pin A4988_MS2_Pin A4988_MS3_Pin */
  GPIO_InitStruct.Pin = A4988_nEN_Pin|A4988_MS1_Pin|A4988_MS2_Pin|A4988_MS3_Pin;
 8001824:	193b      	adds	r3, r7, r4
 8001826:	22f0      	movs	r2, #240	@ 0xf0
 8001828:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	193b      	adds	r3, r7, r4
 800182c:	2201      	movs	r2, #1
 800182e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	193b      	adds	r3, r7, r4
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	193b      	adds	r3, r7, r4
 8001838:	2200      	movs	r2, #0
 800183a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183c:	193a      	adds	r2, r7, r4
 800183e:	23a0      	movs	r3, #160	@ 0xa0
 8001840:	05db      	lsls	r3, r3, #23
 8001842:	0011      	movs	r1, r2
 8001844:	0018      	movs	r0, r3
 8001846:	f001 ffe5 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pins : A4988_nRST_Pin A4988_nSLEEP_Pin A4988_STEP_Pin A4988_DIR_Pin
                           U1_TXEN_485_Pin */
  GPIO_InitStruct.Pin = A4988_nRST_Pin|A4988_nSLEEP_Pin|A4988_STEP_Pin|A4988_DIR_Pin
 800184a:	193b      	adds	r3, r7, r4
 800184c:	4a24      	ldr	r2, [pc, #144]	@ (80018e0 <MX_GPIO_Init+0x134>)
 800184e:	601a      	str	r2, [r3, #0]
                          |U1_TXEN_485_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001850:	193b      	adds	r3, r7, r4
 8001852:	2201      	movs	r2, #1
 8001854:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	193b      	adds	r3, r7, r4
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185c:	193b      	adds	r3, r7, r4
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001862:	193b      	adds	r3, r7, r4
 8001864:	4a1f      	ldr	r2, [pc, #124]	@ (80018e4 <MX_GPIO_Init+0x138>)
 8001866:	0019      	movs	r1, r3
 8001868:	0010      	movs	r0, r2
 800186a:	f001 ffd3 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADD0_Pin ADD1_Pin ADD2_Pin */
  GPIO_InitStruct.Pin = ADD0_Pin|ADD1_Pin|ADD2_Pin;
 800186e:	0021      	movs	r1, r4
 8001870:	187b      	adds	r3, r7, r1
 8001872:	22e0      	movs	r2, #224	@ 0xe0
 8001874:	0212      	lsls	r2, r2, #8
 8001876:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001878:	000c      	movs	r4, r1
 800187a:	193b      	adds	r3, r7, r4
 800187c:	2200      	movs	r2, #0
 800187e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001880:	193b      	adds	r3, r7, r4
 8001882:	2202      	movs	r2, #2
 8001884:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	193b      	adds	r3, r7, r4
 8001888:	4a16      	ldr	r2, [pc, #88]	@ (80018e4 <MX_GPIO_Init+0x138>)
 800188a:	0019      	movs	r1, r3
 800188c:	0010      	movs	r0, r2
 800188e:	f001 ffc1 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADD3_Pin ADD4_Pin ADD7_Pin */
  GPIO_InitStruct.Pin = ADD3_Pin|ADD4_Pin|ADD7_Pin;
 8001892:	193b      	adds	r3, r7, r4
 8001894:	22e0      	movs	r2, #224	@ 0xe0
 8001896:	00d2      	lsls	r2, r2, #3
 8001898:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189a:	193b      	adds	r3, r7, r4
 800189c:	2200      	movs	r2, #0
 800189e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018a0:	193b      	adds	r3, r7, r4
 80018a2:	2202      	movs	r2, #2
 80018a4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018a6:	193a      	adds	r2, r7, r4
 80018a8:	23a0      	movs	r3, #160	@ 0xa0
 80018aa:	05db      	lsls	r3, r3, #23
 80018ac:	0011      	movs	r1, r2
 80018ae:	0018      	movs	r0, r3
 80018b0:	f001 ffb0 	bl	8003814 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADD5_Pin ADD6_Pin */
  GPIO_InitStruct.Pin = ADD5_Pin|ADD6_Pin;
 80018b4:	193b      	adds	r3, r7, r4
 80018b6:	22c0      	movs	r2, #192	@ 0xc0
 80018b8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ba:	193b      	adds	r3, r7, r4
 80018bc:	2200      	movs	r2, #0
 80018be:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80018c0:	193b      	adds	r3, r7, r4
 80018c2:	2202      	movs	r2, #2
 80018c4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018c6:	193b      	adds	r3, r7, r4
 80018c8:	4a07      	ldr	r2, [pc, #28]	@ (80018e8 <MX_GPIO_Init+0x13c>)
 80018ca:	0019      	movs	r1, r3
 80018cc:	0010      	movs	r0, r2
 80018ce:	f001 ffa1 	bl	8003814 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018d2:	46c0      	nop			@ (mov r8, r8)
 80018d4:	46bd      	mov	sp, r7
 80018d6:	b009      	add	sp, #36	@ 0x24
 80018d8:	bd90      	pop	{r4, r7, pc}
 80018da:	46c0      	nop			@ (mov r8, r8)
 80018dc:	40021000 	.word	0x40021000
 80018e0:	0000040f 	.word	0x0000040f
 80018e4:	50000400 	.word	0x50000400
 80018e8:	50000800 	.word	0x50000800

080018ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b082      	sub	sp, #8
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
    if (huart == &huart1)
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <HAL_UART_RxCpltCallback+0x88>)
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d127      	bne.n	800194c <HAL_UART_RxCpltCallback+0x60>
    {
    	rxBuffer[rxIndex] = rxRcvd;
 80018fc:	4b1e      	ldr	r3, [pc, #120]	@ (8001978 <HAL_UART_RxCpltCallback+0x8c>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	b2db      	uxtb	r3, r3
 8001902:	001a      	movs	r2, r3
 8001904:	4b1d      	ldr	r3, [pc, #116]	@ (800197c <HAL_UART_RxCpltCallback+0x90>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	b2d9      	uxtb	r1, r3
 800190a:	4b1d      	ldr	r3, [pc, #116]	@ (8001980 <HAL_UART_RxCpltCallback+0x94>)
 800190c:	5499      	strb	r1, [r3, r2]

        // il carattere dovrebbe essere già stato letto da HAL in rxBuffer[rxIndex]
    	if (rxBuffer[0] == '{') {
 800190e:	4b1c      	ldr	r3, [pc, #112]	@ (8001980 <HAL_UART_RxCpltCallback+0x94>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	b2db      	uxtb	r3, r3
 8001914:	2b7b      	cmp	r3, #123	@ 0x7b
 8001916:	d110      	bne.n	800193a <HAL_UART_RxCpltCallback+0x4e>

    		/* è partito un JSON */
    		rxIndex ++;
 8001918:	4b17      	ldr	r3, [pc, #92]	@ (8001978 <HAL_UART_RxCpltCallback+0x8c>)
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	b2db      	uxtb	r3, r3
 800191e:	3301      	adds	r3, #1
 8001920:	b2da      	uxtb	r2, r3
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <HAL_UART_RxCpltCallback+0x8c>)
 8001924:	701a      	strb	r2, [r3, #0]
    		if (rxIndex < RX_BUFFER_SIZE) {
 8001926:	4b14      	ldr	r3, [pc, #80]	@ (8001978 <HAL_UART_RxCpltCallback+0x8c>)
 8001928:	781b      	ldrb	r3, [r3, #0]
    			/* termino sempre la stringa  per sicurezza */
    			rxBuffer[rxIndex] = '\0';
 800192a:	4b13      	ldr	r3, [pc, #76]	@ (8001978 <HAL_UART_RxCpltCallback+0x8c>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b2db      	uxtb	r3, r3
 8001930:	001a      	movs	r2, r3
 8001932:	4b13      	ldr	r3, [pc, #76]	@ (8001980 <HAL_UART_RxCpltCallback+0x94>)
 8001934:	2100      	movs	r1, #0
 8001936:	5499      	strb	r1, [r3, r2]
 8001938:	e002      	b.n	8001940 <HAL_UART_RxCpltCallback+0x54>
    			memset((uint8_t *)rxBuffer, 0, RX_BUFFER_SIZE);
    			rxIndex = 0;
    		}
    	}
    	else {
    	    rxIndex = 0;
 800193a:	4b0f      	ldr	r3, [pc, #60]	@ (8001978 <HAL_UART_RxCpltCallback+0x8c>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
    	}

        // riattivo la ricezione
    	HAL_UART_Receive_IT(&huart1, &rxRcvd, 1);
 8001940:	490e      	ldr	r1, [pc, #56]	@ (800197c <HAL_UART_RxCpltCallback+0x90>)
 8001942:	4b0c      	ldr	r3, [pc, #48]	@ (8001974 <HAL_UART_RxCpltCallback+0x88>)
 8001944:	2201      	movs	r2, #1
 8001946:	0018      	movs	r0, r3
 8001948:	f002 fe4a 	bl	80045e0 <HAL_UART_Receive_IT>
    }

    if (huart == &huart2)
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	4b0d      	ldr	r3, [pc, #52]	@ (8001984 <HAL_UART_RxCpltCallback+0x98>)
 8001950:	429a      	cmp	r2, r3
 8001952:	d10a      	bne.n	800196a <HAL_UART_RxCpltCallback+0x7e>
    {
    	command = rxRcvd;
 8001954:	4b09      	ldr	r3, [pc, #36]	@ (800197c <HAL_UART_RxCpltCallback+0x90>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <HAL_UART_RxCpltCallback+0x9c>)
 800195c:	701a      	strb	r2, [r3, #0]

        // riattivo la ricezione
    	HAL_UART_Receive_IT(&huart2, &rxRcvd, 1);
 800195e:	4907      	ldr	r1, [pc, #28]	@ (800197c <HAL_UART_RxCpltCallback+0x90>)
 8001960:	4b08      	ldr	r3, [pc, #32]	@ (8001984 <HAL_UART_RxCpltCallback+0x98>)
 8001962:	2201      	movs	r2, #1
 8001964:	0018      	movs	r0, r3
 8001966:	f002 fe3b 	bl	80045e0 <HAL_UART_Receive_IT>
    }
}
 800196a:	46c0      	nop			@ (mov r8, r8)
 800196c:	46bd      	mov	sp, r7
 800196e:	b002      	add	sp, #8
 8001970:	bd80      	pop	{r7, pc}
 8001972:	46c0      	nop			@ (mov r8, r8)
 8001974:	20000144 	.word	0x20000144
 8001978:	2000046c 	.word	0x2000046c
 800197c:	2000046d 	.word	0x2000046d
 8001980:	20000470 	.word	0x20000470
 8001984:	200001d8 	.word	0x200001d8
 8001988:	20000576 	.word	0x20000576

0800198c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001990:	b672      	cpsid	i
}
 8001992:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  sprintf((char *)txBuffer, "Error! %s %d\n\r", __FILE__,__LINE__);
 8001994:	4b09      	ldr	r3, [pc, #36]	@ (80019bc <Error_Handler+0x30>)
 8001996:	4a0a      	ldr	r2, [pc, #40]	@ (80019c0 <Error_Handler+0x34>)
 8001998:	490a      	ldr	r1, [pc, #40]	@ (80019c4 <Error_Handler+0x38>)
 800199a:	480b      	ldr	r0, [pc, #44]	@ (80019c8 <Error_Handler+0x3c>)
 800199c:	f004 fcf6 	bl	800638c <siprintf>
  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 80019a0:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <Error_Handler+0x3c>)
 80019a2:	0018      	movs	r0, r3
 80019a4:	f7fe fbb0 	bl	8000108 <strlen>
 80019a8:	0003      	movs	r3, r0
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	4906      	ldr	r1, [pc, #24]	@ (80019c8 <Error_Handler+0x3c>)
 80019ae:	4807      	ldr	r0, [pc, #28]	@ (80019cc <Error_Handler+0x40>)
 80019b0:	2364      	movs	r3, #100	@ 0x64
 80019b2:	f002 fd71 	bl	8004498 <HAL_UART_Transmit>


  while (1)
 80019b6:	46c0      	nop			@ (mov r8, r8)
 80019b8:	e7fd      	b.n	80019b6 <Error_Handler+0x2a>
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	00000409 	.word	0x00000409
 80019c0:	08006e3c 	.word	0x08006e3c
 80019c4:	08006e50 	.word	0x08006e50
 80019c8:	2000026c 	.word	0x2000026c
 80019cc:	200001d8 	.word	0x200001d8

080019d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001a14 <HAL_MspInit+0x44>)
 80019d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019da:	4b0e      	ldr	r3, [pc, #56]	@ (8001a14 <HAL_MspInit+0x44>)
 80019dc:	2101      	movs	r1, #1
 80019de:	430a      	orrs	r2, r1
 80019e0:	641a      	str	r2, [r3, #64]	@ 0x40
 80019e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001a14 <HAL_MspInit+0x44>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e6:	2201      	movs	r2, #1
 80019e8:	4013      	ands	r3, r2
 80019ea:	607b      	str	r3, [r7, #4]
 80019ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ee:	4b09      	ldr	r3, [pc, #36]	@ (8001a14 <HAL_MspInit+0x44>)
 80019f0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80019f2:	4b08      	ldr	r3, [pc, #32]	@ (8001a14 <HAL_MspInit+0x44>)
 80019f4:	2180      	movs	r1, #128	@ 0x80
 80019f6:	0549      	lsls	r1, r1, #21
 80019f8:	430a      	orrs	r2, r1
 80019fa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80019fc:	4b05      	ldr	r3, [pc, #20]	@ (8001a14 <HAL_MspInit+0x44>)
 80019fe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a00:	2380      	movs	r3, #128	@ 0x80
 8001a02:	055b      	lsls	r3, r3, #21
 8001a04:	4013      	ands	r3, r2
 8001a06:	603b      	str	r3, [r7, #0]
 8001a08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a0a:	46c0      	nop			@ (mov r8, r8)
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	b002      	add	sp, #8
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			@ (mov r8, r8)
 8001a14:	40021000 	.word	0x40021000

08001a18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a18:	b590      	push	{r4, r7, lr}
 8001a1a:	b091      	sub	sp, #68	@ 0x44
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	232c      	movs	r3, #44	@ 0x2c
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	0018      	movs	r0, r3
 8001a26:	2314      	movs	r3, #20
 8001a28:	001a      	movs	r2, r3
 8001a2a:	2100      	movs	r1, #0
 8001a2c:	f004 fcce 	bl	80063cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a30:	2410      	movs	r4, #16
 8001a32:	193b      	adds	r3, r7, r4
 8001a34:	0018      	movs	r0, r3
 8001a36:	231c      	movs	r3, #28
 8001a38:	001a      	movs	r2, r3
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	f004 fcc6 	bl	80063cc <memset>
  if(hadc->Instance==ADC1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a36      	ldr	r2, [pc, #216]	@ (8001b20 <HAL_ADC_MspInit+0x108>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d165      	bne.n	8001b16 <HAL_ADC_MspInit+0xfe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001a4a:	193b      	adds	r3, r7, r4
 8001a4c:	2280      	movs	r2, #128	@ 0x80
 8001a4e:	01d2      	lsls	r2, r2, #7
 8001a50:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSIKER;
 8001a52:	193b      	adds	r3, r7, r4
 8001a54:	2280      	movs	r2, #128	@ 0x80
 8001a56:	0612      	lsls	r2, r2, #24
 8001a58:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a5a:	193b      	adds	r3, r7, r4
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	f002 fbd7 	bl	8004210 <HAL_RCCEx_PeriphCLKConfig>
 8001a62:	1e03      	subs	r3, r0, #0
 8001a64:	d001      	beq.n	8001a6a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001a66:	f7ff ff91 	bl	800198c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001a6a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b24 <HAL_ADC_MspInit+0x10c>)
 8001a6c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a6e:	4b2d      	ldr	r3, [pc, #180]	@ (8001b24 <HAL_ADC_MspInit+0x10c>)
 8001a70:	2180      	movs	r1, #128	@ 0x80
 8001a72:	0349      	lsls	r1, r1, #13
 8001a74:	430a      	orrs	r2, r1
 8001a76:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a78:	4b2a      	ldr	r3, [pc, #168]	@ (8001b24 <HAL_ADC_MspInit+0x10c>)
 8001a7a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a7c:	2380      	movs	r3, #128	@ 0x80
 8001a7e:	035b      	lsls	r3, r3, #13
 8001a80:	4013      	ands	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]
 8001a84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a86:	4b27      	ldr	r3, [pc, #156]	@ (8001b24 <HAL_ADC_MspInit+0x10c>)
 8001a88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001a8a:	4b26      	ldr	r3, [pc, #152]	@ (8001b24 <HAL_ADC_MspInit+0x10c>)
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a92:	4b24      	ldr	r3, [pc, #144]	@ (8001b24 <HAL_ADC_MspInit+0x10c>)
 8001a94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a96:	2201      	movs	r2, #1
 8001a98:	4013      	ands	r3, r2
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = AN0_DEG_Pin;
 8001a9e:	212c      	movs	r1, #44	@ 0x2c
 8001aa0:	187b      	adds	r3, r7, r1
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001aa6:	187b      	adds	r3, r7, r1
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aac:	187b      	adds	r3, r7, r1
 8001aae:	2200      	movs	r2, #0
 8001ab0:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AN0_DEG_GPIO_Port, &GPIO_InitStruct);
 8001ab2:	187a      	adds	r2, r7, r1
 8001ab4:	23a0      	movs	r3, #160	@ 0xa0
 8001ab6:	05db      	lsls	r3, r3, #23
 8001ab8:	0011      	movs	r1, r2
 8001aba:	0018      	movs	r0, r3
 8001abc:	f001 feaa 	bl	8003814 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001ac0:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <HAL_ADC_MspInit+0x110>)
 8001ac2:	4a1a      	ldr	r2, [pc, #104]	@ (8001b2c <HAL_ADC_MspInit+0x114>)
 8001ac4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001ac6:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <HAL_ADC_MspInit+0x110>)
 8001ac8:	2205      	movs	r2, #5
 8001aca:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001acc:	4b16      	ldr	r3, [pc, #88]	@ (8001b28 <HAL_ADC_MspInit+0x110>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ad2:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <HAL_ADC_MspInit+0x110>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001ad8:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <HAL_ADC_MspInit+0x110>)
 8001ada:	2280      	movs	r2, #128	@ 0x80
 8001adc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ade:	4b12      	ldr	r3, [pc, #72]	@ (8001b28 <HAL_ADC_MspInit+0x110>)
 8001ae0:	2280      	movs	r2, #128	@ 0x80
 8001ae2:	0052      	lsls	r2, r2, #1
 8001ae4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <HAL_ADC_MspInit+0x110>)
 8001ae8:	2280      	movs	r2, #128	@ 0x80
 8001aea:	00d2      	lsls	r2, r2, #3
 8001aec:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <HAL_ADC_MspInit+0x110>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <HAL_ADC_MspInit+0x110>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001afa:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <HAL_ADC_MspInit+0x110>)
 8001afc:	0018      	movs	r0, r3
 8001afe:	f001 fb59 	bl	80031b4 <HAL_DMA_Init>
 8001b02:	1e03      	subs	r3, r0, #0
 8001b04:	d001      	beq.n	8001b0a <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 8001b06:	f7ff ff41 	bl	800198c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a06      	ldr	r2, [pc, #24]	@ (8001b28 <HAL_ADC_MspInit+0x110>)
 8001b0e:	651a      	str	r2, [r3, #80]	@ 0x50
 8001b10:	4b05      	ldr	r3, [pc, #20]	@ (8001b28 <HAL_ADC_MspInit+0x110>)
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b16:	46c0      	nop			@ (mov r8, r8)
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b011      	add	sp, #68	@ 0x44
 8001b1c:	bd90      	pop	{r4, r7, pc}
 8001b1e:	46c0      	nop			@ (mov r8, r8)
 8001b20:	40012400 	.word	0x40012400
 8001b24:	40021000 	.word	0x40021000
 8001b28:	200000e8 	.word	0x200000e8
 8001b2c:	40020008 	.word	0x40020008

08001b30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b30:	b590      	push	{r4, r7, lr}
 8001b32:	b093      	sub	sp, #76	@ 0x4c
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	2334      	movs	r3, #52	@ 0x34
 8001b3a:	18fb      	adds	r3, r7, r3
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	2314      	movs	r3, #20
 8001b40:	001a      	movs	r2, r3
 8001b42:	2100      	movs	r1, #0
 8001b44:	f004 fc42 	bl	80063cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b48:	2418      	movs	r4, #24
 8001b4a:	193b      	adds	r3, r7, r4
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	231c      	movs	r3, #28
 8001b50:	001a      	movs	r2, r3
 8001b52:	2100      	movs	r1, #0
 8001b54:	f004 fc3a 	bl	80063cc <memset>
  if(huart->Instance==USART1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a45      	ldr	r2, [pc, #276]	@ (8001c74 <HAL_UART_MspInit+0x144>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d146      	bne.n	8001bf0 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b62:	193b      	adds	r3, r7, r4
 8001b64:	2201      	movs	r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001b68:	193b      	adds	r3, r7, r4
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b6e:	193b      	adds	r3, r7, r4
 8001b70:	0018      	movs	r0, r3
 8001b72:	f002 fb4d 	bl	8004210 <HAL_RCCEx_PeriphCLKConfig>
 8001b76:	1e03      	subs	r3, r0, #0
 8001b78:	d001      	beq.n	8001b7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001b7a:	f7ff ff07 	bl	800198c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b7e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c78 <HAL_UART_MspInit+0x148>)
 8001b80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b82:	4b3d      	ldr	r3, [pc, #244]	@ (8001c78 <HAL_UART_MspInit+0x148>)
 8001b84:	2180      	movs	r1, #128	@ 0x80
 8001b86:	01c9      	lsls	r1, r1, #7
 8001b88:	430a      	orrs	r2, r1
 8001b8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001b8c:	4b3a      	ldr	r3, [pc, #232]	@ (8001c78 <HAL_UART_MspInit+0x148>)
 8001b8e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b90:	2380      	movs	r3, #128	@ 0x80
 8001b92:	01db      	lsls	r3, r3, #7
 8001b94:	4013      	ands	r3, r2
 8001b96:	617b      	str	r3, [r7, #20]
 8001b98:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b9a:	4b37      	ldr	r3, [pc, #220]	@ (8001c78 <HAL_UART_MspInit+0x148>)
 8001b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001b9e:	4b36      	ldr	r3, [pc, #216]	@ (8001c78 <HAL_UART_MspInit+0x148>)
 8001ba0:	2102      	movs	r1, #2
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ba6:	4b34      	ldr	r3, [pc, #208]	@ (8001c78 <HAL_UART_MspInit+0x148>)
 8001ba8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001baa:	2202      	movs	r2, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = U1_TX_485_Pin|U1_RX_485_Pin;
 8001bb2:	2134      	movs	r1, #52	@ 0x34
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	22c0      	movs	r2, #192	@ 0xc0
 8001bb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	4a29      	ldr	r2, [pc, #164]	@ (8001c7c <HAL_UART_MspInit+0x14c>)
 8001bd6:	0019      	movs	r1, r3
 8001bd8:	0010      	movs	r0, r2
 8001bda:	f001 fe1b 	bl	8003814 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	201b      	movs	r0, #27
 8001be4:	f001 fab4 	bl	8003150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001be8:	201b      	movs	r0, #27
 8001bea:	f001 fac6 	bl	800317a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bee:	e03d      	b.n	8001c6c <HAL_UART_MspInit+0x13c>
  else if(huart->Instance==USART2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a22      	ldr	r2, [pc, #136]	@ (8001c80 <HAL_UART_MspInit+0x150>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d138      	bne.n	8001c6c <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001c78 <HAL_UART_MspInit+0x148>)
 8001bfc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001bfe:	4b1e      	ldr	r3, [pc, #120]	@ (8001c78 <HAL_UART_MspInit+0x148>)
 8001c00:	2180      	movs	r1, #128	@ 0x80
 8001c02:	0289      	lsls	r1, r1, #10
 8001c04:	430a      	orrs	r2, r1
 8001c06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c08:	4b1b      	ldr	r3, [pc, #108]	@ (8001c78 <HAL_UART_MspInit+0x148>)
 8001c0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c0c:	2380      	movs	r3, #128	@ 0x80
 8001c0e:	029b      	lsls	r3, r3, #10
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]
 8001c14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c16:	4b18      	ldr	r3, [pc, #96]	@ (8001c78 <HAL_UART_MspInit+0x148>)
 8001c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c1a:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <HAL_UART_MspInit+0x148>)
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c22:	4b15      	ldr	r3, [pc, #84]	@ (8001c78 <HAL_UART_MspInit+0x148>)
 8001c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c26:	2201      	movs	r2, #1
 8001c28:	4013      	ands	r3, r2
 8001c2a:	60bb      	str	r3, [r7, #8]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = U2_TX_Pin|U2_RX_Pin;
 8001c2e:	2134      	movs	r1, #52	@ 0x34
 8001c30:	187b      	adds	r3, r7, r1
 8001c32:	220c      	movs	r2, #12
 8001c34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	187b      	adds	r3, r7, r1
 8001c38:	2202      	movs	r2, #2
 8001c3a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	187b      	adds	r3, r7, r1
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	187b      	adds	r3, r7, r1
 8001c44:	2200      	movs	r2, #0
 8001c46:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001c48:	187b      	adds	r3, r7, r1
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4e:	187a      	adds	r2, r7, r1
 8001c50:	23a0      	movs	r3, #160	@ 0xa0
 8001c52:	05db      	lsls	r3, r3, #23
 8001c54:	0011      	movs	r1, r2
 8001c56:	0018      	movs	r0, r3
 8001c58:	f001 fddc 	bl	8003814 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	2100      	movs	r1, #0
 8001c60:	201c      	movs	r0, #28
 8001c62:	f001 fa75 	bl	8003150 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c66:	201c      	movs	r0, #28
 8001c68:	f001 fa87 	bl	800317a <HAL_NVIC_EnableIRQ>
}
 8001c6c:	46c0      	nop			@ (mov r8, r8)
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	b013      	add	sp, #76	@ 0x4c
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	40013800 	.word	0x40013800
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	50000400 	.word	0x50000400
 8001c80:	40004400 	.word	0x40004400

08001c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c88:	46c0      	nop			@ (mov r8, r8)
 8001c8a:	e7fd      	b.n	8001c88 <NMI_Handler+0x4>

08001c8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c90:	46c0      	nop			@ (mov r8, r8)
 8001c92:	e7fd      	b.n	8001c90 <HardFault_Handler+0x4>

08001c94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001c98:	46c0      	nop			@ (mov r8, r8)
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cac:	f000 f8f4 	bl	8001e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cb0:	46c0      	nop			@ (mov r8, r8)
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
	...

08001cb8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001cbc:	4b03      	ldr	r3, [pc, #12]	@ (8001ccc <DMA1_Channel1_IRQHandler+0x14>)
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f001 fc66 	bl	8003590 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001cc4:	46c0      	nop			@ (mov r8, r8)
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	46c0      	nop			@ (mov r8, r8)
 8001ccc:	200000e8 	.word	0x200000e8

08001cd0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001cd4:	4b03      	ldr	r3, [pc, #12]	@ (8001ce4 <USART1_IRQHandler+0x14>)
 8001cd6:	0018      	movs	r0, r3
 8001cd8:	f002 fcda 	bl	8004690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001cdc:	46c0      	nop			@ (mov r8, r8)
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	46c0      	nop			@ (mov r8, r8)
 8001ce4:	20000144 	.word	0x20000144

08001ce8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cec:	4b03      	ldr	r3, [pc, #12]	@ (8001cfc <USART2_IRQHandler+0x14>)
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f002 fcce 	bl	8004690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cf4:	46c0      	nop			@ (mov r8, r8)
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	46c0      	nop			@ (mov r8, r8)
 8001cfc:	200001d8 	.word	0x200001d8

08001d00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d08:	4a14      	ldr	r2, [pc, #80]	@ (8001d5c <_sbrk+0x5c>)
 8001d0a:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <_sbrk+0x60>)
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d14:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <_sbrk+0x64>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d102      	bne.n	8001d22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d1c:	4b11      	ldr	r3, [pc, #68]	@ (8001d64 <_sbrk+0x64>)
 8001d1e:	4a12      	ldr	r2, [pc, #72]	@ (8001d68 <_sbrk+0x68>)
 8001d20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d22:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <_sbrk+0x64>)
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	18d3      	adds	r3, r2, r3
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d207      	bcs.n	8001d40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d30:	f004 fb54 	bl	80063dc <__errno>
 8001d34:	0003      	movs	r3, r0
 8001d36:	220c      	movs	r2, #12
 8001d38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	425b      	negs	r3, r3
 8001d3e:	e009      	b.n	8001d54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <_sbrk+0x64>)
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d46:	4b07      	ldr	r3, [pc, #28]	@ (8001d64 <_sbrk+0x64>)
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	18d2      	adds	r2, r2, r3
 8001d4e:	4b05      	ldr	r3, [pc, #20]	@ (8001d64 <_sbrk+0x64>)
 8001d50:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001d52:	68fb      	ldr	r3, [r7, #12]
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b006      	add	sp, #24
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20003000 	.word	0x20003000
 8001d60:	00000400 	.word	0x00000400
 8001d64:	20000584 	.word	0x20000584
 8001d68:	200006d8 	.word	0x200006d8

08001d6c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d70:	4b03      	ldr	r3, [pc, #12]	@ (8001d80 <SystemInit+0x14>)
 8001d72:	2280      	movs	r2, #128	@ 0x80
 8001d74:	0512      	lsls	r2, r2, #20
 8001d76:	609a      	str	r2, [r3, #8]
#endif
}
 8001d78:	46c0      	nop			@ (mov r8, r8)
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	46c0      	nop			@ (mov r8, r8)
 8001d80:	e000ed00 	.word	0xe000ed00

08001d84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001d84:	480d      	ldr	r0, [pc, #52]	@ (8001dbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001d86:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d88:	f7ff fff0 	bl	8001d6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001d8c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001d8e:	e003      	b.n	8001d98 <LoopCopyDataInit>

08001d90 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001d90:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc0 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001d92:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001d94:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001d96:	3104      	adds	r1, #4

08001d98 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001d98:	480a      	ldr	r0, [pc, #40]	@ (8001dc4 <LoopForever+0xa>)
  ldr r3, =_edata
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <LoopForever+0xe>)
  adds r2, r0, r1
 8001d9c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001d9e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001da0:	d3f6      	bcc.n	8001d90 <CopyDataInit>
  ldr r2, =_sbss
 8001da2:	4a0a      	ldr	r2, [pc, #40]	@ (8001dcc <LoopForever+0x12>)
  b LoopFillZerobss
 8001da4:	e002      	b.n	8001dac <LoopFillZerobss>

08001da6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  str  r3, [r2]
 8001da8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001daa:	3204      	adds	r2, #4

08001dac <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001dac:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <LoopForever+0x16>)
  cmp r2, r3
 8001dae:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001db0:	d3f9      	bcc.n	8001da6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001db2:	f004 fb19 	bl	80063e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001db6:	f7fe fb2f 	bl	8000418 <main>

08001dba <LoopForever>:

LoopForever:
    b LoopForever
 8001dba:	e7fe      	b.n	8001dba <LoopForever>
  ldr   r0, =_estack
 8001dbc:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001dc0:	08006f24 	.word	0x08006f24
  ldr r0, =_sdata
 8001dc4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001dc8:	20000068 	.word	0x20000068
  ldr r2, =_sbss
 8001dcc:	20000068 	.word	0x20000068
  ldr r3, = _ebss
 8001dd0:	200006d4 	.word	0x200006d4

08001dd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001dd4:	e7fe      	b.n	8001dd4 <ADC1_IRQHandler>

08001dd6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dd6:	b580      	push	{r7, lr}
 8001dd8:	b082      	sub	sp, #8
 8001dda:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ddc:	1dfb      	adds	r3, r7, #7
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001de2:	2003      	movs	r0, #3
 8001de4:	f000 f80e 	bl	8001e04 <HAL_InitTick>
 8001de8:	1e03      	subs	r3, r0, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001dec:	1dfb      	adds	r3, r7, #7
 8001dee:	2201      	movs	r2, #1
 8001df0:	701a      	strb	r2, [r3, #0]
 8001df2:	e001      	b.n	8001df8 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001df4:	f7ff fdec 	bl	80019d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001df8:	1dfb      	adds	r3, r7, #7
 8001dfa:	781b      	ldrb	r3, [r3, #0]
}
 8001dfc:	0018      	movs	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	b002      	add	sp, #8
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e04:	b590      	push	{r4, r7, lr}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	18fb      	adds	r3, r7, r3
 8001e10:	2200      	movs	r2, #0
 8001e12:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001e14:	4b1d      	ldr	r3, [pc, #116]	@ (8001e8c <HAL_InitTick+0x88>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d02b      	beq.n	8001e74 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001e1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001e90 <HAL_InitTick+0x8c>)
 8001e1e:	681c      	ldr	r4, [r3, #0]
 8001e20:	4b1a      	ldr	r3, [pc, #104]	@ (8001e8c <HAL_InitTick+0x88>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	0019      	movs	r1, r3
 8001e26:	23fa      	movs	r3, #250	@ 0xfa
 8001e28:	0098      	lsls	r0, r3, #2
 8001e2a:	f7fe f97f 	bl	800012c <__udivsi3>
 8001e2e:	0003      	movs	r3, r0
 8001e30:	0019      	movs	r1, r3
 8001e32:	0020      	movs	r0, r4
 8001e34:	f7fe f97a 	bl	800012c <__udivsi3>
 8001e38:	0003      	movs	r3, r0
 8001e3a:	0018      	movs	r0, r3
 8001e3c:	f001 f9ad 	bl	800319a <HAL_SYSTICK_Config>
 8001e40:	1e03      	subs	r3, r0, #0
 8001e42:	d112      	bne.n	8001e6a <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d80a      	bhi.n	8001e60 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	425b      	negs	r3, r3
 8001e50:	2200      	movs	r2, #0
 8001e52:	0018      	movs	r0, r3
 8001e54:	f001 f97c 	bl	8003150 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e58:	4b0e      	ldr	r3, [pc, #56]	@ (8001e94 <HAL_InitTick+0x90>)
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	e00d      	b.n	8001e7c <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001e60:	230f      	movs	r3, #15
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	2201      	movs	r2, #1
 8001e66:	701a      	strb	r2, [r3, #0]
 8001e68:	e008      	b.n	8001e7c <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e6a:	230f      	movs	r3, #15
 8001e6c:	18fb      	adds	r3, r7, r3
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
 8001e72:	e003      	b.n	8001e7c <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e74:	230f      	movs	r3, #15
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	2201      	movs	r2, #1
 8001e7a:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001e7c:	230f      	movs	r3, #15
 8001e7e:	18fb      	adds	r3, r7, r3
 8001e80:	781b      	ldrb	r3, [r3, #0]
}
 8001e82:	0018      	movs	r0, r3
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b005      	add	sp, #20
 8001e88:	bd90      	pop	{r4, r7, pc}
 8001e8a:	46c0      	nop			@ (mov r8, r8)
 8001e8c:	20000014 	.word	0x20000014
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	20000010 	.word	0x20000010

08001e98 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	@ (8001eb4 <HAL_IncTick+0x1c>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	001a      	movs	r2, r3
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_IncTick+0x20>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	18d2      	adds	r2, r2, r3
 8001ea8:	4b03      	ldr	r3, [pc, #12]	@ (8001eb8 <HAL_IncTick+0x20>)
 8001eaa:	601a      	str	r2, [r3, #0]
}
 8001eac:	46c0      	nop			@ (mov r8, r8)
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	46c0      	nop			@ (mov r8, r8)
 8001eb4:	20000014 	.word	0x20000014
 8001eb8:	20000588 	.word	0x20000588

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b02      	ldr	r3, [pc, #8]	@ (8001ecc <HAL_GetTick+0x10>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	46c0      	nop			@ (mov r8, r8)
 8001ecc:	20000588 	.word	0x20000588

08001ed0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b084      	sub	sp, #16
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed8:	f7ff fff0 	bl	8001ebc <HAL_GetTick>
 8001edc:	0003      	movs	r3, r0
 8001ede:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	3301      	adds	r3, #1
 8001ee8:	d005      	beq.n	8001ef6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_Delay+0x44>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	001a      	movs	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	189b      	adds	r3, r3, r2
 8001ef4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ef6:	46c0      	nop			@ (mov r8, r8)
 8001ef8:	f7ff ffe0 	bl	8001ebc <HAL_GetTick>
 8001efc:	0002      	movs	r2, r0
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	1ad3      	subs	r3, r2, r3
 8001f02:	68fa      	ldr	r2, [r7, #12]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d8f7      	bhi.n	8001ef8 <HAL_Delay+0x28>
  {
  }
}
 8001f08:	46c0      	nop			@ (mov r8, r8)
 8001f0a:	46c0      	nop			@ (mov r8, r8)
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	b004      	add	sp, #16
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	20000014 	.word	0x20000014

08001f18 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b082      	sub	sp, #8
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a05      	ldr	r2, [pc, #20]	@ (8001f3c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001f28:	401a      	ands	r2, r3
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	601a      	str	r2, [r3, #0]
}
 8001f32:	46c0      	nop			@ (mov r8, r8)
 8001f34:	46bd      	mov	sp, r7
 8001f36:	b002      	add	sp, #8
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	46c0      	nop			@ (mov r8, r8)
 8001f3c:	ff3fffff 	.word	0xff3fffff

08001f40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	23c0      	movs	r3, #192	@ 0xc0
 8001f4e:	041b      	lsls	r3, r3, #16
 8001f50:	4013      	ands	r3, r2
}
 8001f52:	0018      	movs	r0, r3
 8001f54:	46bd      	mov	sp, r7
 8001f56:	b002      	add	sp, #8
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b084      	sub	sp, #16
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	60f8      	str	r0, [r7, #12]
 8001f62:	60b9      	str	r1, [r7, #8]
 8001f64:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	695b      	ldr	r3, [r3, #20]
 8001f6a:	68ba      	ldr	r2, [r7, #8]
 8001f6c:	2104      	movs	r1, #4
 8001f6e:	400a      	ands	r2, r1
 8001f70:	2107      	movs	r1, #7
 8001f72:	4091      	lsls	r1, r2
 8001f74:	000a      	movs	r2, r1
 8001f76:	43d2      	mvns	r2, r2
 8001f78:	401a      	ands	r2, r3
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	400b      	ands	r3, r1
 8001f80:	6879      	ldr	r1, [r7, #4]
 8001f82:	4099      	lsls	r1, r3
 8001f84:	000b      	movs	r3, r1
 8001f86:	431a      	orrs	r2, r3
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001f8c:	46c0      	nop			@ (mov r8, r8)
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	b004      	add	sp, #16
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	695b      	ldr	r3, [r3, #20]
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	2104      	movs	r1, #4
 8001fa6:	400a      	ands	r2, r1
 8001fa8:	2107      	movs	r1, #7
 8001faa:	4091      	lsls	r1, r2
 8001fac:	000a      	movs	r2, r1
 8001fae:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001fb6:	40da      	lsrs	r2, r3
 8001fb8:	0013      	movs	r3, r2
}
 8001fba:	0018      	movs	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	b002      	add	sp, #8
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b082      	sub	sp, #8
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68da      	ldr	r2, [r3, #12]
 8001fce:	23c0      	movs	r3, #192	@ 0xc0
 8001fd0:	011b      	lsls	r3, r3, #4
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d101      	bne.n	8001fda <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	60f8      	str	r0, [r7, #12]
 8001fec:	60b9      	str	r1, [r7, #8]
 8001fee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	211f      	movs	r1, #31
 8001ff8:	400a      	ands	r2, r1
 8001ffa:	210f      	movs	r1, #15
 8001ffc:	4091      	lsls	r1, r2
 8001ffe:	000a      	movs	r2, r1
 8002000:	43d2      	mvns	r2, r2
 8002002:	401a      	ands	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	0e9b      	lsrs	r3, r3, #26
 8002008:	210f      	movs	r1, #15
 800200a:	4019      	ands	r1, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	201f      	movs	r0, #31
 8002010:	4003      	ands	r3, r0
 8002012:	4099      	lsls	r1, r3
 8002014:	000b      	movs	r3, r1
 8002016:	431a      	orrs	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800201c:	46c0      	nop			@ (mov r8, r8)
 800201e:	46bd      	mov	sp, r7
 8002020:	b004      	add	sp, #16
 8002022:	bd80      	pop	{r7, pc}

08002024 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	025b      	lsls	r3, r3, #9
 8002036:	0a5b      	lsrs	r3, r3, #9
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800203e:	46c0      	nop			@ (mov r8, r8)
 8002040:	46bd      	mov	sp, r7
 8002042:	b002      	add	sp, #8
 8002044:	bd80      	pop	{r7, pc}

08002046 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002046:	b580      	push	{r7, lr}
 8002048:	b082      	sub	sp, #8
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002054:	683a      	ldr	r2, [r7, #0]
 8002056:	0252      	lsls	r2, r2, #9
 8002058:	0a52      	lsrs	r2, r2, #9
 800205a:	43d2      	mvns	r2, r2
 800205c:	401a      	ands	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002062:	46c0      	nop			@ (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b002      	add	sp, #8
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	60f8      	str	r0, [r7, #12]
 8002074:	60b9      	str	r1, [r7, #8]
 8002076:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	68ba      	ldr	r2, [r7, #8]
 800207e:	0212      	lsls	r2, r2, #8
 8002080:	43d2      	mvns	r2, r2
 8002082:	401a      	ands	r2, r3
 8002084:	68bb      	ldr	r3, [r7, #8]
 8002086:	021b      	lsls	r3, r3, #8
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	400b      	ands	r3, r1
 800208c:	4904      	ldr	r1, [pc, #16]	@ (80020a0 <LL_ADC_SetChannelSamplingTime+0x34>)
 800208e:	400b      	ands	r3, r1
 8002090:	431a      	orrs	r2, r3
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002096:	46c0      	nop			@ (mov r8, r8)
 8002098:	46bd      	mov	sp, r7
 800209a:	b004      	add	sp, #16
 800209c:	bd80      	pop	{r7, pc}
 800209e:	46c0      	nop			@ (mov r8, r8)
 80020a0:	7fffff00 	.word	0x7fffff00

080020a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b082      	sub	sp, #8
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80020b2:	4013      	ands	r3, r2
 80020b4:	2280      	movs	r2, #128	@ 0x80
 80020b6:	0552      	lsls	r2, r2, #21
 80020b8:	431a      	orrs	r2, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020be:	46c0      	nop			@ (mov r8, r8)
 80020c0:	46bd      	mov	sp, r7
 80020c2:	b002      	add	sp, #8
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	46c0      	nop			@ (mov r8, r8)
 80020c8:	6fffffe8 	.word	0x6fffffe8

080020cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	2380      	movs	r3, #128	@ 0x80
 80020da:	055b      	lsls	r3, r3, #21
 80020dc:	401a      	ands	r2, r3
 80020de:	2380      	movs	r3, #128	@ 0x80
 80020e0:	055b      	lsls	r3, r3, #21
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d101      	bne.n	80020ea <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80020e6:	2301      	movs	r3, #1
 80020e8:	e000      	b.n	80020ec <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	0018      	movs	r0, r3
 80020ee:	46bd      	mov	sp, r7
 80020f0:	b002      	add	sp, #8
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4a04      	ldr	r2, [pc, #16]	@ (8002114 <LL_ADC_Enable+0x20>)
 8002102:	4013      	ands	r3, r2
 8002104:	2201      	movs	r2, #1
 8002106:	431a      	orrs	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800210c:	46c0      	nop			@ (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	b002      	add	sp, #8
 8002112:	bd80      	pop	{r7, pc}
 8002114:	7fffffe8 	.word	0x7fffffe8

08002118 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	4a04      	ldr	r2, [pc, #16]	@ (8002138 <LL_ADC_Disable+0x20>)
 8002126:	4013      	ands	r3, r2
 8002128:	2202      	movs	r2, #2
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002130:	46c0      	nop			@ (mov r8, r8)
 8002132:	46bd      	mov	sp, r7
 8002134:	b002      	add	sp, #8
 8002136:	bd80      	pop	{r7, pc}
 8002138:	7fffffe8 	.word	0x7fffffe8

0800213c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	2201      	movs	r2, #1
 800214a:	4013      	ands	r3, r2
 800214c:	2b01      	cmp	r3, #1
 800214e:	d101      	bne.n	8002154 <LL_ADC_IsEnabled+0x18>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <LL_ADC_IsEnabled+0x1a>
 8002154:	2300      	movs	r3, #0
}
 8002156:	0018      	movs	r0, r3
 8002158:	46bd      	mov	sp, r7
 800215a:	b002      	add	sp, #8
 800215c:	bd80      	pop	{r7, pc}

0800215e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800215e:	b580      	push	{r7, lr}
 8002160:	b082      	sub	sp, #8
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	2202      	movs	r2, #2
 800216c:	4013      	ands	r3, r2
 800216e:	2b02      	cmp	r3, #2
 8002170:	d101      	bne.n	8002176 <LL_ADC_IsDisableOngoing+0x18>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <LL_ADC_IsDisableOngoing+0x1a>
 8002176:	2300      	movs	r3, #0
}
 8002178:	0018      	movs	r0, r3
 800217a:	46bd      	mov	sp, r7
 800217c:	b002      	add	sp, #8
 800217e:	bd80      	pop	{r7, pc}

08002180 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4a04      	ldr	r2, [pc, #16]	@ (80021a0 <LL_ADC_REG_StartConversion+0x20>)
 800218e:	4013      	ands	r3, r2
 8002190:	2204      	movs	r2, #4
 8002192:	431a      	orrs	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002198:	46c0      	nop			@ (mov r8, r8)
 800219a:	46bd      	mov	sp, r7
 800219c:	b002      	add	sp, #8
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	7fffffe8 	.word	0x7fffffe8

080021a4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	2204      	movs	r2, #4
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b04      	cmp	r3, #4
 80021b6:	d101      	bne.n	80021bc <LL_ADC_REG_IsConversionOngoing+0x18>
 80021b8:	2301      	movs	r3, #1
 80021ba:	e000      	b.n	80021be <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021bc:	2300      	movs	r3, #0
}
 80021be:	0018      	movs	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	b002      	add	sp, #8
 80021c4:	bd80      	pop	{r7, pc}
	...

080021c8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021d0:	231f      	movs	r3, #31
 80021d2:	18fb      	adds	r3, r7, r3
 80021d4:	2200      	movs	r2, #0
 80021d6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 80021d8:	2300      	movs	r3, #0
 80021da:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 80021dc:	2300      	movs	r3, #0
 80021de:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e17e      	b.n	80024ec <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d10a      	bne.n	800220c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	0018      	movs	r0, r3
 80021fa:	f7ff fc0d 	bl	8001a18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2254      	movs	r2, #84	@ 0x54
 8002208:	2100      	movs	r1, #0
 800220a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	0018      	movs	r0, r3
 8002212:	f7ff ff5b 	bl	80020cc <LL_ADC_IsInternalRegulatorEnabled>
 8002216:	1e03      	subs	r3, r0, #0
 8002218:	d114      	bne.n	8002244 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	0018      	movs	r0, r3
 8002220:	f7ff ff40 	bl	80020a4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002224:	4bb3      	ldr	r3, [pc, #716]	@ (80024f4 <HAL_ADC_Init+0x32c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	49b3      	ldr	r1, [pc, #716]	@ (80024f8 <HAL_ADC_Init+0x330>)
 800222a:	0018      	movs	r0, r3
 800222c:	f7fd ff7e 	bl	800012c <__udivsi3>
 8002230:	0003      	movs	r3, r0
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002236:	e002      	b.n	800223e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	3b01      	subs	r3, #1
 800223c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1f9      	bne.n	8002238 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0018      	movs	r0, r3
 800224a:	f7ff ff3f 	bl	80020cc <LL_ADC_IsInternalRegulatorEnabled>
 800224e:	1e03      	subs	r3, r0, #0
 8002250:	d10f      	bne.n	8002272 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002256:	2210      	movs	r2, #16
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002262:	2201      	movs	r2, #1
 8002264:	431a      	orrs	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800226a:	231f      	movs	r3, #31
 800226c:	18fb      	adds	r3, r7, r3
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	0018      	movs	r0, r3
 8002278:	f7ff ff94 	bl	80021a4 <LL_ADC_REG_IsConversionOngoing>
 800227c:	0003      	movs	r3, r0
 800227e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002284:	2210      	movs	r2, #16
 8002286:	4013      	ands	r3, r2
 8002288:	d000      	beq.n	800228c <HAL_ADC_Init+0xc4>
 800228a:	e122      	b.n	80024d2 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d000      	beq.n	8002294 <HAL_ADC_Init+0xcc>
 8002292:	e11e      	b.n	80024d2 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002298:	4a98      	ldr	r2, [pc, #608]	@ (80024fc <HAL_ADC_Init+0x334>)
 800229a:	4013      	ands	r3, r2
 800229c:	2202      	movs	r2, #2
 800229e:	431a      	orrs	r2, r3
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	0018      	movs	r0, r3
 80022aa:	f7ff ff47 	bl	800213c <LL_ADC_IsEnabled>
 80022ae:	1e03      	subs	r3, r0, #0
 80022b0:	d000      	beq.n	80022b4 <HAL_ADC_Init+0xec>
 80022b2:	e0ad      	b.n	8002410 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	7e1b      	ldrb	r3, [r3, #24]
 80022bc:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80022be:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	7e5b      	ldrb	r3, [r3, #25]
 80022c4:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80022c6:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7e9b      	ldrb	r3, [r3, #26]
 80022cc:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80022ce:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d002      	beq.n	80022de <HAL_ADC_Init+0x116>
 80022d8:	2380      	movs	r3, #128	@ 0x80
 80022da:	015b      	lsls	r3, r3, #5
 80022dc:	e000      	b.n	80022e0 <HAL_ADC_Init+0x118>
 80022de:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80022e0:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80022e6:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	da04      	bge.n	80022fa <HAL_ADC_Init+0x132>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	005b      	lsls	r3, r3, #1
 80022f6:	085b      	lsrs	r3, r3, #1
 80022f8:	e001      	b.n	80022fe <HAL_ADC_Init+0x136>
 80022fa:	2380      	movs	r3, #128	@ 0x80
 80022fc:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80022fe:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	212c      	movs	r1, #44	@ 0x2c
 8002304:	5c5b      	ldrb	r3, [r3, r1]
 8002306:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002308:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	4313      	orrs	r3, r2
 800230e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	5c9b      	ldrb	r3, [r3, r2]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d115      	bne.n	8002346 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	7e9b      	ldrb	r3, [r3, #26]
 800231e:	2b00      	cmp	r3, #0
 8002320:	d105      	bne.n	800232e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002322:	69bb      	ldr	r3, [r7, #24]
 8002324:	2280      	movs	r2, #128	@ 0x80
 8002326:	0252      	lsls	r2, r2, #9
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
 800232c:	e00b      	b.n	8002346 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002332:	2220      	movs	r2, #32
 8002334:	431a      	orrs	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233e:	2201      	movs	r2, #1
 8002340:	431a      	orrs	r2, r3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00a      	beq.n	8002364 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002352:	23e0      	movs	r3, #224	@ 0xe0
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800235c:	4313      	orrs	r3, r2
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4313      	orrs	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	4a65      	ldr	r2, [pc, #404]	@ (8002500 <HAL_ADC_Init+0x338>)
 800236c:	4013      	ands	r3, r2
 800236e:	0019      	movs	r1, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	430a      	orrs	r2, r1
 8002378:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	0f9b      	lsrs	r3, r3, #30
 8002380:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002386:	4313      	orrs	r3, r2
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	223c      	movs	r2, #60	@ 0x3c
 8002392:	5c9b      	ldrb	r3, [r3, r2]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d111      	bne.n	80023bc <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	0f9b      	lsrs	r3, r3, #30
 800239e:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80023a4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 80023aa:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80023b0:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	2201      	movs	r2, #1
 80023b8:	4313      	orrs	r3, r2
 80023ba:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	4a50      	ldr	r2, [pc, #320]	@ (8002504 <HAL_ADC_Init+0x33c>)
 80023c4:	4013      	ands	r3, r2
 80023c6:	0019      	movs	r1, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	697a      	ldr	r2, [r7, #20]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685a      	ldr	r2, [r3, #4]
 80023d6:	23c0      	movs	r3, #192	@ 0xc0
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	429a      	cmp	r2, r3
 80023dc:	d018      	beq.n	8002410 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80023e2:	2380      	movs	r3, #128	@ 0x80
 80023e4:	05db      	lsls	r3, r3, #23
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d012      	beq.n	8002410 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80023ee:	2380      	movs	r3, #128	@ 0x80
 80023f0:	061b      	lsls	r3, r3, #24
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d00c      	beq.n	8002410 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 80023f6:	4b44      	ldr	r3, [pc, #272]	@ (8002508 <HAL_ADC_Init+0x340>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a44      	ldr	r2, [pc, #272]	@ (800250c <HAL_ADC_Init+0x344>)
 80023fc:	4013      	ands	r3, r2
 80023fe:	0019      	movs	r1, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685a      	ldr	r2, [r3, #4]
 8002404:	23f0      	movs	r3, #240	@ 0xf0
 8002406:	039b      	lsls	r3, r3, #14
 8002408:	401a      	ands	r2, r3
 800240a:	4b3f      	ldr	r3, [pc, #252]	@ (8002508 <HAL_ADC_Init+0x340>)
 800240c:	430a      	orrs	r2, r1
 800240e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	6818      	ldr	r0, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002418:	001a      	movs	r2, r3
 800241a:	2100      	movs	r1, #0
 800241c:	f7ff fd9d 	bl	8001f5a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6818      	ldr	r0, [r3, #0]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002428:	4939      	ldr	r1, [pc, #228]	@ (8002510 <HAL_ADC_Init+0x348>)
 800242a:	001a      	movs	r2, r3
 800242c:	f7ff fd95 	bl	8001f5a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d109      	bne.n	800244c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2110      	movs	r1, #16
 8002444:	4249      	negs	r1, r1
 8002446:	430a      	orrs	r2, r1
 8002448:	629a      	str	r2, [r3, #40]	@ 0x28
 800244a:	e018      	b.n	800247e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691a      	ldr	r2, [r3, #16]
 8002450:	2380      	movs	r3, #128	@ 0x80
 8002452:	039b      	lsls	r3, r3, #14
 8002454:	429a      	cmp	r2, r3
 8002456:	d112      	bne.n	800247e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	69db      	ldr	r3, [r3, #28]
 8002462:	3b01      	subs	r3, #1
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	221c      	movs	r2, #28
 8002468:	4013      	ands	r3, r2
 800246a:	2210      	movs	r2, #16
 800246c:	4252      	negs	r2, r2
 800246e:	409a      	lsls	r2, r3
 8002470:	0011      	movs	r1, r2
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2100      	movs	r1, #0
 8002484:	0018      	movs	r0, r3
 8002486:	f7ff fd85 	bl	8001f94 <LL_ADC_GetSamplingTimeCommonChannels>
 800248a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002490:	429a      	cmp	r2, r3
 8002492:	d10b      	bne.n	80024ac <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	2200      	movs	r2, #0
 8002498:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	2203      	movs	r2, #3
 80024a0:	4393      	bics	r3, r2
 80024a2:	2201      	movs	r2, #1
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024aa:	e01c      	b.n	80024e6 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b0:	2212      	movs	r2, #18
 80024b2:	4393      	bics	r3, r2
 80024b4:	2210      	movs	r2, #16
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024c0:	2201      	movs	r2, #1
 80024c2:	431a      	orrs	r2, r3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 80024c8:	231f      	movs	r3, #31
 80024ca:	18fb      	adds	r3, r7, r3
 80024cc:	2201      	movs	r2, #1
 80024ce:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80024d0:	e009      	b.n	80024e6 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024d6:	2210      	movs	r2, #16
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80024de:	231f      	movs	r3, #31
 80024e0:	18fb      	adds	r3, r7, r3
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 80024e6:	231f      	movs	r3, #31
 80024e8:	18fb      	adds	r3, r7, r3
 80024ea:	781b      	ldrb	r3, [r3, #0]
}
 80024ec:	0018      	movs	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	b008      	add	sp, #32
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	2000000c 	.word	0x2000000c
 80024f8:	00030d40 	.word	0x00030d40
 80024fc:	fffffefd 	.word	0xfffffefd
 8002500:	ffde0201 	.word	0xffde0201
 8002504:	1ffffc02 	.word	0x1ffffc02
 8002508:	40012708 	.word	0x40012708
 800250c:	ffc3ffff 	.word	0xffc3ffff
 8002510:	7fffff04 	.word	0x7fffff04

08002514 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002514:	b5b0      	push	{r4, r5, r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	0018      	movs	r0, r3
 8002526:	f7ff fe3d 	bl	80021a4 <LL_ADC_REG_IsConversionOngoing>
 800252a:	1e03      	subs	r3, r0, #0
 800252c:	d16c      	bne.n	8002608 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2254      	movs	r2, #84	@ 0x54
 8002532:	5c9b      	ldrb	r3, [r3, r2]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_ADC_Start_DMA+0x28>
 8002538:	2302      	movs	r3, #2
 800253a:	e06c      	b.n	8002616 <HAL_ADC_Start_DMA+0x102>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2254      	movs	r2, #84	@ 0x54
 8002540:	2101      	movs	r1, #1
 8002542:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	2201      	movs	r2, #1
 800254c:	4013      	ands	r3, r2
 800254e:	d113      	bne.n	8002578 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff fdf1 	bl	800213c <LL_ADC_IsEnabled>
 800255a:	1e03      	subs	r3, r0, #0
 800255c:	d004      	beq.n	8002568 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	0018      	movs	r0, r3
 8002564:	f7ff fdd8 	bl	8002118 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2101      	movs	r1, #1
 8002574:	430a      	orrs	r2, r1
 8002576:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002578:	2517      	movs	r5, #23
 800257a:	197c      	adds	r4, r7, r5
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	0018      	movs	r0, r3
 8002580:	f000 fa44 	bl	8002a0c <ADC_Enable>
 8002584:	0003      	movs	r3, r0
 8002586:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002588:	002c      	movs	r4, r5
 800258a:	193b      	adds	r3, r7, r4
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d13e      	bne.n	8002610 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002596:	4a22      	ldr	r2, [pc, #136]	@ (8002620 <HAL_ADC_Start_DMA+0x10c>)
 8002598:	4013      	ands	r3, r2
 800259a:	2280      	movs	r2, #128	@ 0x80
 800259c:	0052      	lsls	r2, r2, #1
 800259e:	431a      	orrs	r2, r3
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025ae:	4a1d      	ldr	r2, [pc, #116]	@ (8002624 <HAL_ADC_Start_DMA+0x110>)
 80025b0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b6:	4a1c      	ldr	r2, [pc, #112]	@ (8002628 <HAL_ADC_Start_DMA+0x114>)
 80025b8:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025be:	4a1b      	ldr	r2, [pc, #108]	@ (800262c <HAL_ADC_Start_DMA+0x118>)
 80025c0:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	221c      	movs	r2, #28
 80025c8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2254      	movs	r2, #84	@ 0x54
 80025ce:	2100      	movs	r1, #0
 80025d0:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	685a      	ldr	r2, [r3, #4]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2110      	movs	r1, #16
 80025de:	430a      	orrs	r2, r1
 80025e0:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3340      	adds	r3, #64	@ 0x40
 80025ec:	0019      	movs	r1, r3
 80025ee:	68ba      	ldr	r2, [r7, #8]
 80025f0:	193c      	adds	r4, r7, r4
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	f000 fe68 	bl	80032c8 <HAL_DMA_Start_IT>
 80025f8:	0003      	movs	r3, r0
 80025fa:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	0018      	movs	r0, r3
 8002602:	f7ff fdbd 	bl	8002180 <LL_ADC_REG_StartConversion>
 8002606:	e003      	b.n	8002610 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002608:	2317      	movs	r3, #23
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	2202      	movs	r2, #2
 800260e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8002610:	2317      	movs	r3, #23
 8002612:	18fb      	adds	r3, r7, r3
 8002614:	781b      	ldrb	r3, [r3, #0]
}
 8002616:	0018      	movs	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	b006      	add	sp, #24
 800261c:	bdb0      	pop	{r4, r5, r7, pc}
 800261e:	46c0      	nop			@ (mov r8, r8)
 8002620:	fffff0fe 	.word	0xfffff0fe
 8002624:	08002bb9 	.word	0x08002bb9
 8002628:	08002c81 	.word	0x08002c81
 800262c:	08002c9f 	.word	0x08002c9f

08002630 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8002638:	46c0      	nop			@ (mov r8, r8)
 800263a:	46bd      	mov	sp, r7
 800263c:	b002      	add	sp, #8
 800263e:	bd80      	pop	{r7, pc}

08002640 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002648:	46c0      	nop			@ (mov r8, r8)
 800264a:	46bd      	mov	sp, r7
 800264c:	b002      	add	sp, #8
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002658:	46c0      	nop			@ (mov r8, r8)
 800265a:	46bd      	mov	sp, r7
 800265c:	b002      	add	sp, #8
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800266a:	2317      	movs	r3, #23
 800266c:	18fb      	adds	r3, r7, r3
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2254      	movs	r2, #84	@ 0x54
 800267a:	5c9b      	ldrb	r3, [r3, r2]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x24>
 8002680:	2302      	movs	r3, #2
 8002682:	e1be      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x3a2>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2254      	movs	r2, #84	@ 0x54
 8002688:	2101      	movs	r1, #1
 800268a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	0018      	movs	r0, r3
 8002692:	f7ff fd87 	bl	80021a4 <LL_ADC_REG_IsConversionOngoing>
 8002696:	1e03      	subs	r3, r0, #0
 8002698:	d000      	beq.n	800269c <HAL_ADC_ConfigChannel+0x3c>
 800269a:	e1a1      	b.n	80029e0 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d100      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x46>
 80026a4:	e152      	b.n	800294c <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	691a      	ldr	r2, [r3, #16]
 80026aa:	2380      	movs	r3, #128	@ 0x80
 80026ac:	061b      	lsls	r3, r3, #24
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d004      	beq.n	80026bc <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80026b6:	4ac2      	ldr	r2, [pc, #776]	@ (80029c0 <HAL_ADC_ConfigChannel+0x360>)
 80026b8:	4293      	cmp	r3, r2
 80026ba:	d108      	bne.n	80026ce <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	0019      	movs	r1, r3
 80026c6:	0010      	movs	r0, r2
 80026c8:	f7ff fcac 	bl	8002024 <LL_ADC_REG_SetSequencerChAdd>
 80026cc:	e0ed      	b.n	80028aa <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	211f      	movs	r1, #31
 80026d8:	400b      	ands	r3, r1
 80026da:	210f      	movs	r1, #15
 80026dc:	4099      	lsls	r1, r3
 80026de:	000b      	movs	r3, r1
 80026e0:	43db      	mvns	r3, r3
 80026e2:	4013      	ands	r3, r2
 80026e4:	0019      	movs	r1, r3
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	025b      	lsls	r3, r3, #9
 80026ec:	0a5b      	lsrs	r3, r3, #9
 80026ee:	d105      	bne.n	80026fc <HAL_ADC_ConfigChannel+0x9c>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	0e9b      	lsrs	r3, r3, #26
 80026f6:	221f      	movs	r2, #31
 80026f8:	4013      	ands	r3, r2
 80026fa:	e0bc      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2201      	movs	r2, #1
 8002702:	4013      	ands	r3, r2
 8002704:	d000      	beq.n	8002708 <HAL_ADC_ConfigChannel+0xa8>
 8002706:	e0b5      	b.n	8002874 <HAL_ADC_ConfigChannel+0x214>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d000      	beq.n	8002714 <HAL_ADC_ConfigChannel+0xb4>
 8002712:	e0ad      	b.n	8002870 <HAL_ADC_ConfigChannel+0x210>
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2204      	movs	r2, #4
 800271a:	4013      	ands	r3, r2
 800271c:	d000      	beq.n	8002720 <HAL_ADC_ConfigChannel+0xc0>
 800271e:	e0a5      	b.n	800286c <HAL_ADC_ConfigChannel+0x20c>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2208      	movs	r2, #8
 8002726:	4013      	ands	r3, r2
 8002728:	d000      	beq.n	800272c <HAL_ADC_ConfigChannel+0xcc>
 800272a:	e09d      	b.n	8002868 <HAL_ADC_ConfigChannel+0x208>
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2210      	movs	r2, #16
 8002732:	4013      	ands	r3, r2
 8002734:	d000      	beq.n	8002738 <HAL_ADC_ConfigChannel+0xd8>
 8002736:	e095      	b.n	8002864 <HAL_ADC_ConfigChannel+0x204>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2220      	movs	r2, #32
 800273e:	4013      	ands	r3, r2
 8002740:	d000      	beq.n	8002744 <HAL_ADC_ConfigChannel+0xe4>
 8002742:	e08d      	b.n	8002860 <HAL_ADC_ConfigChannel+0x200>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2240      	movs	r2, #64	@ 0x40
 800274a:	4013      	ands	r3, r2
 800274c:	d000      	beq.n	8002750 <HAL_ADC_ConfigChannel+0xf0>
 800274e:	e085      	b.n	800285c <HAL_ADC_ConfigChannel+0x1fc>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2280      	movs	r2, #128	@ 0x80
 8002756:	4013      	ands	r3, r2
 8002758:	d000      	beq.n	800275c <HAL_ADC_ConfigChannel+0xfc>
 800275a:	e07d      	b.n	8002858 <HAL_ADC_ConfigChannel+0x1f8>
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	2380      	movs	r3, #128	@ 0x80
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	4013      	ands	r3, r2
 8002766:	d000      	beq.n	800276a <HAL_ADC_ConfigChannel+0x10a>
 8002768:	e074      	b.n	8002854 <HAL_ADC_ConfigChannel+0x1f4>
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	2380      	movs	r3, #128	@ 0x80
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4013      	ands	r3, r2
 8002774:	d000      	beq.n	8002778 <HAL_ADC_ConfigChannel+0x118>
 8002776:	e06b      	b.n	8002850 <HAL_ADC_ConfigChannel+0x1f0>
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	2380      	movs	r3, #128	@ 0x80
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4013      	ands	r3, r2
 8002782:	d000      	beq.n	8002786 <HAL_ADC_ConfigChannel+0x126>
 8002784:	e062      	b.n	800284c <HAL_ADC_ConfigChannel+0x1ec>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	2380      	movs	r3, #128	@ 0x80
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	4013      	ands	r3, r2
 8002790:	d000      	beq.n	8002794 <HAL_ADC_ConfigChannel+0x134>
 8002792:	e059      	b.n	8002848 <HAL_ADC_ConfigChannel+0x1e8>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	2380      	movs	r3, #128	@ 0x80
 800279a:	015b      	lsls	r3, r3, #5
 800279c:	4013      	ands	r3, r2
 800279e:	d151      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x1e4>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681a      	ldr	r2, [r3, #0]
 80027a4:	2380      	movs	r3, #128	@ 0x80
 80027a6:	019b      	lsls	r3, r3, #6
 80027a8:	4013      	ands	r3, r2
 80027aa:	d149      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x1e0>
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	2380      	movs	r3, #128	@ 0x80
 80027b2:	01db      	lsls	r3, r3, #7
 80027b4:	4013      	ands	r3, r2
 80027b6:	d141      	bne.n	800283c <HAL_ADC_ConfigChannel+0x1dc>
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	2380      	movs	r3, #128	@ 0x80
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	4013      	ands	r3, r2
 80027c2:	d139      	bne.n	8002838 <HAL_ADC_ConfigChannel+0x1d8>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	025b      	lsls	r3, r3, #9
 80027cc:	4013      	ands	r3, r2
 80027ce:	d131      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x1d4>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	2380      	movs	r3, #128	@ 0x80
 80027d6:	029b      	lsls	r3, r3, #10
 80027d8:	4013      	ands	r3, r2
 80027da:	d129      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x1d0>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681a      	ldr	r2, [r3, #0]
 80027e0:	2380      	movs	r3, #128	@ 0x80
 80027e2:	02db      	lsls	r3, r3, #11
 80027e4:	4013      	ands	r3, r2
 80027e6:	d121      	bne.n	800282c <HAL_ADC_ConfigChannel+0x1cc>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	2380      	movs	r3, #128	@ 0x80
 80027ee:	031b      	lsls	r3, r3, #12
 80027f0:	4013      	ands	r3, r2
 80027f2:	d119      	bne.n	8002828 <HAL_ADC_ConfigChannel+0x1c8>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	2380      	movs	r3, #128	@ 0x80
 80027fa:	035b      	lsls	r3, r3, #13
 80027fc:	4013      	ands	r3, r2
 80027fe:	d111      	bne.n	8002824 <HAL_ADC_ConfigChannel+0x1c4>
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	2380      	movs	r3, #128	@ 0x80
 8002806:	039b      	lsls	r3, r3, #14
 8002808:	4013      	ands	r3, r2
 800280a:	d109      	bne.n	8002820 <HAL_ADC_ConfigChannel+0x1c0>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	2380      	movs	r3, #128	@ 0x80
 8002812:	03db      	lsls	r3, r3, #15
 8002814:	4013      	ands	r3, r2
 8002816:	d001      	beq.n	800281c <HAL_ADC_ConfigChannel+0x1bc>
 8002818:	2316      	movs	r3, #22
 800281a:	e02c      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 800281c:	2300      	movs	r3, #0
 800281e:	e02a      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002820:	2315      	movs	r3, #21
 8002822:	e028      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002824:	2314      	movs	r3, #20
 8002826:	e026      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002828:	2313      	movs	r3, #19
 800282a:	e024      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 800282c:	2312      	movs	r3, #18
 800282e:	e022      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002830:	2311      	movs	r3, #17
 8002832:	e020      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002834:	2310      	movs	r3, #16
 8002836:	e01e      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002838:	230f      	movs	r3, #15
 800283a:	e01c      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 800283c:	230e      	movs	r3, #14
 800283e:	e01a      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002840:	230d      	movs	r3, #13
 8002842:	e018      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002844:	230c      	movs	r3, #12
 8002846:	e016      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002848:	230b      	movs	r3, #11
 800284a:	e014      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 800284c:	230a      	movs	r3, #10
 800284e:	e012      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002850:	2309      	movs	r3, #9
 8002852:	e010      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002854:	2308      	movs	r3, #8
 8002856:	e00e      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002858:	2307      	movs	r3, #7
 800285a:	e00c      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 800285c:	2306      	movs	r3, #6
 800285e:	e00a      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002860:	2305      	movs	r3, #5
 8002862:	e008      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002864:	2304      	movs	r3, #4
 8002866:	e006      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002868:	2303      	movs	r3, #3
 800286a:	e004      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 800286c:	2302      	movs	r3, #2
 800286e:	e002      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002870:	2301      	movs	r3, #1
 8002872:	e000      	b.n	8002876 <HAL_ADC_ConfigChannel+0x216>
 8002874:	2300      	movs	r3, #0
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	6852      	ldr	r2, [r2, #4]
 800287a:	201f      	movs	r0, #31
 800287c:	4002      	ands	r2, r0
 800287e:	4093      	lsls	r3, r2
 8002880:	000a      	movs	r2, r1
 8002882:	431a      	orrs	r2, r3
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	089b      	lsrs	r3, r3, #2
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	69db      	ldr	r3, [r3, #28]
 8002894:	429a      	cmp	r2, r3
 8002896:	d808      	bhi.n	80028aa <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6818      	ldr	r0, [r3, #0]
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	6859      	ldr	r1, [r3, #4]
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	001a      	movs	r2, r3
 80028a6:	f7ff fb9d 	bl	8001fe4 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6818      	ldr	r0, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	6819      	ldr	r1, [r3, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	001a      	movs	r2, r3
 80028b8:	f7ff fbd8 	bl	800206c <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	db00      	blt.n	80028c6 <HAL_ADC_ConfigChannel+0x266>
 80028c4:	e096      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028c6:	4b3f      	ldr	r3, [pc, #252]	@ (80029c4 <HAL_ADC_ConfigChannel+0x364>)
 80028c8:	0018      	movs	r0, r3
 80028ca:	f7ff fb39 	bl	8001f40 <LL_ADC_GetCommonPathInternalCh>
 80028ce:	0003      	movs	r3, r0
 80028d0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a3c      	ldr	r2, [pc, #240]	@ (80029c8 <HAL_ADC_ConfigChannel+0x368>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d123      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028dc:	693a      	ldr	r2, [r7, #16]
 80028de:	2380      	movs	r3, #128	@ 0x80
 80028e0:	041b      	lsls	r3, r3, #16
 80028e2:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80028e4:	d11e      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2280      	movs	r2, #128	@ 0x80
 80028ea:	0412      	lsls	r2, r2, #16
 80028ec:	4313      	orrs	r3, r2
 80028ee:	4a35      	ldr	r2, [pc, #212]	@ (80029c4 <HAL_ADC_ConfigChannel+0x364>)
 80028f0:	0019      	movs	r1, r3
 80028f2:	0010      	movs	r0, r2
 80028f4:	f7ff fb10 	bl	8001f18 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80028f8:	4b34      	ldr	r3, [pc, #208]	@ (80029cc <HAL_ADC_ConfigChannel+0x36c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4934      	ldr	r1, [pc, #208]	@ (80029d0 <HAL_ADC_ConfigChannel+0x370>)
 80028fe:	0018      	movs	r0, r3
 8002900:	f7fd fc14 	bl	800012c <__udivsi3>
 8002904:	0003      	movs	r3, r0
 8002906:	001a      	movs	r2, r3
 8002908:	0013      	movs	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	189b      	adds	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	3301      	adds	r3, #1
 8002912:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002914:	e002      	b.n	800291c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3b01      	subs	r3, #1
 800291a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f9      	bne.n	8002916 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002922:	e067      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a2a      	ldr	r2, [pc, #168]	@ (80029d4 <HAL_ADC_ConfigChannel+0x374>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d162      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	2380      	movs	r3, #128	@ 0x80
 8002932:	03db      	lsls	r3, r3, #15
 8002934:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002936:	d15d      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	2280      	movs	r2, #128	@ 0x80
 800293c:	03d2      	lsls	r2, r2, #15
 800293e:	4313      	orrs	r3, r2
 8002940:	4a20      	ldr	r2, [pc, #128]	@ (80029c4 <HAL_ADC_ConfigChannel+0x364>)
 8002942:	0019      	movs	r1, r3
 8002944:	0010      	movs	r0, r2
 8002946:	f7ff fae7 	bl	8001f18 <LL_ADC_SetCommonPathInternalCh>
 800294a:	e053      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691a      	ldr	r2, [r3, #16]
 8002950:	2380      	movs	r3, #128	@ 0x80
 8002952:	061b      	lsls	r3, r3, #24
 8002954:	429a      	cmp	r2, r3
 8002956:	d004      	beq.n	8002962 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800295c:	4a18      	ldr	r2, [pc, #96]	@ (80029c0 <HAL_ADC_ConfigChannel+0x360>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d107      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	0019      	movs	r1, r3
 800296c:	0010      	movs	r0, r2
 800296e:	f7ff fb6a 	bl	8002046 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2b00      	cmp	r3, #0
 8002978:	da3c      	bge.n	80029f4 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800297a:	4b12      	ldr	r3, [pc, #72]	@ (80029c4 <HAL_ADC_ConfigChannel+0x364>)
 800297c:	0018      	movs	r0, r3
 800297e:	f7ff fadf 	bl	8001f40 <LL_ADC_GetCommonPathInternalCh>
 8002982:	0003      	movs	r3, r0
 8002984:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a0f      	ldr	r2, [pc, #60]	@ (80029c8 <HAL_ADC_ConfigChannel+0x368>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d108      	bne.n	80029a2 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002990:	693b      	ldr	r3, [r7, #16]
 8002992:	4a11      	ldr	r2, [pc, #68]	@ (80029d8 <HAL_ADC_ConfigChannel+0x378>)
 8002994:	4013      	ands	r3, r2
 8002996:	4a0b      	ldr	r2, [pc, #44]	@ (80029c4 <HAL_ADC_ConfigChannel+0x364>)
 8002998:	0019      	movs	r1, r3
 800299a:	0010      	movs	r0, r2
 800299c:	f7ff fabc 	bl	8001f18 <LL_ADC_SetCommonPathInternalCh>
 80029a0:	e028      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a0b      	ldr	r2, [pc, #44]	@ (80029d4 <HAL_ADC_ConfigChannel+0x374>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d123      	bne.n	80029f4 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029ac:	693b      	ldr	r3, [r7, #16]
 80029ae:	4a0b      	ldr	r2, [pc, #44]	@ (80029dc <HAL_ADC_ConfigChannel+0x37c>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	4a04      	ldr	r2, [pc, #16]	@ (80029c4 <HAL_ADC_ConfigChannel+0x364>)
 80029b4:	0019      	movs	r1, r3
 80029b6:	0010      	movs	r0, r2
 80029b8:	f7ff faae 	bl	8001f18 <LL_ADC_SetCommonPathInternalCh>
 80029bc:	e01a      	b.n	80029f4 <HAL_ADC_ConfigChannel+0x394>
 80029be:	46c0      	nop			@ (mov r8, r8)
 80029c0:	80000004 	.word	0x80000004
 80029c4:	40012708 	.word	0x40012708
 80029c8:	a4000200 	.word	0xa4000200
 80029cc:	2000000c 	.word	0x2000000c
 80029d0:	00030d40 	.word	0x00030d40
 80029d4:	a8000400 	.word	0xa8000400
 80029d8:	ff7fffff 	.word	0xff7fffff
 80029dc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029e4:	2220      	movs	r2, #32
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80029ec:	2317      	movs	r3, #23
 80029ee:	18fb      	adds	r3, r7, r3
 80029f0:	2201      	movs	r2, #1
 80029f2:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2254      	movs	r2, #84	@ 0x54
 80029f8:	2100      	movs	r1, #0
 80029fa:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80029fc:	2317      	movs	r3, #23
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	781b      	ldrb	r3, [r3, #0]
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b006      	add	sp, #24
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			@ (mov r8, r8)

08002a0c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7ff fb8d 	bl	800213c <LL_ADC_IsEnabled>
 8002a22:	1e03      	subs	r3, r0, #0
 8002a24:	d162      	bne.n	8002aec <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	4a32      	ldr	r2, [pc, #200]	@ (8002af8 <ADC_Enable+0xec>)
 8002a2e:	4013      	ands	r3, r2
 8002a30:	d00d      	beq.n	8002a4e <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a36:	2210      	movs	r2, #16
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a42:	2201      	movs	r2, #1
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e04f      	b.n	8002aee <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	0018      	movs	r0, r3
 8002a54:	f7ff fb4e 	bl	80020f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a58:	4b28      	ldr	r3, [pc, #160]	@ (8002afc <ADC_Enable+0xf0>)
 8002a5a:	0018      	movs	r0, r3
 8002a5c:	f7ff fa70 	bl	8001f40 <LL_ADC_GetCommonPathInternalCh>
 8002a60:	0002      	movs	r2, r0
 8002a62:	2380      	movs	r3, #128	@ 0x80
 8002a64:	041b      	lsls	r3, r3, #16
 8002a66:	4013      	ands	r3, r2
 8002a68:	d00f      	beq.n	8002a8a <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002a6a:	4b25      	ldr	r3, [pc, #148]	@ (8002b00 <ADC_Enable+0xf4>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4925      	ldr	r1, [pc, #148]	@ (8002b04 <ADC_Enable+0xf8>)
 8002a70:	0018      	movs	r0, r3
 8002a72:	f7fd fb5b 	bl	800012c <__udivsi3>
 8002a76:	0003      	movs	r3, r0
 8002a78:	3301      	adds	r3, #1
 8002a7a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a7c:	e002      	b.n	8002a84 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	3b01      	subs	r3, #1
 8002a82:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d1f9      	bne.n	8002a7e <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	7e5b      	ldrb	r3, [r3, #25]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d02c      	beq.n	8002aec <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002a92:	f7ff fa13 	bl	8001ebc <HAL_GetTick>
 8002a96:	0003      	movs	r3, r0
 8002a98:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a9a:	e020      	b.n	8002ade <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0018      	movs	r0, r3
 8002aa2:	f7ff fb4b 	bl	800213c <LL_ADC_IsEnabled>
 8002aa6:	1e03      	subs	r3, r0, #0
 8002aa8:	d104      	bne.n	8002ab4 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f7ff fb20 	bl	80020f4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ab4:	f7ff fa02 	bl	8001ebc <HAL_GetTick>
 8002ab8:	0002      	movs	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d90d      	bls.n	8002ade <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac6:	2210      	movs	r2, #16
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	431a      	orrs	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e007      	b.n	8002aee <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d1d7      	bne.n	8002a9c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002aec:	2300      	movs	r3, #0
}
 8002aee:	0018      	movs	r0, r3
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b004      	add	sp, #16
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	46c0      	nop			@ (mov r8, r8)
 8002af8:	80000017 	.word	0x80000017
 8002afc:	40012708 	.word	0x40012708
 8002b00:	2000000c 	.word	0x2000000c
 8002b04:	00030d40 	.word	0x00030d40

08002b08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	0018      	movs	r0, r3
 8002b16:	f7ff fb22 	bl	800215e <LL_ADC_IsDisableOngoing>
 8002b1a:	0003      	movs	r3, r0
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	0018      	movs	r0, r3
 8002b24:	f7ff fb0a 	bl	800213c <LL_ADC_IsEnabled>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d040      	beq.n	8002bae <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d13d      	bne.n	8002bae <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2205      	movs	r2, #5
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d10d      	bne.n	8002b5c <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7ff fae7 	bl	8002118 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b52:	f7ff f9b3 	bl	8001ebc <HAL_GetTick>
 8002b56:	0003      	movs	r3, r0
 8002b58:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b5a:	e022      	b.n	8002ba2 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b60:	2210      	movs	r2, #16
 8002b62:	431a      	orrs	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	431a      	orrs	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e01b      	b.n	8002bb0 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b78:	f7ff f9a0 	bl	8001ebc <HAL_GetTick>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d90d      	bls.n	8002ba2 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8a:	2210      	movs	r2, #16
 8002b8c:	431a      	orrs	r2, r3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b96:	2201      	movs	r2, #1
 8002b98:	431a      	orrs	r2, r3
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e006      	b.n	8002bb0 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	4013      	ands	r3, r2
 8002bac:	d1e4      	bne.n	8002b78 <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bae:	2300      	movs	r3, #0
}
 8002bb0:	0018      	movs	r0, r3
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	b004      	add	sp, #16
 8002bb6:	bd80      	pop	{r7, pc}

08002bb8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bc4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bca:	2250      	movs	r2, #80	@ 0x50
 8002bcc:	4013      	ands	r3, r2
 8002bce:	d141      	bne.n	8002c54 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	2280      	movs	r2, #128	@ 0x80
 8002bd6:	0092      	lsls	r2, r2, #2
 8002bd8:	431a      	orrs	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	0018      	movs	r0, r3
 8002be4:	f7ff f9ed 	bl	8001fc2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002be8:	1e03      	subs	r3, r0, #0
 8002bea:	d02e      	beq.n	8002c4a <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	7e9b      	ldrb	r3, [r3, #26]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d12a      	bne.n	8002c4a <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d123      	bne.n	8002c4a <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0018      	movs	r0, r3
 8002c08:	f7ff facc 	bl	80021a4 <LL_ADC_REG_IsConversionOngoing>
 8002c0c:	1e03      	subs	r3, r0, #0
 8002c0e:	d110      	bne.n	8002c32 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	685a      	ldr	r2, [r3, #4]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	210c      	movs	r1, #12
 8002c1c:	438a      	bics	r2, r1
 8002c1e:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c24:	4a15      	ldr	r2, [pc, #84]	@ (8002c7c <ADC_DMAConvCplt+0xc4>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	2201      	movs	r2, #1
 8002c2a:	431a      	orrs	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c30:	e00b      	b.n	8002c4a <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c36:	2220      	movs	r2, #32
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c42:	2201      	movs	r2, #1
 8002c44:	431a      	orrs	r2, r3
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	0018      	movs	r0, r3
 8002c4e:	f7ff fcef 	bl	8002630 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c52:	e00f      	b.n	8002c74 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c58:	2210      	movs	r2, #16
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	d004      	beq.n	8002c68 <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	0018      	movs	r0, r3
 8002c62:	f7ff fcf5 	bl	8002650 <HAL_ADC_ErrorCallback>
}
 8002c66:	e005      	b.n	8002c74 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	0010      	movs	r0, r2
 8002c72:	4798      	blx	r3
}
 8002c74:	46c0      	nop			@ (mov r8, r8)
 8002c76:	46bd      	mov	sp, r7
 8002c78:	b004      	add	sp, #16
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	fffffefe 	.word	0xfffffefe

08002c80 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f7ff fcd5 	bl	8002640 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c96:	46c0      	nop			@ (mov r8, r8)
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	b004      	add	sp, #16
 8002c9c:	bd80      	pop	{r7, pc}

08002c9e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b084      	sub	sp, #16
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cb0:	2240      	movs	r2, #64	@ 0x40
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	431a      	orrs	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	0018      	movs	r0, r3
 8002cc8:	f7ff fcc2 	bl	8002650 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ccc:	46c0      	nop			@ (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b004      	add	sp, #16
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <LL_ADC_GetCommonClock>:
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	23f0      	movs	r3, #240	@ 0xf0
 8002ce2:	039b      	lsls	r3, r3, #14
 8002ce4:	4013      	ands	r3, r2
}
 8002ce6:	0018      	movs	r0, r3
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	b002      	add	sp, #8
 8002cec:	bd80      	pop	{r7, pc}

08002cee <LL_ADC_GetClock>:
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	0f9b      	lsrs	r3, r3, #30
 8002cfc:	079b      	lsls	r3, r3, #30
}
 8002cfe:	0018      	movs	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	b002      	add	sp, #8
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <LL_ADC_SetCalibrationFactor>:
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
 8002d0e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	22b4      	movs	r2, #180	@ 0xb4
 8002d14:	589b      	ldr	r3, [r3, r2]
 8002d16:	227f      	movs	r2, #127	@ 0x7f
 8002d18:	4393      	bics	r3, r2
 8002d1a:	001a      	movs	r2, r3
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	21b4      	movs	r1, #180	@ 0xb4
 8002d24:	505a      	str	r2, [r3, r1]
}
 8002d26:	46c0      	nop			@ (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b002      	add	sp, #8
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <LL_ADC_GetCalibrationFactor>:
{
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b082      	sub	sp, #8
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	22b4      	movs	r2, #180	@ 0xb4
 8002d3a:	589b      	ldr	r3, [r3, r2]
 8002d3c:	227f      	movs	r2, #127	@ 0x7f
 8002d3e:	4013      	ands	r3, r2
}
 8002d40:	0018      	movs	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	b002      	add	sp, #8
 8002d46:	bd80      	pop	{r7, pc}

08002d48 <LL_ADC_Enable>:
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b082      	sub	sp, #8
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4a04      	ldr	r2, [pc, #16]	@ (8002d68 <LL_ADC_Enable+0x20>)
 8002d56:	4013      	ands	r3, r2
 8002d58:	2201      	movs	r2, #1
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	609a      	str	r2, [r3, #8]
}
 8002d60:	46c0      	nop			@ (mov r8, r8)
 8002d62:	46bd      	mov	sp, r7
 8002d64:	b002      	add	sp, #8
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	7fffffe8 	.word	0x7fffffe8

08002d6c <LL_ADC_Disable>:
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	689b      	ldr	r3, [r3, #8]
 8002d78:	4a04      	ldr	r2, [pc, #16]	@ (8002d8c <LL_ADC_Disable+0x20>)
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	2202      	movs	r2, #2
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	609a      	str	r2, [r3, #8]
}
 8002d84:	46c0      	nop			@ (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	7fffffe8 	.word	0x7fffffe8

08002d90 <LL_ADC_IsEnabled>:
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	689b      	ldr	r3, [r3, #8]
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	4013      	ands	r3, r2
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <LL_ADC_IsEnabled+0x18>
 8002da4:	2301      	movs	r3, #1
 8002da6:	e000      	b.n	8002daa <LL_ADC_IsEnabled+0x1a>
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	0018      	movs	r0, r3
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b002      	add	sp, #8
 8002db0:	bd80      	pop	{r7, pc}
	...

08002db4 <LL_ADC_StartCalibration>:
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	4a05      	ldr	r2, [pc, #20]	@ (8002dd8 <LL_ADC_StartCalibration+0x24>)
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	2280      	movs	r2, #128	@ 0x80
 8002dc6:	0612      	lsls	r2, r2, #24
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	609a      	str	r2, [r3, #8]
}
 8002dce:	46c0      	nop			@ (mov r8, r8)
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	46c0      	nop			@ (mov r8, r8)
 8002dd8:	7fffffe8 	.word	0x7fffffe8

08002ddc <LL_ADC_IsCalibrationOnGoing>:
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	0fdb      	lsrs	r3, r3, #31
 8002dea:	07da      	lsls	r2, r3, #31
 8002dec:	2380      	movs	r3, #128	@ 0x80
 8002dee:	061b      	lsls	r3, r3, #24
 8002df0:	429a      	cmp	r2, r3
 8002df2:	d101      	bne.n	8002df8 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002df4:	2301      	movs	r3, #1
 8002df6:	e000      	b.n	8002dfa <LL_ADC_IsCalibrationOnGoing+0x1e>
 8002df8:	2300      	movs	r3, #0
}
 8002dfa:	0018      	movs	r0, r3
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	b002      	add	sp, #8
 8002e00:	bd80      	pop	{r7, pc}
	...

08002e04 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002e04:	b590      	push	{r4, r7, lr}
 8002e06:	b08b      	sub	sp, #44	@ 0x2c
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002e10:	2300      	movs	r3, #0
 8002e12:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2254      	movs	r2, #84	@ 0x54
 8002e18:	5c9b      	ldrb	r3, [r3, r2]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_ADCEx_Calibration_Start+0x1e>
 8002e1e:	2302      	movs	r3, #2
 8002e20:	e0de      	b.n	8002fe0 <HAL_ADCEx_Calibration_Start+0x1dc>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2254      	movs	r2, #84	@ 0x54
 8002e26:	2101      	movs	r1, #1
 8002e28:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002e2a:	231f      	movs	r3, #31
 8002e2c:	18fc      	adds	r4, r7, r3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	0018      	movs	r0, r3
 8002e32:	f7ff fe69 	bl	8002b08 <ADC_Disable>
 8002e36:	0003      	movs	r3, r0
 8002e38:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f7ff ffa6 	bl	8002d90 <LL_ADC_IsEnabled>
 8002e44:	1e03      	subs	r3, r0, #0
 8002e46:	d000      	beq.n	8002e4a <HAL_ADCEx_Calibration_Start+0x46>
 8002e48:	e0bd      	b.n	8002fc6 <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e4e:	4a66      	ldr	r2, [pc, #408]	@ (8002fe8 <HAL_ADCEx_Calibration_Start+0x1e4>)
 8002e50:	4013      	ands	r3, r2
 8002e52:	2202      	movs	r2, #2
 8002e54:	431a      	orrs	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a62      	ldr	r2, [pc, #392]	@ (8002fec <HAL_ADCEx_Calibration_Start+0x1e8>)
 8002e62:	4013      	ands	r3, r2
 8002e64:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68da      	ldr	r2, [r3, #12]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	495f      	ldr	r1, [pc, #380]	@ (8002ff0 <HAL_ADCEx_Calibration_Start+0x1ec>)
 8002e72:	400a      	ands	r2, r1
 8002e74:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002e76:	2300      	movs	r3, #0
 8002e78:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7a:	e02e      	b.n	8002eda <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	0018      	movs	r0, r3
 8002e82:	f7ff ff97 	bl	8002db4 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e86:	e015      	b.n	8002eb4 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002e8e:	68fa      	ldr	r2, [r7, #12]
 8002e90:	23ae      	movs	r3, #174	@ 0xae
 8002e92:	029b      	lsls	r3, r3, #10
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d30d      	bcc.n	8002eb4 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e9c:	2212      	movs	r2, #18
 8002e9e:	4393      	bics	r3, r2
 8002ea0:	2210      	movs	r2, #16
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2254      	movs	r2, #84	@ 0x54
 8002eac:	2100      	movs	r1, #0
 8002eae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e095      	b.n	8002fe0 <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	0018      	movs	r0, r3
 8002eba:	f7ff ff8f 	bl	8002ddc <LL_ADC_IsCalibrationOnGoing>
 8002ebe:	1e03      	subs	r3, r0, #0
 8002ec0:	d1e2      	bne.n	8002e88 <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f7ff ff31 	bl	8002d2e <LL_ADC_GetCalibrationFactor>
 8002ecc:	0002      	movs	r2, r0
 8002ece:	6a3b      	ldr	r3, [r7, #32]
 8002ed0:	189b      	adds	r3, r3, r2
 8002ed2:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002edc:	2b07      	cmp	r3, #7
 8002ede:	d9cd      	bls.n	8002e7c <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002ee0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002ee2:	6a38      	ldr	r0, [r7, #32]
 8002ee4:	f7fd f922 	bl	800012c <__udivsi3>
 8002ee8:	0003      	movs	r3, r0
 8002eea:	623b      	str	r3, [r7, #32]
    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7ff ff29 	bl	8002d48 <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if(LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	0018      	movs	r0, r3
 8002efc:	f7ff fef7 	bl	8002cee <LL_ADC_GetClock>
 8002f00:	1e03      	subs	r3, r0, #0
 8002f02:	d11b      	bne.n	8002f3c <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f04:	4b3b      	ldr	r3, [pc, #236]	@ (8002ff4 <HAL_ADCEx_Calibration_Start+0x1f0>)
 8002f06:	0018      	movs	r0, r3
 8002f08:	f7ff fee4 	bl	8002cd4 <LL_ADC_GetCommonClock>
 8002f0c:	0003      	movs	r3, r0
 8002f0e:	617b      	str	r3, [r7, #20]

      if(adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	23e0      	movs	r3, #224	@ 0xe0
 8002f14:	035b      	lsls	r3, r3, #13
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d310      	bcc.n	8002f3c <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1U << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3U));
 8002f1a:	697b      	ldr	r3, [r7, #20]
 8002f1c:	0c9b      	lsrs	r3, r3, #18
 8002f1e:	3b03      	subs	r3, #3
 8002f20:	2201      	movs	r2, #1
 8002f22:	409a      	lsls	r2, r3
 8002f24:	0013      	movs	r3, r2
 8002f26:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1U;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	085b      	lsrs	r3, r3, #1
 8002f2c:	60bb      	str	r3, [r7, #8]

        while(delay_cpu_cycles != 0)
 8002f2e:	e002      	b.n	8002f36 <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	60bb      	str	r3, [r7, #8]
        while(delay_cpu_cycles != 0)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1f9      	bne.n	8002f30 <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6a3a      	ldr	r2, [r7, #32]
 8002f42:	0011      	movs	r1, r2
 8002f44:	0018      	movs	r0, r3
 8002f46:	f7ff fede 	bl	8002d06 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff ff0c 	bl	8002d6c <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002f54:	f7fe ffb2 	bl	8001ebc <HAL_GetTick>
 8002f58:	0003      	movs	r3, r0
 8002f5a:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f5c:	e01b      	b.n	8002f96 <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002f5e:	f7fe ffad 	bl	8001ebc <HAL_GetTick>
 8002f62:	0002      	movs	r2, r0
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b02      	cmp	r3, #2
 8002f6a:	d914      	bls.n	8002f96 <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7ff ff0d 	bl	8002d90 <LL_ADC_IsEnabled>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d00d      	beq.n	8002f96 <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f7e:	2210      	movs	r2, #16
 8002f80:	431a      	orrs	r2, r3
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e024      	b.n	8002fe0 <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7ff fef8 	bl	8002d90 <LL_ADC_IsEnabled>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d1dc      	bne.n	8002f5e <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68d9      	ldr	r1, [r3, #12]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb8:	2203      	movs	r2, #3
 8002fba:	4393      	bics	r3, r2
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fc4:	e005      	b.n	8002fd2 <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fca:	2210      	movs	r2, #16
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2254      	movs	r2, #84	@ 0x54
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8002fda:	231f      	movs	r3, #31
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	781b      	ldrb	r3, [r3, #0]
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b00b      	add	sp, #44	@ 0x2c
 8002fe6:	bd90      	pop	{r4, r7, pc}
 8002fe8:	fffffefd 	.word	0xfffffefd
 8002fec:	00008003 	.word	0x00008003
 8002ff0:	ffff7ffc 	.word	0xffff7ffc
 8002ff4:	40012708 	.word	0x40012708

08002ff8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	0002      	movs	r2, r0
 8003000:	1dfb      	adds	r3, r7, #7
 8003002:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003004:	1dfb      	adds	r3, r7, #7
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b7f      	cmp	r3, #127	@ 0x7f
 800300a:	d809      	bhi.n	8003020 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800300c:	1dfb      	adds	r3, r7, #7
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	001a      	movs	r2, r3
 8003012:	231f      	movs	r3, #31
 8003014:	401a      	ands	r2, r3
 8003016:	4b04      	ldr	r3, [pc, #16]	@ (8003028 <__NVIC_EnableIRQ+0x30>)
 8003018:	2101      	movs	r1, #1
 800301a:	4091      	lsls	r1, r2
 800301c:	000a      	movs	r2, r1
 800301e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8003020:	46c0      	nop			@ (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b002      	add	sp, #8
 8003026:	bd80      	pop	{r7, pc}
 8003028:	e000e100 	.word	0xe000e100

0800302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b590      	push	{r4, r7, lr}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	0002      	movs	r2, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	1dfb      	adds	r3, r7, #7
 8003038:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800303a:	1dfb      	adds	r3, r7, #7
 800303c:	781b      	ldrb	r3, [r3, #0]
 800303e:	2b7f      	cmp	r3, #127	@ 0x7f
 8003040:	d828      	bhi.n	8003094 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003042:	4a2f      	ldr	r2, [pc, #188]	@ (8003100 <__NVIC_SetPriority+0xd4>)
 8003044:	1dfb      	adds	r3, r7, #7
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b25b      	sxtb	r3, r3
 800304a:	089b      	lsrs	r3, r3, #2
 800304c:	33c0      	adds	r3, #192	@ 0xc0
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	589b      	ldr	r3, [r3, r2]
 8003052:	1dfa      	adds	r2, r7, #7
 8003054:	7812      	ldrb	r2, [r2, #0]
 8003056:	0011      	movs	r1, r2
 8003058:	2203      	movs	r2, #3
 800305a:	400a      	ands	r2, r1
 800305c:	00d2      	lsls	r2, r2, #3
 800305e:	21ff      	movs	r1, #255	@ 0xff
 8003060:	4091      	lsls	r1, r2
 8003062:	000a      	movs	r2, r1
 8003064:	43d2      	mvns	r2, r2
 8003066:	401a      	ands	r2, r3
 8003068:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	019b      	lsls	r3, r3, #6
 800306e:	22ff      	movs	r2, #255	@ 0xff
 8003070:	401a      	ands	r2, r3
 8003072:	1dfb      	adds	r3, r7, #7
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	0018      	movs	r0, r3
 8003078:	2303      	movs	r3, #3
 800307a:	4003      	ands	r3, r0
 800307c:	00db      	lsls	r3, r3, #3
 800307e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003080:	481f      	ldr	r0, [pc, #124]	@ (8003100 <__NVIC_SetPriority+0xd4>)
 8003082:	1dfb      	adds	r3, r7, #7
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	b25b      	sxtb	r3, r3
 8003088:	089b      	lsrs	r3, r3, #2
 800308a:	430a      	orrs	r2, r1
 800308c:	33c0      	adds	r3, #192	@ 0xc0
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003092:	e031      	b.n	80030f8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003094:	4a1b      	ldr	r2, [pc, #108]	@ (8003104 <__NVIC_SetPriority+0xd8>)
 8003096:	1dfb      	adds	r3, r7, #7
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	0019      	movs	r1, r3
 800309c:	230f      	movs	r3, #15
 800309e:	400b      	ands	r3, r1
 80030a0:	3b08      	subs	r3, #8
 80030a2:	089b      	lsrs	r3, r3, #2
 80030a4:	3306      	adds	r3, #6
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	18d3      	adds	r3, r2, r3
 80030aa:	3304      	adds	r3, #4
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	1dfa      	adds	r2, r7, #7
 80030b0:	7812      	ldrb	r2, [r2, #0]
 80030b2:	0011      	movs	r1, r2
 80030b4:	2203      	movs	r2, #3
 80030b6:	400a      	ands	r2, r1
 80030b8:	00d2      	lsls	r2, r2, #3
 80030ba:	21ff      	movs	r1, #255	@ 0xff
 80030bc:	4091      	lsls	r1, r2
 80030be:	000a      	movs	r2, r1
 80030c0:	43d2      	mvns	r2, r2
 80030c2:	401a      	ands	r2, r3
 80030c4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	019b      	lsls	r3, r3, #6
 80030ca:	22ff      	movs	r2, #255	@ 0xff
 80030cc:	401a      	ands	r2, r3
 80030ce:	1dfb      	adds	r3, r7, #7
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	0018      	movs	r0, r3
 80030d4:	2303      	movs	r3, #3
 80030d6:	4003      	ands	r3, r0
 80030d8:	00db      	lsls	r3, r3, #3
 80030da:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80030dc:	4809      	ldr	r0, [pc, #36]	@ (8003104 <__NVIC_SetPriority+0xd8>)
 80030de:	1dfb      	adds	r3, r7, #7
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	001c      	movs	r4, r3
 80030e4:	230f      	movs	r3, #15
 80030e6:	4023      	ands	r3, r4
 80030e8:	3b08      	subs	r3, #8
 80030ea:	089b      	lsrs	r3, r3, #2
 80030ec:	430a      	orrs	r2, r1
 80030ee:	3306      	adds	r3, #6
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	18c3      	adds	r3, r0, r3
 80030f4:	3304      	adds	r3, #4
 80030f6:	601a      	str	r2, [r3, #0]
}
 80030f8:	46c0      	nop			@ (mov r8, r8)
 80030fa:	46bd      	mov	sp, r7
 80030fc:	b003      	add	sp, #12
 80030fe:	bd90      	pop	{r4, r7, pc}
 8003100:	e000e100 	.word	0xe000e100
 8003104:	e000ed00 	.word	0xe000ed00

08003108 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	1e5a      	subs	r2, r3, #1
 8003114:	2380      	movs	r3, #128	@ 0x80
 8003116:	045b      	lsls	r3, r3, #17
 8003118:	429a      	cmp	r2, r3
 800311a:	d301      	bcc.n	8003120 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800311c:	2301      	movs	r3, #1
 800311e:	e010      	b.n	8003142 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003120:	4b0a      	ldr	r3, [pc, #40]	@ (800314c <SysTick_Config+0x44>)
 8003122:	687a      	ldr	r2, [r7, #4]
 8003124:	3a01      	subs	r2, #1
 8003126:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003128:	2301      	movs	r3, #1
 800312a:	425b      	negs	r3, r3
 800312c:	2103      	movs	r1, #3
 800312e:	0018      	movs	r0, r3
 8003130:	f7ff ff7c 	bl	800302c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003134:	4b05      	ldr	r3, [pc, #20]	@ (800314c <SysTick_Config+0x44>)
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800313a:	4b04      	ldr	r3, [pc, #16]	@ (800314c <SysTick_Config+0x44>)
 800313c:	2207      	movs	r2, #7
 800313e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003140:	2300      	movs	r3, #0
}
 8003142:	0018      	movs	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	b002      	add	sp, #8
 8003148:	bd80      	pop	{r7, pc}
 800314a:	46c0      	nop			@ (mov r8, r8)
 800314c:	e000e010 	.word	0xe000e010

08003150 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	60b9      	str	r1, [r7, #8]
 8003158:	607a      	str	r2, [r7, #4]
 800315a:	210f      	movs	r1, #15
 800315c:	187b      	adds	r3, r7, r1
 800315e:	1c02      	adds	r2, r0, #0
 8003160:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003162:	68ba      	ldr	r2, [r7, #8]
 8003164:	187b      	adds	r3, r7, r1
 8003166:	781b      	ldrb	r3, [r3, #0]
 8003168:	b25b      	sxtb	r3, r3
 800316a:	0011      	movs	r1, r2
 800316c:	0018      	movs	r0, r3
 800316e:	f7ff ff5d 	bl	800302c <__NVIC_SetPriority>
}
 8003172:	46c0      	nop			@ (mov r8, r8)
 8003174:	46bd      	mov	sp, r7
 8003176:	b004      	add	sp, #16
 8003178:	bd80      	pop	{r7, pc}

0800317a <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800317a:	b580      	push	{r7, lr}
 800317c:	b082      	sub	sp, #8
 800317e:	af00      	add	r7, sp, #0
 8003180:	0002      	movs	r2, r0
 8003182:	1dfb      	adds	r3, r7, #7
 8003184:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003186:	1dfb      	adds	r3, r7, #7
 8003188:	781b      	ldrb	r3, [r3, #0]
 800318a:	b25b      	sxtb	r3, r3
 800318c:	0018      	movs	r0, r3
 800318e:	f7ff ff33 	bl	8002ff8 <__NVIC_EnableIRQ>
}
 8003192:	46c0      	nop			@ (mov r8, r8)
 8003194:	46bd      	mov	sp, r7
 8003196:	b002      	add	sp, #8
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b082      	sub	sp, #8
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	0018      	movs	r0, r3
 80031a6:	f7ff ffaf 	bl	8003108 <SysTick_Config>
 80031aa:	0003      	movs	r3, r0
}
 80031ac:	0018      	movs	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	b002      	add	sp, #8
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e077      	b.n	80032b6 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a3d      	ldr	r2, [pc, #244]	@ (80032c0 <HAL_DMA_Init+0x10c>)
 80031cc:	4694      	mov	ip, r2
 80031ce:	4463      	add	r3, ip
 80031d0:	2114      	movs	r1, #20
 80031d2:	0018      	movs	r0, r3
 80031d4:	f7fc ffaa 	bl	800012c <__udivsi3>
 80031d8:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80031da:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2225      	movs	r2, #37	@ 0x25
 80031e4:	2102      	movs	r1, #2
 80031e6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4934      	ldr	r1, [pc, #208]	@ (80032c4 <HAL_DMA_Init+0x110>)
 80031f4:	400a      	ands	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	6819      	ldr	r1, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	689a      	ldr	r2, [r3, #8]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	691b      	ldr	r3, [r3, #16]
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	699b      	ldr	r3, [r3, #24]
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a1b      	ldr	r3, [r3, #32]
 8003224:	431a      	orrs	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	430a      	orrs	r2, r1
 800322c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	0018      	movs	r0, r3
 8003232:	f000 fa9f 	bl	8003774 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689a      	ldr	r2, [r3, #8]
 800323a:	2380      	movs	r3, #128	@ 0x80
 800323c:	01db      	lsls	r3, r3, #7
 800323e:	429a      	cmp	r2, r3
 8003240:	d102      	bne.n	8003248 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685a      	ldr	r2, [r3, #4]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003250:	21ff      	movs	r1, #255	@ 0xff
 8003252:	400a      	ands	r2, r1
 8003254:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800325e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d011      	beq.n	800328c <HAL_DMA_Init+0xd8>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	2b04      	cmp	r3, #4
 800326e:	d80d      	bhi.n	800328c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	0018      	movs	r0, r3
 8003274:	f000 faaa 	bl	80037cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800327c:	2200      	movs	r2, #0
 800327e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	e008      	b.n	800329e <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2225      	movs	r2, #37	@ 0x25
 80032a8:	2101      	movs	r1, #1
 80032aa:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2224      	movs	r2, #36	@ 0x24
 80032b0:	2100      	movs	r1, #0
 80032b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032b4:	2300      	movs	r3, #0
}
 80032b6:	0018      	movs	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	b002      	add	sp, #8
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	46c0      	nop			@ (mov r8, r8)
 80032c0:	bffdfff8 	.word	0xbffdfff8
 80032c4:	ffff800f 	.word	0xffff800f

080032c8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
 80032d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032d6:	2317      	movs	r3, #23
 80032d8:	18fb      	adds	r3, r7, r3
 80032da:	2200      	movs	r2, #0
 80032dc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2224      	movs	r2, #36	@ 0x24
 80032e2:	5c9b      	ldrb	r3, [r3, r2]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d101      	bne.n	80032ec <HAL_DMA_Start_IT+0x24>
 80032e8:	2302      	movs	r3, #2
 80032ea:	e070      	b.n	80033ce <HAL_DMA_Start_IT+0x106>
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2224      	movs	r2, #36	@ 0x24
 80032f0:	2101      	movs	r1, #1
 80032f2:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	2225      	movs	r2, #37	@ 0x25
 80032f8:	5c9b      	ldrb	r3, [r3, r2]
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d157      	bne.n	80033b0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2225      	movs	r2, #37	@ 0x25
 8003304:	2102      	movs	r1, #2
 8003306:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	2200      	movs	r2, #0
 800330c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2101      	movs	r1, #1
 800331a:	438a      	bics	r2, r1
 800331c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f000 f9e5 	bl	80036f4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800332e:	2b00      	cmp	r3, #0
 8003330:	d008      	beq.n	8003344 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	210e      	movs	r1, #14
 800333e:	430a      	orrs	r2, r1
 8003340:	601a      	str	r2, [r3, #0]
 8003342:	e00f      	b.n	8003364 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2104      	movs	r1, #4
 8003350:	438a      	bics	r2, r1
 8003352:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	210a      	movs	r1, #10
 8003360:	430a      	orrs	r2, r1
 8003362:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	2380      	movs	r3, #128	@ 0x80
 800336c:	025b      	lsls	r3, r3, #9
 800336e:	4013      	ands	r3, r2
 8003370:	d008      	beq.n	8003384 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003376:	681a      	ldr	r2, [r3, #0]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337c:	2180      	movs	r1, #128	@ 0x80
 800337e:	0049      	lsls	r1, r1, #1
 8003380:	430a      	orrs	r2, r1
 8003382:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003388:	2b00      	cmp	r3, #0
 800338a:	d008      	beq.n	800339e <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003396:	2180      	movs	r1, #128	@ 0x80
 8003398:	0049      	lsls	r1, r1, #1
 800339a:	430a      	orrs	r2, r1
 800339c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681a      	ldr	r2, [r3, #0]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2101      	movs	r1, #1
 80033aa:	430a      	orrs	r2, r1
 80033ac:	601a      	str	r2, [r3, #0]
 80033ae:	e007      	b.n	80033c0 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2224      	movs	r2, #36	@ 0x24
 80033b4:	2100      	movs	r1, #0
 80033b6:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80033b8:	2317      	movs	r3, #23
 80033ba:	18fb      	adds	r3, r7, r3
 80033bc:	2202      	movs	r2, #2
 80033be:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2224      	movs	r2, #36	@ 0x24
 80033c4:	2100      	movs	r1, #0
 80033c6:	5499      	strb	r1, [r3, r2]

  return status;
 80033c8:	2317      	movs	r3, #23
 80033ca:	18fb      	adds	r3, r7, r3
 80033cc:	781b      	ldrb	r3, [r3, #0]
}
 80033ce:	0018      	movs	r0, r3
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b006      	add	sp, #24
 80033d4:	bd80      	pop	{r7, pc}
	...

080033d8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d101      	bne.n	80033ea <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e050      	b.n	800348c <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2225      	movs	r2, #37	@ 0x25
 80033ee:	5c9b      	ldrb	r3, [r3, r2]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d008      	beq.n	8003408 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2204      	movs	r2, #4
 80033fa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2224      	movs	r2, #36	@ 0x24
 8003400:	2100      	movs	r1, #0
 8003402:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e041      	b.n	800348c <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	210e      	movs	r1, #14
 8003414:	438a      	bics	r2, r1
 8003416:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003422:	491c      	ldr	r1, [pc, #112]	@ (8003494 <HAL_DMA_Abort+0xbc>)
 8003424:	400a      	ands	r2, r1
 8003426:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2101      	movs	r1, #1
 8003434:	438a      	bics	r2, r1
 8003436:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8003438:	4b17      	ldr	r3, [pc, #92]	@ (8003498 <HAL_DMA_Abort+0xc0>)
 800343a:	6859      	ldr	r1, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003440:	221c      	movs	r2, #28
 8003442:	4013      	ands	r3, r2
 8003444:	2201      	movs	r2, #1
 8003446:	409a      	lsls	r2, r3
 8003448:	4b13      	ldr	r3, [pc, #76]	@ (8003498 <HAL_DMA_Abort+0xc0>)
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003456:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00c      	beq.n	800347a <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800346a:	490a      	ldr	r1, [pc, #40]	@ (8003494 <HAL_DMA_Abort+0xbc>)
 800346c:	400a      	ands	r2, r1
 800346e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003478:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2225      	movs	r2, #37	@ 0x25
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2224      	movs	r2, #36	@ 0x24
 8003486:	2100      	movs	r1, #0
 8003488:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800348a:	2300      	movs	r3, #0
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b002      	add	sp, #8
 8003492:	bd80      	pop	{r7, pc}
 8003494:	fffffeff 	.word	0xfffffeff
 8003498:	40020000 	.word	0x40020000

0800349c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034a4:	230f      	movs	r3, #15
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	2200      	movs	r2, #0
 80034aa:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2224      	movs	r2, #36	@ 0x24
 80034b0:	2100      	movs	r1, #0
 80034b2:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2224      	movs	r2, #36	@ 0x24
 80034b8:	5c9b      	ldrb	r3, [r3, r2]
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_DMA_Abort_IT+0x26>
 80034be:	2302      	movs	r3, #2
 80034c0:	e05e      	b.n	8003580 <HAL_DMA_Abort_IT+0xe4>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2224      	movs	r2, #36	@ 0x24
 80034c6:	2101      	movs	r1, #1
 80034c8:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2225      	movs	r2, #37	@ 0x25
 80034ce:	5c9b      	ldrb	r3, [r3, r2]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d007      	beq.n	80034e6 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2204      	movs	r2, #4
 80034da:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80034dc:	230f      	movs	r3, #15
 80034de:	18fb      	adds	r3, r7, r3
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]
 80034e4:	e049      	b.n	800357a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	210e      	movs	r1, #14
 80034f2:	438a      	bics	r2, r1
 80034f4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2101      	movs	r1, #1
 8003502:	438a      	bics	r2, r1
 8003504:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003510:	491d      	ldr	r1, [pc, #116]	@ (8003588 <HAL_DMA_Abort_IT+0xec>)
 8003512:	400a      	ands	r2, r1
 8003514:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8003516:	4b1d      	ldr	r3, [pc, #116]	@ (800358c <HAL_DMA_Abort_IT+0xf0>)
 8003518:	6859      	ldr	r1, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800351e:	221c      	movs	r2, #28
 8003520:	4013      	ands	r3, r2
 8003522:	2201      	movs	r2, #1
 8003524:	409a      	lsls	r2, r3
 8003526:	4b19      	ldr	r3, [pc, #100]	@ (800358c <HAL_DMA_Abort_IT+0xf0>)
 8003528:	430a      	orrs	r2, r1
 800352a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003530:	687a      	ldr	r2, [r7, #4]
 8003532:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003534:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800353a:	2b00      	cmp	r3, #0
 800353c:	d00c      	beq.n	8003558 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003548:	490f      	ldr	r1, [pc, #60]	@ (8003588 <HAL_DMA_Abort_IT+0xec>)
 800354a:	400a      	ands	r2, r1
 800354c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8003556:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2225      	movs	r2, #37	@ 0x25
 800355c:	2101      	movs	r1, #1
 800355e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2224      	movs	r2, #36	@ 0x24
 8003564:	2100      	movs	r1, #0
 8003566:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	0010      	movs	r0, r2
 8003578:	4798      	blx	r3
    }
  }
  return status;
 800357a:	230f      	movs	r3, #15
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	781b      	ldrb	r3, [r3, #0]
}
 8003580:	0018      	movs	r0, r3
 8003582:	46bd      	mov	sp, r7
 8003584:	b004      	add	sp, #16
 8003586:	bd80      	pop	{r7, pc}
 8003588:	fffffeff 	.word	0xfffffeff
 800358c:	40020000 	.word	0x40020000

08003590 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8003598:	4b55      	ldr	r3, [pc, #340]	@ (80036f0 <HAL_DMA_IRQHandler+0x160>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035aa:	221c      	movs	r2, #28
 80035ac:	4013      	ands	r3, r2
 80035ae:	2204      	movs	r2, #4
 80035b0:	409a      	lsls	r2, r3
 80035b2:	0013      	movs	r3, r2
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4013      	ands	r3, r2
 80035b8:	d027      	beq.n	800360a <HAL_DMA_IRQHandler+0x7a>
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	2204      	movs	r2, #4
 80035be:	4013      	ands	r3, r2
 80035c0:	d023      	beq.n	800360a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2220      	movs	r2, #32
 80035ca:	4013      	ands	r3, r2
 80035cc:	d107      	bne.n	80035de <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2104      	movs	r1, #4
 80035da:	438a      	bics	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 80035de:	4b44      	ldr	r3, [pc, #272]	@ (80036f0 <HAL_DMA_IRQHandler+0x160>)
 80035e0:	6859      	ldr	r1, [r3, #4]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e6:	221c      	movs	r2, #28
 80035e8:	4013      	ands	r3, r2
 80035ea:	2204      	movs	r2, #4
 80035ec:	409a      	lsls	r2, r3
 80035ee:	4b40      	ldr	r3, [pc, #256]	@ (80036f0 <HAL_DMA_IRQHandler+0x160>)
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d100      	bne.n	80035fe <HAL_DMA_IRQHandler+0x6e>
 80035fc:	e073      	b.n	80036e6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	0010      	movs	r0, r2
 8003606:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003608:	e06d      	b.n	80036e6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	221c      	movs	r2, #28
 8003610:	4013      	ands	r3, r2
 8003612:	2202      	movs	r2, #2
 8003614:	409a      	lsls	r2, r3
 8003616:	0013      	movs	r3, r2
 8003618:	68fa      	ldr	r2, [r7, #12]
 800361a:	4013      	ands	r3, r2
 800361c:	d02e      	beq.n	800367c <HAL_DMA_IRQHandler+0xec>
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	2202      	movs	r2, #2
 8003622:	4013      	ands	r3, r2
 8003624:	d02a      	beq.n	800367c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	2220      	movs	r2, #32
 800362e:	4013      	ands	r3, r2
 8003630:	d10b      	bne.n	800364a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	210a      	movs	r1, #10
 800363e:	438a      	bics	r2, r1
 8003640:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2225      	movs	r2, #37	@ 0x25
 8003646:	2101      	movs	r1, #1
 8003648:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800364a:	4b29      	ldr	r3, [pc, #164]	@ (80036f0 <HAL_DMA_IRQHandler+0x160>)
 800364c:	6859      	ldr	r1, [r3, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003652:	221c      	movs	r2, #28
 8003654:	4013      	ands	r3, r2
 8003656:	2202      	movs	r2, #2
 8003658:	409a      	lsls	r2, r3
 800365a:	4b25      	ldr	r3, [pc, #148]	@ (80036f0 <HAL_DMA_IRQHandler+0x160>)
 800365c:	430a      	orrs	r2, r1
 800365e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2224      	movs	r2, #36	@ 0x24
 8003664:	2100      	movs	r1, #0
 8003666:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d03a      	beq.n	80036e6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	0010      	movs	r0, r2
 8003678:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800367a:	e034      	b.n	80036e6 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003680:	221c      	movs	r2, #28
 8003682:	4013      	ands	r3, r2
 8003684:	2208      	movs	r2, #8
 8003686:	409a      	lsls	r2, r3
 8003688:	0013      	movs	r3, r2
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	4013      	ands	r3, r2
 800368e:	d02b      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x158>
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	2208      	movs	r2, #8
 8003694:	4013      	ands	r3, r2
 8003696:	d027      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	210e      	movs	r1, #14
 80036a4:	438a      	bics	r2, r1
 80036a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80036a8:	4b11      	ldr	r3, [pc, #68]	@ (80036f0 <HAL_DMA_IRQHandler+0x160>)
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	221c      	movs	r2, #28
 80036b2:	4013      	ands	r3, r2
 80036b4:	2201      	movs	r2, #1
 80036b6:	409a      	lsls	r2, r3
 80036b8:	4b0d      	ldr	r3, [pc, #52]	@ (80036f0 <HAL_DMA_IRQHandler+0x160>)
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2225      	movs	r2, #37	@ 0x25
 80036c8:	2101      	movs	r1, #1
 80036ca:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2224      	movs	r2, #36	@ 0x24
 80036d0:	2100      	movs	r1, #0
 80036d2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d005      	beq.n	80036e8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	0010      	movs	r0, r2
 80036e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036e6:	46c0      	nop			@ (mov r8, r8)
 80036e8:	46c0      	nop			@ (mov r8, r8)
}
 80036ea:	46bd      	mov	sp, r7
 80036ec:	b004      	add	sp, #16
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40020000 	.word	0x40020000

080036f4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	607a      	str	r2, [r7, #4]
 8003700:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003706:	68fa      	ldr	r2, [r7, #12]
 8003708:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800370a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003710:	2b00      	cmp	r3, #0
 8003712:	d004      	beq.n	800371e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003718:	68fa      	ldr	r2, [r7, #12]
 800371a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800371c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800371e:	4b14      	ldr	r3, [pc, #80]	@ (8003770 <DMA_SetConfig+0x7c>)
 8003720:	6859      	ldr	r1, [r3, #4]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003726:	221c      	movs	r2, #28
 8003728:	4013      	ands	r3, r2
 800372a:	2201      	movs	r2, #1
 800372c:	409a      	lsls	r2, r3
 800372e:	4b10      	ldr	r3, [pc, #64]	@ (8003770 <DMA_SetConfig+0x7c>)
 8003730:	430a      	orrs	r2, r1
 8003732:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b10      	cmp	r3, #16
 8003742:	d108      	bne.n	8003756 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	687a      	ldr	r2, [r7, #4]
 800374a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003754:	e007      	b.n	8003766 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	60da      	str	r2, [r3, #12]
}
 8003766:	46c0      	nop			@ (mov r8, r8)
 8003768:	46bd      	mov	sp, r7
 800376a:	b004      	add	sp, #16
 800376c:	bd80      	pop	{r7, pc}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	40020000 	.word	0x40020000

08003774 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	001a      	movs	r2, r3
 8003782:	23ff      	movs	r3, #255	@ 0xff
 8003784:	4013      	ands	r3, r2
 8003786:	3b08      	subs	r3, #8
 8003788:	2114      	movs	r1, #20
 800378a:	0018      	movs	r0, r3
 800378c:	f7fc fcce 	bl	800012c <__udivsi3>
 8003790:	0003      	movs	r3, r0
 8003792:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003798:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 800379a:	4a0a      	ldr	r2, [pc, #40]	@ (80037c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800379c:	4694      	mov	ip, r2
 800379e:	4463      	add	r3, ip
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	001a      	movs	r2, r3
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4a07      	ldr	r2, [pc, #28]	@ (80037c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80037ac:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	221c      	movs	r2, #28
 80037b2:	4013      	ands	r3, r2
 80037b4:	2201      	movs	r2, #1
 80037b6:	409a      	lsls	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80037bc:	46c0      	nop			@ (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b004      	add	sp, #16
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	10008200 	.word	0x10008200
 80037c8:	40020880 	.word	0x40020880

080037cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b084      	sub	sp, #16
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	22ff      	movs	r2, #255	@ 0xff
 80037da:	4013      	ands	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	4a0a      	ldr	r2, [pc, #40]	@ (800380c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80037e2:	4694      	mov	ip, r2
 80037e4:	4463      	add	r3, ip
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	001a      	movs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	4a07      	ldr	r2, [pc, #28]	@ (8003810 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80037f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	2203      	movs	r2, #3
 80037fa:	4013      	ands	r3, r2
 80037fc:	2201      	movs	r2, #1
 80037fe:	409a      	lsls	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003804:	46c0      	nop			@ (mov r8, r8)
 8003806:	46bd      	mov	sp, r7
 8003808:	b004      	add	sp, #16
 800380a:	bd80      	pop	{r7, pc}
 800380c:	1000823f 	.word	0x1000823f
 8003810:	40020940 	.word	0x40020940

08003814 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003822:	e153      	b.n	8003acc <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2101      	movs	r1, #1
 800382a:	693a      	ldr	r2, [r7, #16]
 800382c:	4091      	lsls	r1, r2
 800382e:	000a      	movs	r2, r1
 8003830:	4013      	ands	r3, r2
 8003832:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d100      	bne.n	800383c <HAL_GPIO_Init+0x28>
 800383a:	e144      	b.n	8003ac6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	2b02      	cmp	r3, #2
 8003842:	d003      	beq.n	800384c <HAL_GPIO_Init+0x38>
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b12      	cmp	r3, #18
 800384a:	d125      	bne.n	8003898 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	08da      	lsrs	r2, r3, #3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	3208      	adds	r2, #8
 8003854:	0092      	lsls	r2, r2, #2
 8003856:	58d3      	ldr	r3, [r2, r3]
 8003858:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	2207      	movs	r2, #7
 800385e:	4013      	ands	r3, r2
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	220f      	movs	r2, #15
 8003864:	409a      	lsls	r2, r3
 8003866:	0013      	movs	r3, r2
 8003868:	43da      	mvns	r2, r3
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4013      	ands	r3, r2
 800386e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	691b      	ldr	r3, [r3, #16]
 8003874:	220f      	movs	r2, #15
 8003876:	401a      	ands	r2, r3
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	2107      	movs	r1, #7
 800387c:	400b      	ands	r3, r1
 800387e:	009b      	lsls	r3, r3, #2
 8003880:	409a      	lsls	r2, r3
 8003882:	0013      	movs	r3, r2
 8003884:	697a      	ldr	r2, [r7, #20]
 8003886:	4313      	orrs	r3, r2
 8003888:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	08da      	lsrs	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3208      	adds	r2, #8
 8003892:	0092      	lsls	r2, r2, #2
 8003894:	6979      	ldr	r1, [r7, #20]
 8003896:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	005b      	lsls	r3, r3, #1
 80038a2:	2203      	movs	r2, #3
 80038a4:	409a      	lsls	r2, r3
 80038a6:	0013      	movs	r3, r2
 80038a8:	43da      	mvns	r2, r3
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	4013      	ands	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	2203      	movs	r2, #3
 80038b6:	401a      	ands	r2, r3
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	409a      	lsls	r2, r3
 80038be:	0013      	movs	r3, r2
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	697a      	ldr	r2, [r7, #20]
 80038ca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d00b      	beq.n	80038ec <HAL_GPIO_Init+0xd8>
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d007      	beq.n	80038ec <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80038e0:	2b11      	cmp	r3, #17
 80038e2:	d003      	beq.n	80038ec <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b12      	cmp	r3, #18
 80038ea:	d130      	bne.n	800394e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	409a      	lsls	r2, r3
 80038fa:	0013      	movs	r3, r2
 80038fc:	43da      	mvns	r2, r3
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	4013      	ands	r3, r2
 8003902:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68da      	ldr	r2, [r3, #12]
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	409a      	lsls	r2, r3
 800390e:	0013      	movs	r3, r2
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003922:	2201      	movs	r2, #1
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	409a      	lsls	r2, r3
 8003928:	0013      	movs	r3, r2
 800392a:	43da      	mvns	r2, r3
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	4013      	ands	r3, r2
 8003930:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	091b      	lsrs	r3, r3, #4
 8003938:	2201      	movs	r2, #1
 800393a:	401a      	ands	r2, r3
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	409a      	lsls	r2, r3
 8003940:	0013      	movs	r3, r2
 8003942:	697a      	ldr	r2, [r7, #20]
 8003944:	4313      	orrs	r3, r2
 8003946:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	697a      	ldr	r2, [r7, #20]
 800394c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d017      	beq.n	8003986 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	005b      	lsls	r3, r3, #1
 8003960:	2203      	movs	r2, #3
 8003962:	409a      	lsls	r2, r3
 8003964:	0013      	movs	r3, r2
 8003966:	43da      	mvns	r2, r3
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	4013      	ands	r3, r2
 800396c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	689a      	ldr	r2, [r3, #8]
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	409a      	lsls	r2, r3
 8003978:	0013      	movs	r3, r2
 800397a:	697a      	ldr	r2, [r7, #20]
 800397c:	4313      	orrs	r3, r2
 800397e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	697a      	ldr	r2, [r7, #20]
 8003984:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	685a      	ldr	r2, [r3, #4]
 800398a:	2380      	movs	r3, #128	@ 0x80
 800398c:	055b      	lsls	r3, r3, #21
 800398e:	4013      	ands	r3, r2
 8003990:	d100      	bne.n	8003994 <HAL_GPIO_Init+0x180>
 8003992:	e098      	b.n	8003ac6 <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003994:	4a53      	ldr	r2, [pc, #332]	@ (8003ae4 <HAL_GPIO_Init+0x2d0>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	089b      	lsrs	r3, r3, #2
 800399a:	3318      	adds	r3, #24
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	589b      	ldr	r3, [r3, r2]
 80039a0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	2203      	movs	r2, #3
 80039a6:	4013      	ands	r3, r2
 80039a8:	00db      	lsls	r3, r3, #3
 80039aa:	220f      	movs	r2, #15
 80039ac:	409a      	lsls	r2, r3
 80039ae:	0013      	movs	r3, r2
 80039b0:	43da      	mvns	r2, r3
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	4013      	ands	r3, r2
 80039b6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	23a0      	movs	r3, #160	@ 0xa0
 80039bc:	05db      	lsls	r3, r3, #23
 80039be:	429a      	cmp	r2, r3
 80039c0:	d019      	beq.n	80039f6 <HAL_GPIO_Init+0x1e2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a48      	ldr	r2, [pc, #288]	@ (8003ae8 <HAL_GPIO_Init+0x2d4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_GPIO_Init+0x1de>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a47      	ldr	r2, [pc, #284]	@ (8003aec <HAL_GPIO_Init+0x2d8>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00d      	beq.n	80039ee <HAL_GPIO_Init+0x1da>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a46      	ldr	r2, [pc, #280]	@ (8003af0 <HAL_GPIO_Init+0x2dc>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d007      	beq.n	80039ea <HAL_GPIO_Init+0x1d6>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a45      	ldr	r2, [pc, #276]	@ (8003af4 <HAL_GPIO_Init+0x2e0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <HAL_GPIO_Init+0x1d2>
 80039e2:	2305      	movs	r3, #5
 80039e4:	e008      	b.n	80039f8 <HAL_GPIO_Init+0x1e4>
 80039e6:	2306      	movs	r3, #6
 80039e8:	e006      	b.n	80039f8 <HAL_GPIO_Init+0x1e4>
 80039ea:	2303      	movs	r3, #3
 80039ec:	e004      	b.n	80039f8 <HAL_GPIO_Init+0x1e4>
 80039ee:	2302      	movs	r3, #2
 80039f0:	e002      	b.n	80039f8 <HAL_GPIO_Init+0x1e4>
 80039f2:	2301      	movs	r3, #1
 80039f4:	e000      	b.n	80039f8 <HAL_GPIO_Init+0x1e4>
 80039f6:	2300      	movs	r3, #0
 80039f8:	693a      	ldr	r2, [r7, #16]
 80039fa:	2103      	movs	r1, #3
 80039fc:	400a      	ands	r2, r1
 80039fe:	00d2      	lsls	r2, r2, #3
 8003a00:	4093      	lsls	r3, r2
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003a08:	4936      	ldr	r1, [pc, #216]	@ (8003ae4 <HAL_GPIO_Init+0x2d0>)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	089b      	lsrs	r3, r3, #2
 8003a0e:	3318      	adds	r3, #24
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8003a16:	4a33      	ldr	r2, [pc, #204]	@ (8003ae4 <HAL_GPIO_Init+0x2d0>)
 8003a18:	2380      	movs	r3, #128	@ 0x80
 8003a1a:	58d3      	ldr	r3, [r2, r3]
 8003a1c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	43da      	mvns	r2, r3
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	4013      	ands	r3, r2
 8003a26:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	2380      	movs	r3, #128	@ 0x80
 8003a2e:	025b      	lsls	r3, r3, #9
 8003a30:	4013      	ands	r3, r2
 8003a32:	d003      	beq.n	8003a3c <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8003a3c:	4929      	ldr	r1, [pc, #164]	@ (8003ae4 <HAL_GPIO_Init+0x2d0>)
 8003a3e:	2280      	movs	r2, #128	@ 0x80
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8003a44:	4a27      	ldr	r2, [pc, #156]	@ (8003ae4 <HAL_GPIO_Init+0x2d0>)
 8003a46:	2384      	movs	r3, #132	@ 0x84
 8003a48:	58d3      	ldr	r3, [r2, r3]
 8003a4a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	43da      	mvns	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	4013      	ands	r3, r2
 8003a54:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685a      	ldr	r2, [r3, #4]
 8003a5a:	2380      	movs	r3, #128	@ 0x80
 8003a5c:	029b      	lsls	r3, r3, #10
 8003a5e:	4013      	ands	r3, r2
 8003a60:	d003      	beq.n	8003a6a <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 8003a62:	697a      	ldr	r2, [r7, #20]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8003a6a:	491e      	ldr	r1, [pc, #120]	@ (8003ae4 <HAL_GPIO_Init+0x2d0>)
 8003a6c:	2284      	movs	r2, #132	@ 0x84
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003a72:	4b1c      	ldr	r3, [pc, #112]	@ (8003ae4 <HAL_GPIO_Init+0x2d0>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	43da      	mvns	r2, r3
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	2380      	movs	r3, #128	@ 0x80
 8003a88:	035b      	lsls	r3, r3, #13
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8003a96:	4b13      	ldr	r3, [pc, #76]	@ (8003ae4 <HAL_GPIO_Init+0x2d0>)
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003a9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ae4 <HAL_GPIO_Init+0x2d0>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	43da      	mvns	r2, r3
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	2380      	movs	r3, #128	@ 0x80
 8003ab2:	039b      	lsls	r3, r3, #14
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	d003      	beq.n	8003ac0 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003ac0:	4b08      	ldr	r3, [pc, #32]	@ (8003ae4 <HAL_GPIO_Init+0x2d0>)
 8003ac2:	697a      	ldr	r2, [r7, #20]
 8003ac4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	3301      	adds	r3, #1
 8003aca:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	40da      	lsrs	r2, r3
 8003ad4:	1e13      	subs	r3, r2, #0
 8003ad6:	d000      	beq.n	8003ada <HAL_GPIO_Init+0x2c6>
 8003ad8:	e6a4      	b.n	8003824 <HAL_GPIO_Init+0x10>
  }
}
 8003ada:	46c0      	nop			@ (mov r8, r8)
 8003adc:	46c0      	nop			@ (mov r8, r8)
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	b006      	add	sp, #24
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40021800 	.word	0x40021800
 8003ae8:	50000400 	.word	0x50000400
 8003aec:	50000800 	.word	0x50000800
 8003af0:	50000c00 	.word	0x50000c00
 8003af4:	50001400 	.word	0x50001400

08003af8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	000a      	movs	r2, r1
 8003b02:	1cbb      	adds	r3, r7, #2
 8003b04:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	1cba      	adds	r2, r7, #2
 8003b0c:	8812      	ldrh	r2, [r2, #0]
 8003b0e:	4013      	ands	r3, r2
 8003b10:	d004      	beq.n	8003b1c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003b12:	230f      	movs	r3, #15
 8003b14:	18fb      	adds	r3, r7, r3
 8003b16:	2201      	movs	r2, #1
 8003b18:	701a      	strb	r2, [r3, #0]
 8003b1a:	e003      	b.n	8003b24 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b1c:	230f      	movs	r3, #15
 8003b1e:	18fb      	adds	r3, r7, r3
 8003b20:	2200      	movs	r2, #0
 8003b22:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003b24:	230f      	movs	r3, #15
 8003b26:	18fb      	adds	r3, r7, r3
 8003b28:	781b      	ldrb	r3, [r3, #0]
}
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b004      	add	sp, #16
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b082      	sub	sp, #8
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	6078      	str	r0, [r7, #4]
 8003b3a:	0008      	movs	r0, r1
 8003b3c:	0011      	movs	r1, r2
 8003b3e:	1cbb      	adds	r3, r7, #2
 8003b40:	1c02      	adds	r2, r0, #0
 8003b42:	801a      	strh	r2, [r3, #0]
 8003b44:	1c7b      	adds	r3, r7, #1
 8003b46:	1c0a      	adds	r2, r1, #0
 8003b48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b4a:	1c7b      	adds	r3, r7, #1
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d004      	beq.n	8003b5c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b52:	1cbb      	adds	r3, r7, #2
 8003b54:	881a      	ldrh	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b5a:	e003      	b.n	8003b64 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b5c:	1cbb      	adds	r3, r7, #2
 8003b5e:	881a      	ldrh	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b64:	46c0      	nop			@ (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b086      	sub	sp, #24
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e1d0      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	2201      	movs	r2, #1
 8003b84:	4013      	ands	r3, r2
 8003b86:	d100      	bne.n	8003b8a <HAL_RCC_OscConfig+0x1e>
 8003b88:	e069      	b.n	8003c5e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b8a:	4bc8      	ldr	r3, [pc, #800]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2238      	movs	r2, #56	@ 0x38
 8003b90:	4013      	ands	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d105      	bne.n	8003ba6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d15d      	bne.n	8003c5e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e1bc      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	2380      	movs	r3, #128	@ 0x80
 8003bac:	025b      	lsls	r3, r3, #9
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d107      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x56>
 8003bb2:	4bbe      	ldr	r3, [pc, #760]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	4bbd      	ldr	r3, [pc, #756]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003bb8:	2180      	movs	r1, #128	@ 0x80
 8003bba:	0249      	lsls	r1, r1, #9
 8003bbc:	430a      	orrs	r2, r1
 8003bbe:	601a      	str	r2, [r3, #0]
 8003bc0:	e020      	b.n	8003c04 <HAL_RCC_OscConfig+0x98>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	23a0      	movs	r3, #160	@ 0xa0
 8003bc8:	02db      	lsls	r3, r3, #11
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d10e      	bne.n	8003bec <HAL_RCC_OscConfig+0x80>
 8003bce:	4bb7      	ldr	r3, [pc, #732]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	4bb6      	ldr	r3, [pc, #728]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003bd4:	2180      	movs	r1, #128	@ 0x80
 8003bd6:	02c9      	lsls	r1, r1, #11
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	601a      	str	r2, [r3, #0]
 8003bdc:	4bb3      	ldr	r3, [pc, #716]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	4bb2      	ldr	r3, [pc, #712]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003be2:	2180      	movs	r1, #128	@ 0x80
 8003be4:	0249      	lsls	r1, r1, #9
 8003be6:	430a      	orrs	r2, r1
 8003be8:	601a      	str	r2, [r3, #0]
 8003bea:	e00b      	b.n	8003c04 <HAL_RCC_OscConfig+0x98>
 8003bec:	4baf      	ldr	r3, [pc, #700]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	4bae      	ldr	r3, [pc, #696]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003bf2:	49af      	ldr	r1, [pc, #700]	@ (8003eb0 <HAL_RCC_OscConfig+0x344>)
 8003bf4:	400a      	ands	r2, r1
 8003bf6:	601a      	str	r2, [r3, #0]
 8003bf8:	4bac      	ldr	r3, [pc, #688]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	4bab      	ldr	r3, [pc, #684]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003bfe:	49ad      	ldr	r1, [pc, #692]	@ (8003eb4 <HAL_RCC_OscConfig+0x348>)
 8003c00:	400a      	ands	r2, r1
 8003c02:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d014      	beq.n	8003c36 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fe f956 	bl	8001ebc <HAL_GetTick>
 8003c10:	0003      	movs	r3, r0
 8003c12:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003c16:	f7fe f951 	bl	8001ebc <HAL_GetTick>
 8003c1a:	0002      	movs	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b64      	cmp	r3, #100	@ 0x64
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e17b      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c28:	4ba0      	ldr	r3, [pc, #640]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	2380      	movs	r3, #128	@ 0x80
 8003c2e:	029b      	lsls	r3, r3, #10
 8003c30:	4013      	ands	r3, r2
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0xaa>
 8003c34:	e013      	b.n	8003c5e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c36:	f7fe f941 	bl	8001ebc <HAL_GetTick>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8003c40:	f7fe f93c 	bl	8001ebc <HAL_GetTick>
 8003c44:	0002      	movs	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b64      	cmp	r3, #100	@ 0x64
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e166      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003c52:	4b96      	ldr	r3, [pc, #600]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	2380      	movs	r3, #128	@ 0x80
 8003c58:	029b      	lsls	r3, r3, #10
 8003c5a:	4013      	ands	r3, r2
 8003c5c:	d1f0      	bne.n	8003c40 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2202      	movs	r2, #2
 8003c64:	4013      	ands	r3, r2
 8003c66:	d100      	bne.n	8003c6a <HAL_RCC_OscConfig+0xfe>
 8003c68:	e086      	b.n	8003d78 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c6a:	4b90      	ldr	r3, [pc, #576]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	2238      	movs	r2, #56	@ 0x38
 8003c70:	4013      	ands	r3, r2
 8003c72:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d12f      	bne.n	8003cda <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d101      	bne.n	8003c86 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e14c      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c86:	4b89      	ldr	r3, [pc, #548]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4a8b      	ldr	r2, [pc, #556]	@ (8003eb8 <HAL_RCC_OscConfig+0x34c>)
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	0019      	movs	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	021a      	lsls	r2, r3, #8
 8003c96:	4b85      	ldr	r3, [pc, #532]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d112      	bne.n	8003cc8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ca2:	4b82      	ldr	r3, [pc, #520]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a85      	ldr	r2, [pc, #532]	@ (8003ebc <HAL_RCC_OscConfig+0x350>)
 8003ca8:	4013      	ands	r3, r2
 8003caa:	0019      	movs	r1, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	691a      	ldr	r2, [r3, #16]
 8003cb0:	4b7e      	ldr	r3, [pc, #504]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003cb6:	4b7d      	ldr	r3, [pc, #500]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	0adb      	lsrs	r3, r3, #11
 8003cbc:	2207      	movs	r2, #7
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	4a7f      	ldr	r2, [pc, #508]	@ (8003ec0 <HAL_RCC_OscConfig+0x354>)
 8003cc2:	40da      	lsrs	r2, r3
 8003cc4:	4b7f      	ldr	r3, [pc, #508]	@ (8003ec4 <HAL_RCC_OscConfig+0x358>)
 8003cc6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003cc8:	4b7f      	ldr	r3, [pc, #508]	@ (8003ec8 <HAL_RCC_OscConfig+0x35c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	0018      	movs	r0, r3
 8003cce:	f7fe f899 	bl	8001e04 <HAL_InitTick>
 8003cd2:	1e03      	subs	r3, r0, #0
 8003cd4:	d050      	beq.n	8003d78 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e122      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d030      	beq.n	8003d44 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ce2:	4b72      	ldr	r3, [pc, #456]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a75      	ldr	r2, [pc, #468]	@ (8003ebc <HAL_RCC_OscConfig+0x350>)
 8003ce8:	4013      	ands	r3, r2
 8003cea:	0019      	movs	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	4b6e      	ldr	r3, [pc, #440]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8003cf6:	4b6d      	ldr	r3, [pc, #436]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	4b6c      	ldr	r3, [pc, #432]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003cfc:	2180      	movs	r1, #128	@ 0x80
 8003cfe:	0049      	lsls	r1, r1, #1
 8003d00:	430a      	orrs	r2, r1
 8003d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d04:	f7fe f8da 	bl	8001ebc <HAL_GetTick>
 8003d08:	0003      	movs	r3, r0
 8003d0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003d0e:	f7fe f8d5 	bl	8001ebc <HAL_GetTick>
 8003d12:	0002      	movs	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e0ff      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d20:	4b62      	ldr	r3, [pc, #392]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	2380      	movs	r3, #128	@ 0x80
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4013      	ands	r3, r2
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2c:	4b5f      	ldr	r3, [pc, #380]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	4a61      	ldr	r2, [pc, #388]	@ (8003eb8 <HAL_RCC_OscConfig+0x34c>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	0019      	movs	r1, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	695b      	ldr	r3, [r3, #20]
 8003d3a:	021a      	lsls	r2, r3, #8
 8003d3c:	4b5b      	ldr	r3, [pc, #364]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	e019      	b.n	8003d78 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8003d44:	4b59      	ldr	r3, [pc, #356]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	4b58      	ldr	r3, [pc, #352]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003d4a:	4960      	ldr	r1, [pc, #384]	@ (8003ecc <HAL_RCC_OscConfig+0x360>)
 8003d4c:	400a      	ands	r2, r1
 8003d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d50:	f7fe f8b4 	bl	8001ebc <HAL_GetTick>
 8003d54:	0003      	movs	r3, r0
 8003d56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d58:	e008      	b.n	8003d6c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003d5a:	f7fe f8af 	bl	8001ebc <HAL_GetTick>
 8003d5e:	0002      	movs	r2, r0
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e0d9      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d6c:	4b4f      	ldr	r3, [pc, #316]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	2380      	movs	r3, #128	@ 0x80
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	4013      	ands	r3, r2
 8003d76:	d1f0      	bne.n	8003d5a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	2208      	movs	r2, #8
 8003d7e:	4013      	ands	r3, r2
 8003d80:	d042      	beq.n	8003e08 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003d82:	4b4a      	ldr	r3, [pc, #296]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2238      	movs	r2, #56	@ 0x38
 8003d88:	4013      	ands	r3, r2
 8003d8a:	2b18      	cmp	r3, #24
 8003d8c:	d105      	bne.n	8003d9a <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	699b      	ldr	r3, [r3, #24]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d138      	bne.n	8003e08 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e0c2      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d019      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003da2:	4b42      	ldr	r3, [pc, #264]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003da4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003da6:	4b41      	ldr	r3, [pc, #260]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003da8:	2101      	movs	r1, #1
 8003daa:	430a      	orrs	r2, r1
 8003dac:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dae:	f7fe f885 	bl	8001ebc <HAL_GetTick>
 8003db2:	0003      	movs	r3, r0
 8003db4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003db6:	e008      	b.n	8003dca <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003db8:	f7fe f880 	bl	8001ebc <HAL_GetTick>
 8003dbc:	0002      	movs	r2, r0
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	1ad3      	subs	r3, r2, r3
 8003dc2:	2b02      	cmp	r3, #2
 8003dc4:	d901      	bls.n	8003dca <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8003dc6:	2303      	movs	r3, #3
 8003dc8:	e0aa      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003dca:	4b38      	ldr	r3, [pc, #224]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003dcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003dce:	2202      	movs	r2, #2
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	d0f1      	beq.n	8003db8 <HAL_RCC_OscConfig+0x24c>
 8003dd4:	e018      	b.n	8003e08 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003dd6:	4b35      	ldr	r3, [pc, #212]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003dd8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003dda:	4b34      	ldr	r3, [pc, #208]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003ddc:	2101      	movs	r1, #1
 8003dde:	438a      	bics	r2, r1
 8003de0:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003de2:	f7fe f86b 	bl	8001ebc <HAL_GetTick>
 8003de6:	0003      	movs	r3, r0
 8003de8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003dea:	e008      	b.n	8003dfe <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003dec:	f7fe f866 	bl	8001ebc <HAL_GetTick>
 8003df0:	0002      	movs	r2, r0
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	1ad3      	subs	r3, r2, r3
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d901      	bls.n	8003dfe <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e090      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003dfe:	4b2b      	ldr	r3, [pc, #172]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003e00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e02:	2202      	movs	r2, #2
 8003e04:	4013      	ands	r3, r2
 8003e06:	d1f1      	bne.n	8003dec <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2204      	movs	r2, #4
 8003e0e:	4013      	ands	r3, r2
 8003e10:	d100      	bne.n	8003e14 <HAL_RCC_OscConfig+0x2a8>
 8003e12:	e084      	b.n	8003f1e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e14:	230f      	movs	r3, #15
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	2200      	movs	r2, #0
 8003e1a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003e1c:	4b23      	ldr	r3, [pc, #140]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003e1e:	689b      	ldr	r3, [r3, #8]
 8003e20:	2238      	movs	r2, #56	@ 0x38
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b20      	cmp	r3, #32
 8003e26:	d106      	bne.n	8003e36 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d000      	beq.n	8003e32 <HAL_RCC_OscConfig+0x2c6>
 8003e30:	e075      	b.n	8003f1e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e074      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d106      	bne.n	8003e4c <HAL_RCC_OscConfig+0x2e0>
 8003e3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003e40:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e42:	4b1a      	ldr	r3, [pc, #104]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003e44:	2101      	movs	r1, #1
 8003e46:	430a      	orrs	r2, r1
 8003e48:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e4a:	e01c      	b.n	8003e86 <HAL_RCC_OscConfig+0x31a>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	2b05      	cmp	r3, #5
 8003e52:	d10c      	bne.n	8003e6e <HAL_RCC_OscConfig+0x302>
 8003e54:	4b15      	ldr	r3, [pc, #84]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003e56:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e58:	4b14      	ldr	r3, [pc, #80]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003e5a:	2104      	movs	r1, #4
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e60:	4b12      	ldr	r3, [pc, #72]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003e62:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e64:	4b11      	ldr	r3, [pc, #68]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003e66:	2101      	movs	r1, #1
 8003e68:	430a      	orrs	r2, r1
 8003e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e6c:	e00b      	b.n	8003e86 <HAL_RCC_OscConfig+0x31a>
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003e70:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e72:	4b0e      	ldr	r3, [pc, #56]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003e74:	2101      	movs	r1, #1
 8003e76:	438a      	bics	r2, r1
 8003e78:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e7a:	4b0c      	ldr	r3, [pc, #48]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003e7c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003e7e:	4b0b      	ldr	r3, [pc, #44]	@ (8003eac <HAL_RCC_OscConfig+0x340>)
 8003e80:	2104      	movs	r1, #4
 8003e82:	438a      	bics	r2, r1
 8003e84:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d028      	beq.n	8003ee0 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fe f815 	bl	8001ebc <HAL_GetTick>
 8003e92:	0003      	movs	r3, r0
 8003e94:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003e96:	e01d      	b.n	8003ed4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e98:	f7fe f810 	bl	8001ebc <HAL_GetTick>
 8003e9c:	0002      	movs	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	4a0b      	ldr	r2, [pc, #44]	@ (8003ed0 <HAL_RCC_OscConfig+0x364>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d915      	bls.n	8003ed4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e039      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	fffeffff 	.word	0xfffeffff
 8003eb4:	fffbffff 	.word	0xfffbffff
 8003eb8:	ffff80ff 	.word	0xffff80ff
 8003ebc:	ffffc7ff 	.word	0xffffc7ff
 8003ec0:	02dc6c00 	.word	0x02dc6c00
 8003ec4:	2000000c 	.word	0x2000000c
 8003ec8:	20000010 	.word	0x20000010
 8003ecc:	fffffeff 	.word	0xfffffeff
 8003ed0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003ed4:	4b14      	ldr	r3, [pc, #80]	@ (8003f28 <HAL_RCC_OscConfig+0x3bc>)
 8003ed6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ed8:	2202      	movs	r2, #2
 8003eda:	4013      	ands	r3, r2
 8003edc:	d0dc      	beq.n	8003e98 <HAL_RCC_OscConfig+0x32c>
 8003ede:	e013      	b.n	8003f08 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fd ffec 	bl	8001ebc <HAL_GetTick>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003ee8:	e009      	b.n	8003efe <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eea:	f7fd ffe7 	bl	8001ebc <HAL_GetTick>
 8003eee:	0002      	movs	r2, r0
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8003f2c <HAL_RCC_OscConfig+0x3c0>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e010      	b.n	8003f20 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003efe:	4b0a      	ldr	r3, [pc, #40]	@ (8003f28 <HAL_RCC_OscConfig+0x3bc>)
 8003f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f02:	2202      	movs	r2, #2
 8003f04:	4013      	ands	r3, r2
 8003f06:	d1f0      	bne.n	8003eea <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003f08:	230f      	movs	r3, #15
 8003f0a:	18fb      	adds	r3, r7, r3
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d105      	bne.n	8003f1e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003f12:	4b05      	ldr	r3, [pc, #20]	@ (8003f28 <HAL_RCC_OscConfig+0x3bc>)
 8003f14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f16:	4b04      	ldr	r3, [pc, #16]	@ (8003f28 <HAL_RCC_OscConfig+0x3bc>)
 8003f18:	4905      	ldr	r1, [pc, #20]	@ (8003f30 <HAL_RCC_OscConfig+0x3c4>)
 8003f1a:	400a      	ands	r2, r1
 8003f1c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b006      	add	sp, #24
 8003f26:	bd80      	pop	{r7, pc}
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	00001388 	.word	0x00001388
 8003f30:	efffffff 	.word	0xefffffff

08003f34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d101      	bne.n	8003f48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e0e9      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f48:	4b76      	ldr	r3, [pc, #472]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2207      	movs	r2, #7
 8003f4e:	4013      	ands	r3, r2
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d91e      	bls.n	8003f94 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f56:	4b73      	ldr	r3, [pc, #460]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	2207      	movs	r2, #7
 8003f5c:	4393      	bics	r3, r2
 8003f5e:	0019      	movs	r1, r3
 8003f60:	4b70      	ldr	r3, [pc, #448]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003f62:	683a      	ldr	r2, [r7, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f68:	f7fd ffa8 	bl	8001ebc <HAL_GetTick>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f70:	e009      	b.n	8003f86 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003f72:	f7fd ffa3 	bl	8001ebc <HAL_GetTick>
 8003f76:	0002      	movs	r2, r0
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	4a6a      	ldr	r2, [pc, #424]	@ (8004128 <HAL_RCC_ClockConfig+0x1f4>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e0ca      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f86:	4b67      	ldr	r3, [pc, #412]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2207      	movs	r2, #7
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d1ee      	bne.n	8003f72 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	d017      	beq.n	8003fce <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	2204      	movs	r2, #4
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d008      	beq.n	8003fba <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fa8:	4b60      	ldr	r3, [pc, #384]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	4a60      	ldr	r2, [pc, #384]	@ (8004130 <HAL_RCC_ClockConfig+0x1fc>)
 8003fae:	401a      	ands	r2, r3
 8003fb0:	4b5e      	ldr	r3, [pc, #376]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8003fb2:	21b0      	movs	r1, #176	@ 0xb0
 8003fb4:	0109      	lsls	r1, r1, #4
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fba:	4b5c      	ldr	r3, [pc, #368]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	4a5d      	ldr	r2, [pc, #372]	@ (8004134 <HAL_RCC_ClockConfig+0x200>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	0019      	movs	r1, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	68da      	ldr	r2, [r3, #12]
 8003fc8:	4b58      	ldr	r3, [pc, #352]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d055      	beq.n	8004084 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8003fd8:	4b54      	ldr	r3, [pc, #336]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	221c      	movs	r2, #28
 8003fde:	4393      	bics	r3, r2
 8003fe0:	0019      	movs	r1, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689a      	ldr	r2, [r3, #8]
 8003fe6:	4b51      	ldr	r3, [pc, #324]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d107      	bne.n	8004004 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff4:	4b4d      	ldr	r3, [pc, #308]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	2380      	movs	r3, #128	@ 0x80
 8003ffa:	029b      	lsls	r3, r3, #10
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d11f      	bne.n	8004040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e08b      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d107      	bne.n	800401c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800400c:	4b47      	ldr	r3, [pc, #284]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	2380      	movs	r3, #128	@ 0x80
 8004012:	00db      	lsls	r3, r3, #3
 8004014:	4013      	ands	r3, r2
 8004016:	d113      	bne.n	8004040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e07f      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d106      	bne.n	8004032 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8004024:	4b41      	ldr	r3, [pc, #260]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8004026:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004028:	2202      	movs	r2, #2
 800402a:	4013      	ands	r3, r2
 800402c:	d108      	bne.n	8004040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e074      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8004032:	4b3e      	ldr	r3, [pc, #248]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8004034:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004036:	2202      	movs	r2, #2
 8004038:	4013      	ands	r3, r2
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e06d      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004040:	4b3a      	ldr	r3, [pc, #232]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2207      	movs	r2, #7
 8004046:	4393      	bics	r3, r2
 8004048:	0019      	movs	r1, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	4b37      	ldr	r3, [pc, #220]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004054:	f7fd ff32 	bl	8001ebc <HAL_GetTick>
 8004058:	0003      	movs	r3, r0
 800405a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405c:	e009      	b.n	8004072 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800405e:	f7fd ff2d 	bl	8001ebc <HAL_GetTick>
 8004062:	0002      	movs	r2, r0
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	1ad3      	subs	r3, r2, r3
 8004068:	4a2f      	ldr	r2, [pc, #188]	@ (8004128 <HAL_RCC_ClockConfig+0x1f4>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e054      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004072:	4b2e      	ldr	r3, [pc, #184]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2238      	movs	r2, #56	@ 0x38
 8004078:	401a      	ands	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	00db      	lsls	r3, r3, #3
 8004080:	429a      	cmp	r2, r3
 8004082:	d1ec      	bne.n	800405e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004084:	4b27      	ldr	r3, [pc, #156]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2207      	movs	r2, #7
 800408a:	4013      	ands	r3, r2
 800408c:	683a      	ldr	r2, [r7, #0]
 800408e:	429a      	cmp	r2, r3
 8004090:	d21e      	bcs.n	80040d0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004092:	4b24      	ldr	r3, [pc, #144]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2207      	movs	r2, #7
 8004098:	4393      	bics	r3, r2
 800409a:	0019      	movs	r1, r3
 800409c:	4b21      	ldr	r3, [pc, #132]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 800409e:	683a      	ldr	r2, [r7, #0]
 80040a0:	430a      	orrs	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040a4:	f7fd ff0a 	bl	8001ebc <HAL_GetTick>
 80040a8:	0003      	movs	r3, r0
 80040aa:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040ac:	e009      	b.n	80040c2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80040ae:	f7fd ff05 	bl	8001ebc <HAL_GetTick>
 80040b2:	0002      	movs	r2, r0
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004128 <HAL_RCC_ClockConfig+0x1f4>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d901      	bls.n	80040c2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80040be:	2303      	movs	r3, #3
 80040c0:	e02c      	b.n	800411c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040c2:	4b18      	ldr	r3, [pc, #96]	@ (8004124 <HAL_RCC_ClockConfig+0x1f0>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	2207      	movs	r2, #7
 80040c8:	4013      	ands	r3, r2
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d1ee      	bne.n	80040ae <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2204      	movs	r2, #4
 80040d6:	4013      	ands	r3, r2
 80040d8:	d009      	beq.n	80040ee <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040da:	4b14      	ldr	r3, [pc, #80]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	4a16      	ldr	r2, [pc, #88]	@ (8004138 <HAL_RCC_ClockConfig+0x204>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	0019      	movs	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	4b10      	ldr	r3, [pc, #64]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 80040ea:	430a      	orrs	r2, r1
 80040ec:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80040ee:	f000 f82b 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 80040f2:	0001      	movs	r1, r0
 80040f4:	4b0d      	ldr	r3, [pc, #52]	@ (800412c <HAL_RCC_ClockConfig+0x1f8>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	0a1b      	lsrs	r3, r3, #8
 80040fa:	220f      	movs	r2, #15
 80040fc:	401a      	ands	r2, r3
 80040fe:	4b0f      	ldr	r3, [pc, #60]	@ (800413c <HAL_RCC_ClockConfig+0x208>)
 8004100:	0092      	lsls	r2, r2, #2
 8004102:	58d3      	ldr	r3, [r2, r3]
 8004104:	221f      	movs	r2, #31
 8004106:	4013      	ands	r3, r2
 8004108:	000a      	movs	r2, r1
 800410a:	40da      	lsrs	r2, r3
 800410c:	4b0c      	ldr	r3, [pc, #48]	@ (8004140 <HAL_RCC_ClockConfig+0x20c>)
 800410e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004110:	4b0c      	ldr	r3, [pc, #48]	@ (8004144 <HAL_RCC_ClockConfig+0x210>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	0018      	movs	r0, r3
 8004116:	f7fd fe75 	bl	8001e04 <HAL_InitTick>
 800411a:	0003      	movs	r3, r0
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b004      	add	sp, #16
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40022000 	.word	0x40022000
 8004128:	00001388 	.word	0x00001388
 800412c:	40021000 	.word	0x40021000
 8004130:	ffff84ff 	.word	0xffff84ff
 8004134:	fffff0ff 	.word	0xfffff0ff
 8004138:	ffff8fff 	.word	0xffff8fff
 800413c:	08006e60 	.word	0x08006e60
 8004140:	2000000c 	.word	0x2000000c
 8004144:	20000010 	.word	0x20000010

08004148 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800414e:	4b1c      	ldr	r3, [pc, #112]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x78>)
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2238      	movs	r2, #56	@ 0x38
 8004154:	4013      	ands	r3, r2
 8004156:	d10f      	bne.n	8004178 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004158:	4b19      	ldr	r3, [pc, #100]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x78>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	0adb      	lsrs	r3, r3, #11
 800415e:	2207      	movs	r2, #7
 8004160:	4013      	ands	r3, r2
 8004162:	2201      	movs	r2, #1
 8004164:	409a      	lsls	r2, r3
 8004166:	0013      	movs	r3, r2
 8004168:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800416a:	6839      	ldr	r1, [r7, #0]
 800416c:	4815      	ldr	r0, [pc, #84]	@ (80041c4 <HAL_RCC_GetSysClockFreq+0x7c>)
 800416e:	f7fb ffdd 	bl	800012c <__udivsi3>
 8004172:	0003      	movs	r3, r0
 8004174:	607b      	str	r3, [r7, #4]
 8004176:	e01e      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004178:	4b11      	ldr	r3, [pc, #68]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x78>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2238      	movs	r2, #56	@ 0x38
 800417e:	4013      	ands	r3, r2
 8004180:	2b08      	cmp	r3, #8
 8004182:	d102      	bne.n	800418a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004184:	4b10      	ldr	r3, [pc, #64]	@ (80041c8 <HAL_RCC_GetSysClockFreq+0x80>)
 8004186:	607b      	str	r3, [r7, #4]
 8004188:	e015      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800418a:	4b0d      	ldr	r3, [pc, #52]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x78>)
 800418c:	689b      	ldr	r3, [r3, #8]
 800418e:	2238      	movs	r2, #56	@ 0x38
 8004190:	4013      	ands	r3, r2
 8004192:	2b20      	cmp	r3, #32
 8004194:	d103      	bne.n	800419e <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004196:	2380      	movs	r3, #128	@ 0x80
 8004198:	021b      	lsls	r3, r3, #8
 800419a:	607b      	str	r3, [r7, #4]
 800419c:	e00b      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800419e:	4b08      	ldr	r3, [pc, #32]	@ (80041c0 <HAL_RCC_GetSysClockFreq+0x78>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	2238      	movs	r2, #56	@ 0x38
 80041a4:	4013      	ands	r3, r2
 80041a6:	2b18      	cmp	r3, #24
 80041a8:	d103      	bne.n	80041b2 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80041aa:	23fa      	movs	r3, #250	@ 0xfa
 80041ac:	01db      	lsls	r3, r3, #7
 80041ae:	607b      	str	r3, [r7, #4]
 80041b0:	e001      	b.n	80041b6 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80041b2:	2300      	movs	r3, #0
 80041b4:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80041b6:	687b      	ldr	r3, [r7, #4]
}
 80041b8:	0018      	movs	r0, r3
 80041ba:	46bd      	mov	sp, r7
 80041bc:	b002      	add	sp, #8
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	40021000 	.word	0x40021000
 80041c4:	02dc6c00 	.word	0x02dc6c00
 80041c8:	007a1200 	.word	0x007a1200

080041cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80041d0:	4b02      	ldr	r3, [pc, #8]	@ (80041dc <HAL_RCC_GetHCLKFreq+0x10>)
 80041d2:	681b      	ldr	r3, [r3, #0]
}
 80041d4:	0018      	movs	r0, r3
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
 80041da:	46c0      	nop			@ (mov r8, r8)
 80041dc:	2000000c 	.word	0x2000000c

080041e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80041e4:	f7ff fff2 	bl	80041cc <HAL_RCC_GetHCLKFreq>
 80041e8:	0001      	movs	r1, r0
 80041ea:	4b07      	ldr	r3, [pc, #28]	@ (8004208 <HAL_RCC_GetPCLK1Freq+0x28>)
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	0b1b      	lsrs	r3, r3, #12
 80041f0:	2207      	movs	r2, #7
 80041f2:	401a      	ands	r2, r3
 80041f4:	4b05      	ldr	r3, [pc, #20]	@ (800420c <HAL_RCC_GetPCLK1Freq+0x2c>)
 80041f6:	0092      	lsls	r2, r2, #2
 80041f8:	58d3      	ldr	r3, [r2, r3]
 80041fa:	221f      	movs	r2, #31
 80041fc:	4013      	ands	r3, r2
 80041fe:	40d9      	lsrs	r1, r3
 8004200:	000b      	movs	r3, r1
}
 8004202:	0018      	movs	r0, r3
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}
 8004208:	40021000 	.word	0x40021000
 800420c:	08006ea0 	.word	0x08006ea0

08004210 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b086      	sub	sp, #24
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8004218:	2313      	movs	r3, #19
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	2200      	movs	r2, #0
 800421e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004220:	2312      	movs	r3, #18
 8004222:	18fb      	adds	r3, r7, r3
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	2380      	movs	r3, #128	@ 0x80
 800422e:	029b      	lsls	r3, r3, #10
 8004230:	4013      	ands	r3, r2
 8004232:	d100      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004234:	e079      	b.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004236:	2011      	movs	r0, #17
 8004238:	183b      	adds	r3, r7, r0
 800423a:	2200      	movs	r2, #0
 800423c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423e:	4b64      	ldr	r3, [pc, #400]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004240:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004242:	2380      	movs	r3, #128	@ 0x80
 8004244:	055b      	lsls	r3, r3, #21
 8004246:	4013      	ands	r3, r2
 8004248:	d110      	bne.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800424a:	4b61      	ldr	r3, [pc, #388]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800424c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800424e:	4b60      	ldr	r3, [pc, #384]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004250:	2180      	movs	r1, #128	@ 0x80
 8004252:	0549      	lsls	r1, r1, #21
 8004254:	430a      	orrs	r2, r1
 8004256:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004258:	4b5d      	ldr	r3, [pc, #372]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800425a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800425c:	2380      	movs	r3, #128	@ 0x80
 800425e:	055b      	lsls	r3, r3, #21
 8004260:	4013      	ands	r3, r2
 8004262:	60bb      	str	r3, [r7, #8]
 8004264:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004266:	183b      	adds	r3, r7, r0
 8004268:	2201      	movs	r2, #1
 800426a:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800426c:	4b58      	ldr	r3, [pc, #352]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800426e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004270:	23c0      	movs	r3, #192	@ 0xc0
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	4013      	ands	r3, r2
 8004276:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d019      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	699b      	ldr	r3, [r3, #24]
 8004282:	697a      	ldr	r2, [r7, #20]
 8004284:	429a      	cmp	r2, r3
 8004286:	d014      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8004288:	4b51      	ldr	r3, [pc, #324]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800428a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428c:	4a51      	ldr	r2, [pc, #324]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800428e:	4013      	ands	r3, r2
 8004290:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004292:	4b4f      	ldr	r3, [pc, #316]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004294:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8004296:	4b4e      	ldr	r3, [pc, #312]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004298:	2180      	movs	r1, #128	@ 0x80
 800429a:	0249      	lsls	r1, r1, #9
 800429c:	430a      	orrs	r2, r1
 800429e:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 80042a0:	4b4b      	ldr	r3, [pc, #300]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80042a4:	4b4a      	ldr	r3, [pc, #296]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042a6:	494c      	ldr	r1, [pc, #304]	@ (80043d8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80042a8:	400a      	ands	r2, r1
 80042aa:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 80042ac:	4b48      	ldr	r3, [pc, #288]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2201      	movs	r2, #1
 80042b6:	4013      	ands	r3, r2
 80042b8:	d016      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ba:	f7fd fdff 	bl	8001ebc <HAL_GetTick>
 80042be:	0003      	movs	r3, r0
 80042c0:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80042c2:	e00c      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c4:	f7fd fdfa 	bl	8001ebc <HAL_GetTick>
 80042c8:	0002      	movs	r2, r0
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	4a43      	ldr	r2, [pc, #268]	@ (80043dc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d904      	bls.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 80042d4:	2313      	movs	r3, #19
 80042d6:	18fb      	adds	r3, r7, r3
 80042d8:	2203      	movs	r2, #3
 80042da:	701a      	strb	r2, [r3, #0]
          break;
 80042dc:	e004      	b.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80042de:	4b3c      	ldr	r3, [pc, #240]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e2:	2202      	movs	r2, #2
 80042e4:	4013      	ands	r3, r2
 80042e6:	d0ed      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80042e8:	2313      	movs	r3, #19
 80042ea:	18fb      	adds	r3, r7, r3
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80042f2:	4b37      	ldr	r3, [pc, #220]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80042f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042f6:	4a37      	ldr	r2, [pc, #220]	@ (80043d4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80042f8:	4013      	ands	r3, r2
 80042fa:	0019      	movs	r1, r3
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	699a      	ldr	r2, [r3, #24]
 8004300:	4b33      	ldr	r3, [pc, #204]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004302:	430a      	orrs	r2, r1
 8004304:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004306:	e005      	b.n	8004314 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004308:	2312      	movs	r3, #18
 800430a:	18fb      	adds	r3, r7, r3
 800430c:	2213      	movs	r2, #19
 800430e:	18ba      	adds	r2, r7, r2
 8004310:	7812      	ldrb	r2, [r2, #0]
 8004312:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004314:	2311      	movs	r3, #17
 8004316:	18fb      	adds	r3, r7, r3
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	2b01      	cmp	r3, #1
 800431c:	d105      	bne.n	800432a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800431e:	4b2c      	ldr	r3, [pc, #176]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004320:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004322:	4b2b      	ldr	r3, [pc, #172]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004324:	492e      	ldr	r1, [pc, #184]	@ (80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004326:	400a      	ands	r2, r1
 8004328:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	2201      	movs	r2, #1
 8004330:	4013      	ands	r3, r2
 8004332:	d009      	beq.n	8004348 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004334:	4b26      	ldr	r3, [pc, #152]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004338:	2203      	movs	r2, #3
 800433a:	4393      	bics	r3, r2
 800433c:	0019      	movs	r1, r3
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	689a      	ldr	r2, [r3, #8]
 8004342:	4b23      	ldr	r3, [pc, #140]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004344:	430a      	orrs	r2, r1
 8004346:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2240      	movs	r2, #64	@ 0x40
 800434e:	4013      	ands	r3, r2
 8004350:	d009      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004352:	4b1f      	ldr	r3, [pc, #124]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004356:	4a23      	ldr	r2, [pc, #140]	@ (80043e4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004358:	4013      	ands	r3, r2
 800435a:	0019      	movs	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	4b1b      	ldr	r3, [pc, #108]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004362:	430a      	orrs	r2, r1
 8004364:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	2380      	movs	r3, #128	@ 0x80
 800436c:	01db      	lsls	r3, r3, #7
 800436e:	4013      	ands	r3, r2
 8004370:	d008      	beq.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004372:	4b17      	ldr	r3, [pc, #92]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004376:	009b      	lsls	r3, r3, #2
 8004378:	0899      	lsrs	r1, r3, #2
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695a      	ldr	r2, [r3, #20]
 800437e:	4b14      	ldr	r3, [pc, #80]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004380:	430a      	orrs	r2, r1
 8004382:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	2380      	movs	r3, #128	@ 0x80
 800438a:	011b      	lsls	r3, r3, #4
 800438c:	4013      	ands	r3, r2
 800438e:	d009      	beq.n	80043a4 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004390:	4b0f      	ldr	r3, [pc, #60]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004394:	4a14      	ldr	r2, [pc, #80]	@ (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004396:	4013      	ands	r3, r2
 8004398:	0019      	movs	r1, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	691a      	ldr	r2, [r3, #16]
 800439e:	4b0c      	ldr	r3, [pc, #48]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043a0:	430a      	orrs	r2, r1
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	da09      	bge.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 80043ac:	4b08      	ldr	r3, [pc, #32]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	22e0      	movs	r2, #224	@ 0xe0
 80043b2:	4393      	bics	r3, r2
 80043b4:	0019      	movs	r1, r3
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	685a      	ldr	r2, [r3, #4]
 80043ba:	4b05      	ldr	r3, [pc, #20]	@ (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043bc:	430a      	orrs	r2, r1
 80043be:	601a      	str	r2, [r3, #0]
  }
  return status;
 80043c0:	2312      	movs	r3, #18
 80043c2:	18fb      	adds	r3, r7, r3
 80043c4:	781b      	ldrb	r3, [r3, #0]
}
 80043c6:	0018      	movs	r0, r3
 80043c8:	46bd      	mov	sp, r7
 80043ca:	b006      	add	sp, #24
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	46c0      	nop			@ (mov r8, r8)
 80043d0:	40021000 	.word	0x40021000
 80043d4:	fffffcff 	.word	0xfffffcff
 80043d8:	fffeffff 	.word	0xfffeffff
 80043dc:	00001388 	.word	0x00001388
 80043e0:	efffffff 	.word	0xefffffff
 80043e4:	ffffcfff 	.word	0xffffcfff
 80043e8:	ffff3fff 	.word	0xffff3fff

080043ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e046      	b.n	800448c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2288      	movs	r2, #136	@ 0x88
 8004402:	589b      	ldr	r3, [r3, r2]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d107      	bne.n	8004418 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2284      	movs	r2, #132	@ 0x84
 800440c:	2100      	movs	r1, #0
 800440e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	0018      	movs	r0, r3
 8004414:	f7fd fb8c 	bl	8001b30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2288      	movs	r2, #136	@ 0x88
 800441c:	2124      	movs	r1, #36	@ 0x24
 800441e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2101      	movs	r1, #1
 800442c:	438a      	bics	r2, r1
 800442e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	0018      	movs	r0, r3
 800443c:	f000 fde8 	bl	8005010 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	0018      	movs	r0, r3
 8004444:	f000 fc66 	bl	8004d14 <UART_SetConfig>
 8004448:	0003      	movs	r3, r0
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	e01c      	b.n	800448c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	685a      	ldr	r2, [r3, #4]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	490d      	ldr	r1, [pc, #52]	@ (8004494 <HAL_UART_Init+0xa8>)
 800445e:	400a      	ands	r2, r1
 8004460:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689a      	ldr	r2, [r3, #8]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	212a      	movs	r1, #42	@ 0x2a
 800446e:	438a      	bics	r2, r1
 8004470:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	681a      	ldr	r2, [r3, #0]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2101      	movs	r1, #1
 800447e:	430a      	orrs	r2, r1
 8004480:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	0018      	movs	r0, r3
 8004486:	f000 fe77 	bl	8005178 <UART_CheckIdleState>
 800448a:	0003      	movs	r3, r0
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	b002      	add	sp, #8
 8004492:	bd80      	pop	{r7, pc}
 8004494:	ffffb7ff 	.word	0xffffb7ff

08004498 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b08a      	sub	sp, #40	@ 0x28
 800449c:	af02      	add	r7, sp, #8
 800449e:	60f8      	str	r0, [r7, #12]
 80044a0:	60b9      	str	r1, [r7, #8]
 80044a2:	603b      	str	r3, [r7, #0]
 80044a4:	1dbb      	adds	r3, r7, #6
 80044a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2288      	movs	r2, #136	@ 0x88
 80044ac:	589b      	ldr	r3, [r3, r2]
 80044ae:	2b20      	cmp	r3, #32
 80044b0:	d000      	beq.n	80044b4 <HAL_UART_Transmit+0x1c>
 80044b2:	e090      	b.n	80045d6 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <HAL_UART_Transmit+0x2a>
 80044ba:	1dbb      	adds	r3, r7, #6
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e088      	b.n	80045d8 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689a      	ldr	r2, [r3, #8]
 80044ca:	2380      	movs	r3, #128	@ 0x80
 80044cc:	015b      	lsls	r3, r3, #5
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d109      	bne.n	80044e6 <HAL_UART_Transmit+0x4e>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d105      	bne.n	80044e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80044da:	68bb      	ldr	r3, [r7, #8]
 80044dc:	2201      	movs	r2, #1
 80044de:	4013      	ands	r3, r2
 80044e0:	d001      	beq.n	80044e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e078      	b.n	80045d8 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2290      	movs	r2, #144	@ 0x90
 80044ea:	2100      	movs	r1, #0
 80044ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2288      	movs	r2, #136	@ 0x88
 80044f2:	2121      	movs	r1, #33	@ 0x21
 80044f4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044f6:	f7fd fce1 	bl	8001ebc <HAL_GetTick>
 80044fa:	0003      	movs	r3, r0
 80044fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1dba      	adds	r2, r7, #6
 8004502:	2154      	movs	r1, #84	@ 0x54
 8004504:	8812      	ldrh	r2, [r2, #0]
 8004506:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	1dba      	adds	r2, r7, #6
 800450c:	2156      	movs	r1, #86	@ 0x56
 800450e:	8812      	ldrh	r2, [r2, #0]
 8004510:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	2380      	movs	r3, #128	@ 0x80
 8004518:	015b      	lsls	r3, r3, #5
 800451a:	429a      	cmp	r2, r3
 800451c:	d108      	bne.n	8004530 <HAL_UART_Transmit+0x98>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	691b      	ldr	r3, [r3, #16]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8004526:	2300      	movs	r3, #0
 8004528:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	61bb      	str	r3, [r7, #24]
 800452e:	e003      	b.n	8004538 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004534:	2300      	movs	r3, #0
 8004536:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004538:	e030      	b.n	800459c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800453a:	697a      	ldr	r2, [r7, #20]
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	9300      	str	r3, [sp, #0]
 8004542:	0013      	movs	r3, r2
 8004544:	2200      	movs	r2, #0
 8004546:	2180      	movs	r1, #128	@ 0x80
 8004548:	f000 fec0 	bl	80052cc <UART_WaitOnFlagUntilTimeout>
 800454c:	1e03      	subs	r3, r0, #0
 800454e:	d005      	beq.n	800455c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2288      	movs	r2, #136	@ 0x88
 8004554:	2120      	movs	r1, #32
 8004556:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e03d      	b.n	80045d8 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10b      	bne.n	800457a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	881b      	ldrh	r3, [r3, #0]
 8004566:	001a      	movs	r2, r3
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	05d2      	lsls	r2, r2, #23
 800456e:	0dd2      	lsrs	r2, r2, #23
 8004570:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	3302      	adds	r3, #2
 8004576:	61bb      	str	r3, [r7, #24]
 8004578:	e007      	b.n	800458a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	781a      	ldrb	r2, [r3, #0]
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	3301      	adds	r3, #1
 8004588:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2256      	movs	r2, #86	@ 0x56
 800458e:	5a9b      	ldrh	r3, [r3, r2]
 8004590:	b29b      	uxth	r3, r3
 8004592:	3b01      	subs	r3, #1
 8004594:	b299      	uxth	r1, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2256      	movs	r2, #86	@ 0x56
 800459a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	2256      	movs	r2, #86	@ 0x56
 80045a0:	5a9b      	ldrh	r3, [r3, r2]
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1c8      	bne.n	800453a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045a8:	697a      	ldr	r2, [r7, #20]
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	0013      	movs	r3, r2
 80045b2:	2200      	movs	r2, #0
 80045b4:	2140      	movs	r1, #64	@ 0x40
 80045b6:	f000 fe89 	bl	80052cc <UART_WaitOnFlagUntilTimeout>
 80045ba:	1e03      	subs	r3, r0, #0
 80045bc:	d005      	beq.n	80045ca <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2288      	movs	r2, #136	@ 0x88
 80045c2:	2120      	movs	r1, #32
 80045c4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 80045c6:	2303      	movs	r3, #3
 80045c8:	e006      	b.n	80045d8 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2288      	movs	r2, #136	@ 0x88
 80045ce:	2120      	movs	r1, #32
 80045d0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80045d2:	2300      	movs	r3, #0
 80045d4:	e000      	b.n	80045d8 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 80045d6:	2302      	movs	r3, #2
  }
}
 80045d8:	0018      	movs	r0, r3
 80045da:	46bd      	mov	sp, r7
 80045dc:	b008      	add	sp, #32
 80045de:	bd80      	pop	{r7, pc}

080045e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	1dbb      	adds	r3, r7, #6
 80045ec:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	228c      	movs	r2, #140	@ 0x8c
 80045f2:	589b      	ldr	r3, [r3, r2]
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d145      	bne.n	8004684 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d003      	beq.n	8004606 <HAL_UART_Receive_IT+0x26>
 80045fe:	1dbb      	adds	r3, r7, #6
 8004600:	881b      	ldrh	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d101      	bne.n	800460a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004606:	2301      	movs	r3, #1
 8004608:	e03d      	b.n	8004686 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689a      	ldr	r2, [r3, #8]
 800460e:	2380      	movs	r3, #128	@ 0x80
 8004610:	015b      	lsls	r3, r3, #5
 8004612:	429a      	cmp	r2, r3
 8004614:	d109      	bne.n	800462a <HAL_UART_Receive_IT+0x4a>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d105      	bne.n	800462a <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2201      	movs	r2, #1
 8004622:	4013      	ands	r3, r2
 8004624:	d001      	beq.n	800462a <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e02d      	b.n	8004686 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2200      	movs	r2, #0
 800462e:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	2380      	movs	r3, #128	@ 0x80
 8004638:	041b      	lsls	r3, r3, #16
 800463a:	4013      	ands	r3, r2
 800463c:	d019      	beq.n	8004672 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800463e:	f3ef 8310 	mrs	r3, PRIMASK
 8004642:	613b      	str	r3, [r7, #16]
  return(result);
 8004644:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	2301      	movs	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f383 8810 	msr	PRIMASK, r3
}
 8004652:	46c0      	nop			@ (mov r8, r8)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2180      	movs	r1, #128	@ 0x80
 8004660:	04c9      	lsls	r1, r1, #19
 8004662:	430a      	orrs	r2, r1
 8004664:	601a      	str	r2, [r3, #0]
 8004666:	69fb      	ldr	r3, [r7, #28]
 8004668:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800466a:	69bb      	ldr	r3, [r7, #24]
 800466c:	f383 8810 	msr	PRIMASK, r3
}
 8004670:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004672:	1dbb      	adds	r3, r7, #6
 8004674:	881a      	ldrh	r2, [r3, #0]
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	0018      	movs	r0, r3
 800467c:	f000 fe90 	bl	80053a0 <UART_Start_Receive_IT>
 8004680:	0003      	movs	r3, r0
 8004682:	e000      	b.n	8004686 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8004684:	2302      	movs	r3, #2
  }
}
 8004686:	0018      	movs	r0, r3
 8004688:	46bd      	mov	sp, r7
 800468a:	b008      	add	sp, #32
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004690:	b5b0      	push	{r4, r5, r7, lr}
 8004692:	b0aa      	sub	sp, #168	@ 0xa8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	69db      	ldr	r3, [r3, #28]
 800469e:	22a4      	movs	r2, #164	@ 0xa4
 80046a0:	18b9      	adds	r1, r7, r2
 80046a2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	20a0      	movs	r0, #160	@ 0xa0
 80046ac:	1839      	adds	r1, r7, r0
 80046ae:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	249c      	movs	r4, #156	@ 0x9c
 80046b8:	1939      	adds	r1, r7, r4
 80046ba:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80046bc:	0011      	movs	r1, r2
 80046be:	18bb      	adds	r3, r7, r2
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4aa2      	ldr	r2, [pc, #648]	@ (800494c <HAL_UART_IRQHandler+0x2bc>)
 80046c4:	4013      	ands	r3, r2
 80046c6:	2298      	movs	r2, #152	@ 0x98
 80046c8:	18bd      	adds	r5, r7, r2
 80046ca:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 80046cc:	18bb      	adds	r3, r7, r2
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d11a      	bne.n	800470a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80046d4:	187b      	adds	r3, r7, r1
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	2220      	movs	r2, #32
 80046da:	4013      	ands	r3, r2
 80046dc:	d015      	beq.n	800470a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80046de:	183b      	adds	r3, r7, r0
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2220      	movs	r2, #32
 80046e4:	4013      	ands	r3, r2
 80046e6:	d105      	bne.n	80046f4 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80046e8:	193b      	adds	r3, r7, r4
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	2380      	movs	r3, #128	@ 0x80
 80046ee:	055b      	lsls	r3, r3, #21
 80046f0:	4013      	ands	r3, r2
 80046f2:	d00a      	beq.n	800470a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d100      	bne.n	80046fe <HAL_UART_IRQHandler+0x6e>
 80046fc:	e2dc      	b.n	8004cb8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004702:	687a      	ldr	r2, [r7, #4]
 8004704:	0010      	movs	r0, r2
 8004706:	4798      	blx	r3
      }
      return;
 8004708:	e2d6      	b.n	8004cb8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800470a:	2398      	movs	r3, #152	@ 0x98
 800470c:	18fb      	adds	r3, r7, r3
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d100      	bne.n	8004716 <HAL_UART_IRQHandler+0x86>
 8004714:	e122      	b.n	800495c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004716:	239c      	movs	r3, #156	@ 0x9c
 8004718:	18fb      	adds	r3, r7, r3
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a8c      	ldr	r2, [pc, #560]	@ (8004950 <HAL_UART_IRQHandler+0x2c0>)
 800471e:	4013      	ands	r3, r2
 8004720:	d106      	bne.n	8004730 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004722:	23a0      	movs	r3, #160	@ 0xa0
 8004724:	18fb      	adds	r3, r7, r3
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a8a      	ldr	r2, [pc, #552]	@ (8004954 <HAL_UART_IRQHandler+0x2c4>)
 800472a:	4013      	ands	r3, r2
 800472c:	d100      	bne.n	8004730 <HAL_UART_IRQHandler+0xa0>
 800472e:	e115      	b.n	800495c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004730:	23a4      	movs	r3, #164	@ 0xa4
 8004732:	18fb      	adds	r3, r7, r3
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2201      	movs	r2, #1
 8004738:	4013      	ands	r3, r2
 800473a:	d012      	beq.n	8004762 <HAL_UART_IRQHandler+0xd2>
 800473c:	23a0      	movs	r3, #160	@ 0xa0
 800473e:	18fb      	adds	r3, r7, r3
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	2380      	movs	r3, #128	@ 0x80
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	4013      	ands	r3, r2
 8004748:	d00b      	beq.n	8004762 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2201      	movs	r2, #1
 8004750:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2290      	movs	r2, #144	@ 0x90
 8004756:	589b      	ldr	r3, [r3, r2]
 8004758:	2201      	movs	r2, #1
 800475a:	431a      	orrs	r2, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2190      	movs	r1, #144	@ 0x90
 8004760:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004762:	23a4      	movs	r3, #164	@ 0xa4
 8004764:	18fb      	adds	r3, r7, r3
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2202      	movs	r2, #2
 800476a:	4013      	ands	r3, r2
 800476c:	d011      	beq.n	8004792 <HAL_UART_IRQHandler+0x102>
 800476e:	239c      	movs	r3, #156	@ 0x9c
 8004770:	18fb      	adds	r3, r7, r3
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2201      	movs	r2, #1
 8004776:	4013      	ands	r3, r2
 8004778:	d00b      	beq.n	8004792 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2202      	movs	r2, #2
 8004780:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2290      	movs	r2, #144	@ 0x90
 8004786:	589b      	ldr	r3, [r3, r2]
 8004788:	2204      	movs	r2, #4
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2190      	movs	r1, #144	@ 0x90
 8004790:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004792:	23a4      	movs	r3, #164	@ 0xa4
 8004794:	18fb      	adds	r3, r7, r3
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2204      	movs	r2, #4
 800479a:	4013      	ands	r3, r2
 800479c:	d011      	beq.n	80047c2 <HAL_UART_IRQHandler+0x132>
 800479e:	239c      	movs	r3, #156	@ 0x9c
 80047a0:	18fb      	adds	r3, r7, r3
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2201      	movs	r2, #1
 80047a6:	4013      	ands	r3, r2
 80047a8:	d00b      	beq.n	80047c2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2204      	movs	r2, #4
 80047b0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2290      	movs	r2, #144	@ 0x90
 80047b6:	589b      	ldr	r3, [r3, r2]
 80047b8:	2202      	movs	r2, #2
 80047ba:	431a      	orrs	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2190      	movs	r1, #144	@ 0x90
 80047c0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80047c2:	23a4      	movs	r3, #164	@ 0xa4
 80047c4:	18fb      	adds	r3, r7, r3
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2208      	movs	r2, #8
 80047ca:	4013      	ands	r3, r2
 80047cc:	d017      	beq.n	80047fe <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80047ce:	23a0      	movs	r3, #160	@ 0xa0
 80047d0:	18fb      	adds	r3, r7, r3
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2220      	movs	r2, #32
 80047d6:	4013      	ands	r3, r2
 80047d8:	d105      	bne.n	80047e6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80047da:	239c      	movs	r3, #156	@ 0x9c
 80047dc:	18fb      	adds	r3, r7, r3
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a5b      	ldr	r2, [pc, #364]	@ (8004950 <HAL_UART_IRQHandler+0x2c0>)
 80047e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80047e4:	d00b      	beq.n	80047fe <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2208      	movs	r2, #8
 80047ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2290      	movs	r2, #144	@ 0x90
 80047f2:	589b      	ldr	r3, [r3, r2]
 80047f4:	2208      	movs	r2, #8
 80047f6:	431a      	orrs	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2190      	movs	r1, #144	@ 0x90
 80047fc:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80047fe:	23a4      	movs	r3, #164	@ 0xa4
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	2380      	movs	r3, #128	@ 0x80
 8004806:	011b      	lsls	r3, r3, #4
 8004808:	4013      	ands	r3, r2
 800480a:	d013      	beq.n	8004834 <HAL_UART_IRQHandler+0x1a4>
 800480c:	23a0      	movs	r3, #160	@ 0xa0
 800480e:	18fb      	adds	r3, r7, r3
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	2380      	movs	r3, #128	@ 0x80
 8004814:	04db      	lsls	r3, r3, #19
 8004816:	4013      	ands	r3, r2
 8004818:	d00c      	beq.n	8004834 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2280      	movs	r2, #128	@ 0x80
 8004820:	0112      	lsls	r2, r2, #4
 8004822:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2290      	movs	r2, #144	@ 0x90
 8004828:	589b      	ldr	r3, [r3, r2]
 800482a:	2220      	movs	r2, #32
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2190      	movs	r1, #144	@ 0x90
 8004832:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2290      	movs	r2, #144	@ 0x90
 8004838:	589b      	ldr	r3, [r3, r2]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d100      	bne.n	8004840 <HAL_UART_IRQHandler+0x1b0>
 800483e:	e23d      	b.n	8004cbc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004840:	23a4      	movs	r3, #164	@ 0xa4
 8004842:	18fb      	adds	r3, r7, r3
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	2220      	movs	r2, #32
 8004848:	4013      	ands	r3, r2
 800484a:	d015      	beq.n	8004878 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800484c:	23a0      	movs	r3, #160	@ 0xa0
 800484e:	18fb      	adds	r3, r7, r3
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2220      	movs	r2, #32
 8004854:	4013      	ands	r3, r2
 8004856:	d106      	bne.n	8004866 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004858:	239c      	movs	r3, #156	@ 0x9c
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	2380      	movs	r3, #128	@ 0x80
 8004860:	055b      	lsls	r3, r3, #21
 8004862:	4013      	ands	r3, r2
 8004864:	d008      	beq.n	8004878 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004872:	687a      	ldr	r2, [r7, #4]
 8004874:	0010      	movs	r0, r2
 8004876:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2290      	movs	r2, #144	@ 0x90
 800487c:	589b      	ldr	r3, [r3, r2]
 800487e:	2194      	movs	r1, #148	@ 0x94
 8004880:	187a      	adds	r2, r7, r1
 8004882:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	2240      	movs	r2, #64	@ 0x40
 800488c:	4013      	ands	r3, r2
 800488e:	2b40      	cmp	r3, #64	@ 0x40
 8004890:	d004      	beq.n	800489c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004892:	187b      	adds	r3, r7, r1
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2228      	movs	r2, #40	@ 0x28
 8004898:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800489a:	d04c      	beq.n	8004936 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	0018      	movs	r0, r3
 80048a0:	f000 fea2 	bl	80055e8 <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	2240      	movs	r2, #64	@ 0x40
 80048ac:	4013      	ands	r3, r2
 80048ae:	2b40      	cmp	r3, #64	@ 0x40
 80048b0:	d13c      	bne.n	800492c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80048b2:	f3ef 8310 	mrs	r3, PRIMASK
 80048b6:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 80048b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ba:	2090      	movs	r0, #144	@ 0x90
 80048bc:	183a      	adds	r2, r7, r0
 80048be:	6013      	str	r3, [r2, #0]
 80048c0:	2301      	movs	r3, #1
 80048c2:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048c6:	f383 8810 	msr	PRIMASK, r3
}
 80048ca:	46c0      	nop			@ (mov r8, r8)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2140      	movs	r1, #64	@ 0x40
 80048d8:	438a      	bics	r2, r1
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	183b      	adds	r3, r7, r0
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80048e4:	f383 8810 	msr	PRIMASK, r3
}
 80048e8:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2280      	movs	r2, #128	@ 0x80
 80048ee:	589b      	ldr	r3, [r3, r2]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d016      	beq.n	8004922 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2280      	movs	r2, #128	@ 0x80
 80048f8:	589b      	ldr	r3, [r3, r2]
 80048fa:	4a17      	ldr	r2, [pc, #92]	@ (8004958 <HAL_UART_IRQHandler+0x2c8>)
 80048fc:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2280      	movs	r2, #128	@ 0x80
 8004902:	589b      	ldr	r3, [r3, r2]
 8004904:	0018      	movs	r0, r3
 8004906:	f7fe fdc9 	bl	800349c <HAL_DMA_Abort_IT>
 800490a:	1e03      	subs	r3, r0, #0
 800490c:	d01c      	beq.n	8004948 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2280      	movs	r2, #128	@ 0x80
 8004912:	589b      	ldr	r3, [r3, r2]
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	2180      	movs	r1, #128	@ 0x80
 800491a:	5852      	ldr	r2, [r2, r1]
 800491c:	0010      	movs	r0, r2
 800491e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004920:	e012      	b.n	8004948 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	0018      	movs	r0, r3
 8004926:	f000 f9e1 	bl	8004cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492a:	e00d      	b.n	8004948 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	0018      	movs	r0, r3
 8004930:	f000 f9dc 	bl	8004cec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004934:	e008      	b.n	8004948 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	0018      	movs	r0, r3
 800493a:	f000 f9d7 	bl	8004cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2290      	movs	r2, #144	@ 0x90
 8004942:	2100      	movs	r1, #0
 8004944:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004946:	e1b9      	b.n	8004cbc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004948:	46c0      	nop			@ (mov r8, r8)
    return;
 800494a:	e1b7      	b.n	8004cbc <HAL_UART_IRQHandler+0x62c>
 800494c:	0000080f 	.word	0x0000080f
 8004950:	10000001 	.word	0x10000001
 8004954:	04000120 	.word	0x04000120
 8004958:	080056b5 	.word	0x080056b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004960:	2b01      	cmp	r3, #1
 8004962:	d000      	beq.n	8004966 <HAL_UART_IRQHandler+0x2d6>
 8004964:	e13e      	b.n	8004be4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004966:	23a4      	movs	r3, #164	@ 0xa4
 8004968:	18fb      	adds	r3, r7, r3
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2210      	movs	r2, #16
 800496e:	4013      	ands	r3, r2
 8004970:	d100      	bne.n	8004974 <HAL_UART_IRQHandler+0x2e4>
 8004972:	e137      	b.n	8004be4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004974:	23a0      	movs	r3, #160	@ 0xa0
 8004976:	18fb      	adds	r3, r7, r3
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2210      	movs	r2, #16
 800497c:	4013      	ands	r3, r2
 800497e:	d100      	bne.n	8004982 <HAL_UART_IRQHandler+0x2f2>
 8004980:	e130      	b.n	8004be4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2210      	movs	r2, #16
 8004988:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	2240      	movs	r2, #64	@ 0x40
 8004992:	4013      	ands	r3, r2
 8004994:	2b40      	cmp	r3, #64	@ 0x40
 8004996:	d000      	beq.n	800499a <HAL_UART_IRQHandler+0x30a>
 8004998:	e0a4      	b.n	8004ae4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2280      	movs	r2, #128	@ 0x80
 800499e:	589b      	ldr	r3, [r3, r2]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	217e      	movs	r1, #126	@ 0x7e
 80049a6:	187b      	adds	r3, r7, r1
 80049a8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80049aa:	187b      	adds	r3, r7, r1
 80049ac:	881b      	ldrh	r3, [r3, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d100      	bne.n	80049b4 <HAL_UART_IRQHandler+0x324>
 80049b2:	e185      	b.n	8004cc0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	225c      	movs	r2, #92	@ 0x5c
 80049b8:	5a9b      	ldrh	r3, [r3, r2]
 80049ba:	187a      	adds	r2, r7, r1
 80049bc:	8812      	ldrh	r2, [r2, #0]
 80049be:	429a      	cmp	r2, r3
 80049c0:	d300      	bcc.n	80049c4 <HAL_UART_IRQHandler+0x334>
 80049c2:	e17d      	b.n	8004cc0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	187a      	adds	r2, r7, r1
 80049c8:	215e      	movs	r1, #94	@ 0x5e
 80049ca:	8812      	ldrh	r2, [r2, #0]
 80049cc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2280      	movs	r2, #128	@ 0x80
 80049d2:	589b      	ldr	r3, [r3, r2]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2220      	movs	r2, #32
 80049da:	4013      	ands	r3, r2
 80049dc:	d170      	bne.n	8004ac0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80049de:	f3ef 8310 	mrs	r3, PRIMASK
 80049e2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80049e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80049e8:	2301      	movs	r3, #1
 80049ea:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049ee:	f383 8810 	msr	PRIMASK, r3
}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	49b4      	ldr	r1, [pc, #720]	@ (8004cd0 <HAL_UART_IRQHandler+0x640>)
 8004a00:	400a      	ands	r2, r1
 8004a02:	601a      	str	r2, [r3, #0]
 8004a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a06:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a0a:	f383 8810 	msr	PRIMASK, r3
}
 8004a0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a10:	f3ef 8310 	mrs	r3, PRIMASK
 8004a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8004a16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a18:	677b      	str	r3, [r7, #116]	@ 0x74
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004a20:	f383 8810 	msr	PRIMASK, r3
}
 8004a24:	46c0      	nop			@ (mov r8, r8)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	689a      	ldr	r2, [r3, #8]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2101      	movs	r1, #1
 8004a32:	438a      	bics	r2, r1
 8004a34:	609a      	str	r2, [r3, #8]
 8004a36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a38:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a3c:	f383 8810 	msr	PRIMASK, r3
}
 8004a40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a42:	f3ef 8310 	mrs	r3, PRIMASK
 8004a46:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8004a48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4a:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a52:	f383 8810 	msr	PRIMASK, r3
}
 8004a56:	46c0      	nop			@ (mov r8, r8)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	689a      	ldr	r2, [r3, #8]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2140      	movs	r1, #64	@ 0x40
 8004a64:	438a      	bics	r2, r1
 8004a66:	609a      	str	r2, [r3, #8]
 8004a68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004a6a:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a6c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a6e:	f383 8810 	msr	PRIMASK, r3
}
 8004a72:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	228c      	movs	r2, #140	@ 0x8c
 8004a78:	2120      	movs	r1, #32
 8004a7a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a82:	f3ef 8310 	mrs	r3, PRIMASK
 8004a86:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8004a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a90:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a92:	f383 8810 	msr	PRIMASK, r3
}
 8004a96:	46c0      	nop			@ (mov r8, r8)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2110      	movs	r1, #16
 8004aa4:	438a      	bics	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004aae:	f383 8810 	msr	PRIMASK, r3
}
 8004ab2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2280      	movs	r2, #128	@ 0x80
 8004ab8:	589b      	ldr	r3, [r3, r2]
 8004aba:	0018      	movs	r0, r3
 8004abc:	f7fe fc8c 	bl	80033d8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2202      	movs	r2, #2
 8004ac4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	225c      	movs	r2, #92	@ 0x5c
 8004aca:	5a9a      	ldrh	r2, [r3, r2]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	215e      	movs	r1, #94	@ 0x5e
 8004ad0:	5a5b      	ldrh	r3, [r3, r1]
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	1ad3      	subs	r3, r2, r3
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	0011      	movs	r1, r2
 8004adc:	0018      	movs	r0, r3
 8004ade:	f000 f90d 	bl	8004cfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ae2:	e0ed      	b.n	8004cc0 <HAL_UART_IRQHandler+0x630>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	225c      	movs	r2, #92	@ 0x5c
 8004ae8:	5a99      	ldrh	r1, [r3, r2]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	225e      	movs	r2, #94	@ 0x5e
 8004aee:	5a9b      	ldrh	r3, [r3, r2]
 8004af0:	b29a      	uxth	r2, r3
 8004af2:	208e      	movs	r0, #142	@ 0x8e
 8004af4:	183b      	adds	r3, r7, r0
 8004af6:	1a8a      	subs	r2, r1, r2
 8004af8:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	225e      	movs	r2, #94	@ 0x5e
 8004afe:	5a9b      	ldrh	r3, [r3, r2]
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d100      	bne.n	8004b08 <HAL_UART_IRQHandler+0x478>
 8004b06:	e0dd      	b.n	8004cc4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8004b08:	183b      	adds	r3, r7, r0
 8004b0a:	881b      	ldrh	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d100      	bne.n	8004b12 <HAL_UART_IRQHandler+0x482>
 8004b10:	e0d8      	b.n	8004cc4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b12:	f3ef 8310 	mrs	r3, PRIMASK
 8004b16:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b18:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004b1a:	2488      	movs	r4, #136	@ 0x88
 8004b1c:	193a      	adds	r2, r7, r4
 8004b1e:	6013      	str	r3, [r2, #0]
 8004b20:	2301      	movs	r3, #1
 8004b22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	f383 8810 	msr	PRIMASK, r3
}
 8004b2a:	46c0      	nop			@ (mov r8, r8)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4967      	ldr	r1, [pc, #412]	@ (8004cd4 <HAL_UART_IRQHandler+0x644>)
 8004b38:	400a      	ands	r2, r1
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	193b      	adds	r3, r7, r4
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f383 8810 	msr	PRIMASK, r3
}
 8004b48:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b4a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b4e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004b50:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004b52:	2484      	movs	r4, #132	@ 0x84
 8004b54:	193a      	adds	r2, r7, r4
 8004b56:	6013      	str	r3, [r2, #0]
 8004b58:	2301      	movs	r3, #1
 8004b5a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b5c:	69fb      	ldr	r3, [r7, #28]
 8004b5e:	f383 8810 	msr	PRIMASK, r3
}
 8004b62:	46c0      	nop			@ (mov r8, r8)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689a      	ldr	r2, [r3, #8]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	495a      	ldr	r1, [pc, #360]	@ (8004cd8 <HAL_UART_IRQHandler+0x648>)
 8004b70:	400a      	ands	r2, r1
 8004b72:	609a      	str	r2, [r3, #8]
 8004b74:	193b      	adds	r3, r7, r4
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b7a:	6a3b      	ldr	r3, [r7, #32]
 8004b7c:	f383 8810 	msr	PRIMASK, r3
}
 8004b80:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	228c      	movs	r2, #140	@ 0x8c
 8004b86:	2120      	movs	r1, #32
 8004b88:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004b96:	f3ef 8310 	mrs	r3, PRIMASK
 8004b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9e:	2480      	movs	r4, #128	@ 0x80
 8004ba0:	193a      	adds	r2, r7, r4
 8004ba2:	6013      	str	r3, [r2, #0]
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004baa:	f383 8810 	msr	PRIMASK, r3
}
 8004bae:	46c0      	nop			@ (mov r8, r8)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2110      	movs	r1, #16
 8004bbc:	438a      	bics	r2, r1
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	193b      	adds	r3, r7, r4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc8:	f383 8810 	msr	PRIMASK, r3
}
 8004bcc:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004bd4:	183b      	adds	r3, r7, r0
 8004bd6:	881a      	ldrh	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	0011      	movs	r1, r2
 8004bdc:	0018      	movs	r0, r3
 8004bde:	f000 f88d 	bl	8004cfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004be2:	e06f      	b.n	8004cc4 <HAL_UART_IRQHandler+0x634>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004be4:	23a4      	movs	r3, #164	@ 0xa4
 8004be6:	18fb      	adds	r3, r7, r3
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	2380      	movs	r3, #128	@ 0x80
 8004bec:	035b      	lsls	r3, r3, #13
 8004bee:	4013      	ands	r3, r2
 8004bf0:	d010      	beq.n	8004c14 <HAL_UART_IRQHandler+0x584>
 8004bf2:	239c      	movs	r3, #156	@ 0x9c
 8004bf4:	18fb      	adds	r3, r7, r3
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	2380      	movs	r3, #128	@ 0x80
 8004bfa:	03db      	lsls	r3, r3, #15
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	d009      	beq.n	8004c14 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2280      	movs	r2, #128	@ 0x80
 8004c06:	0352      	lsls	r2, r2, #13
 8004c08:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	0018      	movs	r0, r3
 8004c0e:	f001 fa89 	bl	8006124 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c12:	e05a      	b.n	8004cca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004c14:	23a4      	movs	r3, #164	@ 0xa4
 8004c16:	18fb      	adds	r3, r7, r3
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2280      	movs	r2, #128	@ 0x80
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	d016      	beq.n	8004c4e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004c20:	23a0      	movs	r3, #160	@ 0xa0
 8004c22:	18fb      	adds	r3, r7, r3
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2280      	movs	r2, #128	@ 0x80
 8004c28:	4013      	ands	r3, r2
 8004c2a:	d106      	bne.n	8004c3a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004c2c:	239c      	movs	r3, #156	@ 0x9c
 8004c2e:	18fb      	adds	r3, r7, r3
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	2380      	movs	r3, #128	@ 0x80
 8004c34:	041b      	lsls	r3, r3, #16
 8004c36:	4013      	ands	r3, r2
 8004c38:	d009      	beq.n	8004c4e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d042      	beq.n	8004cc8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	0010      	movs	r0, r2
 8004c4a:	4798      	blx	r3
    }
    return;
 8004c4c:	e03c      	b.n	8004cc8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004c4e:	23a4      	movs	r3, #164	@ 0xa4
 8004c50:	18fb      	adds	r3, r7, r3
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2240      	movs	r2, #64	@ 0x40
 8004c56:	4013      	ands	r3, r2
 8004c58:	d00a      	beq.n	8004c70 <HAL_UART_IRQHandler+0x5e0>
 8004c5a:	23a0      	movs	r3, #160	@ 0xa0
 8004c5c:	18fb      	adds	r3, r7, r3
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2240      	movs	r2, #64	@ 0x40
 8004c62:	4013      	ands	r3, r2
 8004c64:	d004      	beq.n	8004c70 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f000 fd3a 	bl	80056e2 <UART_EndTransmit_IT>
    return;
 8004c6e:	e02c      	b.n	8004cca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004c70:	23a4      	movs	r3, #164	@ 0xa4
 8004c72:	18fb      	adds	r3, r7, r3
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	2380      	movs	r3, #128	@ 0x80
 8004c78:	041b      	lsls	r3, r3, #16
 8004c7a:	4013      	ands	r3, r2
 8004c7c:	d00b      	beq.n	8004c96 <HAL_UART_IRQHandler+0x606>
 8004c7e:	23a0      	movs	r3, #160	@ 0xa0
 8004c80:	18fb      	adds	r3, r7, r3
 8004c82:	681a      	ldr	r2, [r3, #0]
 8004c84:	2380      	movs	r3, #128	@ 0x80
 8004c86:	05db      	lsls	r3, r3, #23
 8004c88:	4013      	ands	r3, r2
 8004c8a:	d004      	beq.n	8004c96 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	0018      	movs	r0, r3
 8004c90:	f001 fa58 	bl	8006144 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004c94:	e019      	b.n	8004cca <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004c96:	23a4      	movs	r3, #164	@ 0xa4
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	2380      	movs	r3, #128	@ 0x80
 8004c9e:	045b      	lsls	r3, r3, #17
 8004ca0:	4013      	ands	r3, r2
 8004ca2:	d012      	beq.n	8004cca <HAL_UART_IRQHandler+0x63a>
 8004ca4:	23a0      	movs	r3, #160	@ 0xa0
 8004ca6:	18fb      	adds	r3, r7, r3
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	da0d      	bge.n	8004cca <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	0018      	movs	r0, r3
 8004cb2:	f001 fa3f 	bl	8006134 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cb6:	e008      	b.n	8004cca <HAL_UART_IRQHandler+0x63a>
      return;
 8004cb8:	46c0      	nop			@ (mov r8, r8)
 8004cba:	e006      	b.n	8004cca <HAL_UART_IRQHandler+0x63a>
    return;
 8004cbc:	46c0      	nop			@ (mov r8, r8)
 8004cbe:	e004      	b.n	8004cca <HAL_UART_IRQHandler+0x63a>
      return;
 8004cc0:	46c0      	nop			@ (mov r8, r8)
 8004cc2:	e002      	b.n	8004cca <HAL_UART_IRQHandler+0x63a>
      return;
 8004cc4:	46c0      	nop			@ (mov r8, r8)
 8004cc6:	e000      	b.n	8004cca <HAL_UART_IRQHandler+0x63a>
    return;
 8004cc8:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	b02a      	add	sp, #168	@ 0xa8
 8004cce:	bdb0      	pop	{r4, r5, r7, pc}
 8004cd0:	fffffeff 	.word	0xfffffeff
 8004cd4:	fffffedf 	.word	0xfffffedf
 8004cd8:	effffffe 	.word	0xeffffffe

08004cdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b082      	sub	sp, #8
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004ce4:	46c0      	nop			@ (mov r8, r8)
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b002      	add	sp, #8
 8004cea:	bd80      	pop	{r7, pc}

08004cec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004cf4:	46c0      	nop			@ (mov r8, r8)
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	b002      	add	sp, #8
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	000a      	movs	r2, r1
 8004d06:	1cbb      	adds	r3, r7, #2
 8004d08:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d0a:	46c0      	nop			@ (mov r8, r8)
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	b002      	add	sp, #8
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b088      	sub	sp, #32
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004d1c:	231e      	movs	r3, #30
 8004d1e:	18fb      	adds	r3, r7, r3
 8004d20:	2200      	movs	r2, #0
 8004d22:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	689a      	ldr	r2, [r3, #8]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	431a      	orrs	r2, r3
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	431a      	orrs	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4aab      	ldr	r2, [pc, #684]	@ (8004ff0 <UART_SetConfig+0x2dc>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	0019      	movs	r1, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	697a      	ldr	r2, [r7, #20]
 8004d4e:	430a      	orrs	r2, r1
 8004d50:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	4aa6      	ldr	r2, [pc, #664]	@ (8004ff4 <UART_SetConfig+0x2e0>)
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	0019      	movs	r1, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	699b      	ldr	r3, [r3, #24]
 8004d6e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a1b      	ldr	r3, [r3, #32]
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	4a9d      	ldr	r2, [pc, #628]	@ (8004ff8 <UART_SetConfig+0x2e4>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	0019      	movs	r1, r3
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	220f      	movs	r2, #15
 8004d98:	4393      	bics	r3, r2
 8004d9a:	0019      	movs	r1, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	430a      	orrs	r2, r1
 8004da6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a93      	ldr	r2, [pc, #588]	@ (8004ffc <UART_SetConfig+0x2e8>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d127      	bne.n	8004e02 <UART_SetConfig+0xee>
 8004db2:	4b93      	ldr	r3, [pc, #588]	@ (8005000 <UART_SetConfig+0x2ec>)
 8004db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db6:	2203      	movs	r2, #3
 8004db8:	4013      	ands	r3, r2
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d017      	beq.n	8004dee <UART_SetConfig+0xda>
 8004dbe:	d81b      	bhi.n	8004df8 <UART_SetConfig+0xe4>
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d00a      	beq.n	8004dda <UART_SetConfig+0xc6>
 8004dc4:	d818      	bhi.n	8004df8 <UART_SetConfig+0xe4>
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <UART_SetConfig+0xbc>
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d00a      	beq.n	8004de4 <UART_SetConfig+0xd0>
 8004dce:	e013      	b.n	8004df8 <UART_SetConfig+0xe4>
 8004dd0:	231f      	movs	r3, #31
 8004dd2:	18fb      	adds	r3, r7, r3
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	701a      	strb	r2, [r3, #0]
 8004dd8:	e021      	b.n	8004e1e <UART_SetConfig+0x10a>
 8004dda:	231f      	movs	r3, #31
 8004ddc:	18fb      	adds	r3, r7, r3
 8004dde:	2202      	movs	r2, #2
 8004de0:	701a      	strb	r2, [r3, #0]
 8004de2:	e01c      	b.n	8004e1e <UART_SetConfig+0x10a>
 8004de4:	231f      	movs	r3, #31
 8004de6:	18fb      	adds	r3, r7, r3
 8004de8:	2204      	movs	r2, #4
 8004dea:	701a      	strb	r2, [r3, #0]
 8004dec:	e017      	b.n	8004e1e <UART_SetConfig+0x10a>
 8004dee:	231f      	movs	r3, #31
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	2208      	movs	r2, #8
 8004df4:	701a      	strb	r2, [r3, #0]
 8004df6:	e012      	b.n	8004e1e <UART_SetConfig+0x10a>
 8004df8:	231f      	movs	r3, #31
 8004dfa:	18fb      	adds	r3, r7, r3
 8004dfc:	2210      	movs	r2, #16
 8004dfe:	701a      	strb	r2, [r3, #0]
 8004e00:	e00d      	b.n	8004e1e <UART_SetConfig+0x10a>
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a7f      	ldr	r2, [pc, #508]	@ (8005004 <UART_SetConfig+0x2f0>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d104      	bne.n	8004e16 <UART_SetConfig+0x102>
 8004e0c:	231f      	movs	r3, #31
 8004e0e:	18fb      	adds	r3, r7, r3
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
 8004e14:	e003      	b.n	8004e1e <UART_SetConfig+0x10a>
 8004e16:	231f      	movs	r3, #31
 8004e18:	18fb      	adds	r3, r7, r3
 8004e1a:	2210      	movs	r2, #16
 8004e1c:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69da      	ldr	r2, [r3, #28]
 8004e22:	2380      	movs	r3, #128	@ 0x80
 8004e24:	021b      	lsls	r3, r3, #8
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d000      	beq.n	8004e2c <UART_SetConfig+0x118>
 8004e2a:	e06f      	b.n	8004f0c <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004e2c:	231f      	movs	r3, #31
 8004e2e:	18fb      	adds	r3, r7, r3
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	2b08      	cmp	r3, #8
 8004e34:	d01f      	beq.n	8004e76 <UART_SetConfig+0x162>
 8004e36:	dc22      	bgt.n	8004e7e <UART_SetConfig+0x16a>
 8004e38:	2b04      	cmp	r3, #4
 8004e3a:	d017      	beq.n	8004e6c <UART_SetConfig+0x158>
 8004e3c:	dc1f      	bgt.n	8004e7e <UART_SetConfig+0x16a>
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d002      	beq.n	8004e48 <UART_SetConfig+0x134>
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d005      	beq.n	8004e52 <UART_SetConfig+0x13e>
 8004e46:	e01a      	b.n	8004e7e <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e48:	f7ff f9ca 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	61bb      	str	r3, [r7, #24]
        break;
 8004e50:	e01c      	b.n	8004e8c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004e52:	4b6b      	ldr	r3, [pc, #428]	@ (8005000 <UART_SetConfig+0x2ec>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	095b      	lsrs	r3, r3, #5
 8004e58:	2207      	movs	r2, #7
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	3301      	adds	r3, #1
 8004e5e:	0019      	movs	r1, r3
 8004e60:	4869      	ldr	r0, [pc, #420]	@ (8005008 <UART_SetConfig+0x2f4>)
 8004e62:	f7fb f963 	bl	800012c <__udivsi3>
 8004e66:	0003      	movs	r3, r0
 8004e68:	61bb      	str	r3, [r7, #24]
        break;
 8004e6a:	e00f      	b.n	8004e8c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e6c:	f7ff f96c 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8004e70:	0003      	movs	r3, r0
 8004e72:	61bb      	str	r3, [r7, #24]
        break;
 8004e74:	e00a      	b.n	8004e8c <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e76:	2380      	movs	r3, #128	@ 0x80
 8004e78:	021b      	lsls	r3, r3, #8
 8004e7a:	61bb      	str	r3, [r7, #24]
        break;
 8004e7c:	e006      	b.n	8004e8c <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004e82:	231e      	movs	r3, #30
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	2201      	movs	r2, #1
 8004e88:	701a      	strb	r2, [r3, #0]
        break;
 8004e8a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d100      	bne.n	8004e94 <UART_SetConfig+0x180>
 8004e92:	e097      	b.n	8004fc4 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e98:	4b5c      	ldr	r3, [pc, #368]	@ (800500c <UART_SetConfig+0x2f8>)
 8004e9a:	0052      	lsls	r2, r2, #1
 8004e9c:	5ad3      	ldrh	r3, [r2, r3]
 8004e9e:	0019      	movs	r1, r3
 8004ea0:	69b8      	ldr	r0, [r7, #24]
 8004ea2:	f7fb f943 	bl	800012c <__udivsi3>
 8004ea6:	0003      	movs	r3, r0
 8004ea8:	005a      	lsls	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	085b      	lsrs	r3, r3, #1
 8004eb0:	18d2      	adds	r2, r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	0019      	movs	r1, r3
 8004eb8:	0010      	movs	r0, r2
 8004eba:	f7fb f937 	bl	800012c <__udivsi3>
 8004ebe:	0003      	movs	r3, r0
 8004ec0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	2b0f      	cmp	r3, #15
 8004ec6:	d91c      	bls.n	8004f02 <UART_SetConfig+0x1ee>
 8004ec8:	693a      	ldr	r2, [r7, #16]
 8004eca:	2380      	movs	r3, #128	@ 0x80
 8004ecc:	025b      	lsls	r3, r3, #9
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d217      	bcs.n	8004f02 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	200e      	movs	r0, #14
 8004ed8:	183b      	adds	r3, r7, r0
 8004eda:	210f      	movs	r1, #15
 8004edc:	438a      	bics	r2, r1
 8004ede:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	085b      	lsrs	r3, r3, #1
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2207      	movs	r2, #7
 8004ee8:	4013      	ands	r3, r2
 8004eea:	b299      	uxth	r1, r3
 8004eec:	183b      	adds	r3, r7, r0
 8004eee:	183a      	adds	r2, r7, r0
 8004ef0:	8812      	ldrh	r2, [r2, #0]
 8004ef2:	430a      	orrs	r2, r1
 8004ef4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	183a      	adds	r2, r7, r0
 8004efc:	8812      	ldrh	r2, [r2, #0]
 8004efe:	60da      	str	r2, [r3, #12]
 8004f00:	e060      	b.n	8004fc4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004f02:	231e      	movs	r3, #30
 8004f04:	18fb      	adds	r3, r7, r3
 8004f06:	2201      	movs	r2, #1
 8004f08:	701a      	strb	r2, [r3, #0]
 8004f0a:	e05b      	b.n	8004fc4 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f0c:	231f      	movs	r3, #31
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	2b08      	cmp	r3, #8
 8004f14:	d01f      	beq.n	8004f56 <UART_SetConfig+0x242>
 8004f16:	dc22      	bgt.n	8004f5e <UART_SetConfig+0x24a>
 8004f18:	2b04      	cmp	r3, #4
 8004f1a:	d017      	beq.n	8004f4c <UART_SetConfig+0x238>
 8004f1c:	dc1f      	bgt.n	8004f5e <UART_SetConfig+0x24a>
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d002      	beq.n	8004f28 <UART_SetConfig+0x214>
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d005      	beq.n	8004f32 <UART_SetConfig+0x21e>
 8004f26:	e01a      	b.n	8004f5e <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f28:	f7ff f95a 	bl	80041e0 <HAL_RCC_GetPCLK1Freq>
 8004f2c:	0003      	movs	r3, r0
 8004f2e:	61bb      	str	r3, [r7, #24]
        break;
 8004f30:	e01c      	b.n	8004f6c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004f32:	4b33      	ldr	r3, [pc, #204]	@ (8005000 <UART_SetConfig+0x2ec>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	2207      	movs	r2, #7
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	0019      	movs	r1, r3
 8004f40:	4831      	ldr	r0, [pc, #196]	@ (8005008 <UART_SetConfig+0x2f4>)
 8004f42:	f7fb f8f3 	bl	800012c <__udivsi3>
 8004f46:	0003      	movs	r3, r0
 8004f48:	61bb      	str	r3, [r7, #24]
        break;
 8004f4a:	e00f      	b.n	8004f6c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f4c:	f7ff f8fc 	bl	8004148 <HAL_RCC_GetSysClockFreq>
 8004f50:	0003      	movs	r3, r0
 8004f52:	61bb      	str	r3, [r7, #24]
        break;
 8004f54:	e00a      	b.n	8004f6c <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f56:	2380      	movs	r3, #128	@ 0x80
 8004f58:	021b      	lsls	r3, r3, #8
 8004f5a:	61bb      	str	r3, [r7, #24]
        break;
 8004f5c:	e006      	b.n	8004f6c <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f62:	231e      	movs	r3, #30
 8004f64:	18fb      	adds	r3, r7, r3
 8004f66:	2201      	movs	r2, #1
 8004f68:	701a      	strb	r2, [r3, #0]
        break;
 8004f6a:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d028      	beq.n	8004fc4 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004f76:	4b25      	ldr	r3, [pc, #148]	@ (800500c <UART_SetConfig+0x2f8>)
 8004f78:	0052      	lsls	r2, r2, #1
 8004f7a:	5ad3      	ldrh	r3, [r2, r3]
 8004f7c:	0019      	movs	r1, r3
 8004f7e:	69b8      	ldr	r0, [r7, #24]
 8004f80:	f7fb f8d4 	bl	800012c <__udivsi3>
 8004f84:	0003      	movs	r3, r0
 8004f86:	001a      	movs	r2, r3
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	085b      	lsrs	r3, r3, #1
 8004f8e:	18d2      	adds	r2, r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	0019      	movs	r1, r3
 8004f96:	0010      	movs	r0, r2
 8004f98:	f7fb f8c8 	bl	800012c <__udivsi3>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	2b0f      	cmp	r3, #15
 8004fa4:	d90a      	bls.n	8004fbc <UART_SetConfig+0x2a8>
 8004fa6:	693a      	ldr	r2, [r7, #16]
 8004fa8:	2380      	movs	r3, #128	@ 0x80
 8004faa:	025b      	lsls	r3, r3, #9
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d205      	bcs.n	8004fbc <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	b29a      	uxth	r2, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	e003      	b.n	8004fc4 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004fbc:	231e      	movs	r3, #30
 8004fbe:	18fb      	adds	r3, r7, r3
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	226a      	movs	r2, #106	@ 0x6a
 8004fc8:	2101      	movs	r1, #1
 8004fca:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2268      	movs	r2, #104	@ 0x68
 8004fd0:	2101      	movs	r1, #1
 8004fd2:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004fe0:	231e      	movs	r3, #30
 8004fe2:	18fb      	adds	r3, r7, r3
 8004fe4:	781b      	ldrb	r3, [r3, #0]
}
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	b008      	add	sp, #32
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	46c0      	nop			@ (mov r8, r8)
 8004ff0:	cfff69f3 	.word	0xcfff69f3
 8004ff4:	ffffcfff 	.word	0xffffcfff
 8004ff8:	11fff4ff 	.word	0x11fff4ff
 8004ffc:	40013800 	.word	0x40013800
 8005000:	40021000 	.word	0x40021000
 8005004:	40004400 	.word	0x40004400
 8005008:	02dc6c00 	.word	0x02dc6c00
 800500c:	08006ec0 	.word	0x08006ec0

08005010 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501c:	2208      	movs	r2, #8
 800501e:	4013      	ands	r3, r2
 8005020:	d00b      	beq.n	800503a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	4a4a      	ldr	r2, [pc, #296]	@ (8005154 <UART_AdvFeatureConfig+0x144>)
 800502a:	4013      	ands	r3, r2
 800502c:	0019      	movs	r1, r3
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	430a      	orrs	r2, r1
 8005038:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503e:	2201      	movs	r2, #1
 8005040:	4013      	ands	r3, r2
 8005042:	d00b      	beq.n	800505c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	685b      	ldr	r3, [r3, #4]
 800504a:	4a43      	ldr	r2, [pc, #268]	@ (8005158 <UART_AdvFeatureConfig+0x148>)
 800504c:	4013      	ands	r3, r2
 800504e:	0019      	movs	r1, r3
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	430a      	orrs	r2, r1
 800505a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005060:	2202      	movs	r2, #2
 8005062:	4013      	ands	r3, r2
 8005064:	d00b      	beq.n	800507e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	4a3b      	ldr	r2, [pc, #236]	@ (800515c <UART_AdvFeatureConfig+0x14c>)
 800506e:	4013      	ands	r3, r2
 8005070:	0019      	movs	r1, r3
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005082:	2204      	movs	r2, #4
 8005084:	4013      	ands	r3, r2
 8005086:	d00b      	beq.n	80050a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	4a34      	ldr	r2, [pc, #208]	@ (8005160 <UART_AdvFeatureConfig+0x150>)
 8005090:	4013      	ands	r3, r2
 8005092:	0019      	movs	r1, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	430a      	orrs	r2, r1
 800509e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050a4:	2210      	movs	r2, #16
 80050a6:	4013      	ands	r3, r2
 80050a8:	d00b      	beq.n	80050c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4a2c      	ldr	r2, [pc, #176]	@ (8005164 <UART_AdvFeatureConfig+0x154>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	0019      	movs	r1, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	430a      	orrs	r2, r1
 80050c0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050c6:	2220      	movs	r2, #32
 80050c8:	4013      	ands	r3, r2
 80050ca:	d00b      	beq.n	80050e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	4a25      	ldr	r2, [pc, #148]	@ (8005168 <UART_AdvFeatureConfig+0x158>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	0019      	movs	r1, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e8:	2240      	movs	r2, #64	@ 0x40
 80050ea:	4013      	ands	r3, r2
 80050ec:	d01d      	beq.n	800512a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	4a1d      	ldr	r2, [pc, #116]	@ (800516c <UART_AdvFeatureConfig+0x15c>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	0019      	movs	r1, r3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	430a      	orrs	r2, r1
 8005104:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800510a:	2380      	movs	r3, #128	@ 0x80
 800510c:	035b      	lsls	r3, r3, #13
 800510e:	429a      	cmp	r2, r3
 8005110:	d10b      	bne.n	800512a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	4a15      	ldr	r2, [pc, #84]	@ (8005170 <UART_AdvFeatureConfig+0x160>)
 800511a:	4013      	ands	r3, r2
 800511c:	0019      	movs	r1, r3
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800512e:	2280      	movs	r2, #128	@ 0x80
 8005130:	4013      	ands	r3, r2
 8005132:	d00b      	beq.n	800514c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	4a0e      	ldr	r2, [pc, #56]	@ (8005174 <UART_AdvFeatureConfig+0x164>)
 800513c:	4013      	ands	r3, r2
 800513e:	0019      	movs	r1, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	430a      	orrs	r2, r1
 800514a:	605a      	str	r2, [r3, #4]
  }
}
 800514c:	46c0      	nop			@ (mov r8, r8)
 800514e:	46bd      	mov	sp, r7
 8005150:	b002      	add	sp, #8
 8005152:	bd80      	pop	{r7, pc}
 8005154:	ffff7fff 	.word	0xffff7fff
 8005158:	fffdffff 	.word	0xfffdffff
 800515c:	fffeffff 	.word	0xfffeffff
 8005160:	fffbffff 	.word	0xfffbffff
 8005164:	ffffefff 	.word	0xffffefff
 8005168:	ffffdfff 	.word	0xffffdfff
 800516c:	ffefffff 	.word	0xffefffff
 8005170:	ff9fffff 	.word	0xff9fffff
 8005174:	fff7ffff 	.word	0xfff7ffff

08005178 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b092      	sub	sp, #72	@ 0x48
 800517c:	af02      	add	r7, sp, #8
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2290      	movs	r2, #144	@ 0x90
 8005184:	2100      	movs	r1, #0
 8005186:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005188:	f7fc fe98 	bl	8001ebc <HAL_GetTick>
 800518c:	0003      	movs	r3, r0
 800518e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	2208      	movs	r2, #8
 8005198:	4013      	ands	r3, r2
 800519a:	2b08      	cmp	r3, #8
 800519c:	d12d      	bne.n	80051fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800519e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a0:	2280      	movs	r2, #128	@ 0x80
 80051a2:	0391      	lsls	r1, r2, #14
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	4a47      	ldr	r2, [pc, #284]	@ (80052c4 <UART_CheckIdleState+0x14c>)
 80051a8:	9200      	str	r2, [sp, #0]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f000 f88e 	bl	80052cc <UART_WaitOnFlagUntilTimeout>
 80051b0:	1e03      	subs	r3, r0, #0
 80051b2:	d022      	beq.n	80051fa <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051b4:	f3ef 8310 	mrs	r3, PRIMASK
 80051b8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80051bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80051be:	2301      	movs	r3, #1
 80051c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c4:	f383 8810 	msr	PRIMASK, r3
}
 80051c8:	46c0      	nop			@ (mov r8, r8)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	2180      	movs	r1, #128	@ 0x80
 80051d6:	438a      	bics	r2, r1
 80051d8:	601a      	str	r2, [r3, #0]
 80051da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051e0:	f383 8810 	msr	PRIMASK, r3
}
 80051e4:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2288      	movs	r2, #136	@ 0x88
 80051ea:	2120      	movs	r1, #32
 80051ec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2284      	movs	r2, #132	@ 0x84
 80051f2:	2100      	movs	r1, #0
 80051f4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e060      	b.n	80052bc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2204      	movs	r2, #4
 8005202:	4013      	ands	r3, r2
 8005204:	2b04      	cmp	r3, #4
 8005206:	d146      	bne.n	8005296 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005208:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800520a:	2280      	movs	r2, #128	@ 0x80
 800520c:	03d1      	lsls	r1, r2, #15
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	4a2c      	ldr	r2, [pc, #176]	@ (80052c4 <UART_CheckIdleState+0x14c>)
 8005212:	9200      	str	r2, [sp, #0]
 8005214:	2200      	movs	r2, #0
 8005216:	f000 f859 	bl	80052cc <UART_WaitOnFlagUntilTimeout>
 800521a:	1e03      	subs	r3, r0, #0
 800521c:	d03b      	beq.n	8005296 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800521e:	f3ef 8310 	mrs	r3, PRIMASK
 8005222:	60fb      	str	r3, [r7, #12]
  return(result);
 8005224:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005226:	637b      	str	r3, [r7, #52]	@ 0x34
 8005228:	2301      	movs	r3, #1
 800522a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	f383 8810 	msr	PRIMASK, r3
}
 8005232:	46c0      	nop			@ (mov r8, r8)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	681a      	ldr	r2, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4922      	ldr	r1, [pc, #136]	@ (80052c8 <UART_CheckIdleState+0x150>)
 8005240:	400a      	ands	r2, r1
 8005242:	601a      	str	r2, [r3, #0]
 8005244:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005246:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005248:	697b      	ldr	r3, [r7, #20]
 800524a:	f383 8810 	msr	PRIMASK, r3
}
 800524e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005250:	f3ef 8310 	mrs	r3, PRIMASK
 8005254:	61bb      	str	r3, [r7, #24]
  return(result);
 8005256:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005258:	633b      	str	r3, [r7, #48]	@ 0x30
 800525a:	2301      	movs	r3, #1
 800525c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	f383 8810 	msr	PRIMASK, r3
}
 8005264:	46c0      	nop			@ (mov r8, r8)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2101      	movs	r1, #1
 8005272:	438a      	bics	r2, r1
 8005274:	609a      	str	r2, [r3, #8]
 8005276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005278:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527a:	6a3b      	ldr	r3, [r7, #32]
 800527c:	f383 8810 	msr	PRIMASK, r3
}
 8005280:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	228c      	movs	r2, #140	@ 0x8c
 8005286:	2120      	movs	r1, #32
 8005288:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2284      	movs	r2, #132	@ 0x84
 800528e:	2100      	movs	r1, #0
 8005290:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005292:	2303      	movs	r3, #3
 8005294:	e012      	b.n	80052bc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2288      	movs	r2, #136	@ 0x88
 800529a:	2120      	movs	r1, #32
 800529c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	228c      	movs	r2, #140	@ 0x8c
 80052a2:	2120      	movs	r1, #32
 80052a4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2200      	movs	r2, #0
 80052aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2200      	movs	r2, #0
 80052b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2284      	movs	r2, #132	@ 0x84
 80052b6:	2100      	movs	r1, #0
 80052b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	0018      	movs	r0, r3
 80052be:	46bd      	mov	sp, r7
 80052c0:	b010      	add	sp, #64	@ 0x40
 80052c2:	bd80      	pop	{r7, pc}
 80052c4:	01ffffff 	.word	0x01ffffff
 80052c8:	fffffedf 	.word	0xfffffedf

080052cc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	603b      	str	r3, [r7, #0]
 80052d8:	1dfb      	adds	r3, r7, #7
 80052da:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052dc:	e04b      	b.n	8005376 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	3301      	adds	r3, #1
 80052e2:	d048      	beq.n	8005376 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052e4:	f7fc fdea 	bl	8001ebc <HAL_GetTick>
 80052e8:	0002      	movs	r2, r0
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	1ad3      	subs	r3, r2, r3
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d302      	bcc.n	80052fa <UART_WaitOnFlagUntilTimeout+0x2e>
 80052f4:	69bb      	ldr	r3, [r7, #24]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e04b      	b.n	8005396 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2204      	movs	r2, #4
 8005306:	4013      	ands	r3, r2
 8005308:	d035      	beq.n	8005376 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	69db      	ldr	r3, [r3, #28]
 8005310:	2208      	movs	r2, #8
 8005312:	4013      	ands	r3, r2
 8005314:	2b08      	cmp	r3, #8
 8005316:	d111      	bne.n	800533c <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2208      	movs	r2, #8
 800531e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	0018      	movs	r0, r3
 8005324:	f000 f960 	bl	80055e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2290      	movs	r2, #144	@ 0x90
 800532c:	2108      	movs	r1, #8
 800532e:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2284      	movs	r2, #132	@ 0x84
 8005334:	2100      	movs	r1, #0
 8005336:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e02c      	b.n	8005396 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	69da      	ldr	r2, [r3, #28]
 8005342:	2380      	movs	r3, #128	@ 0x80
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	401a      	ands	r2, r3
 8005348:	2380      	movs	r3, #128	@ 0x80
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	429a      	cmp	r2, r3
 800534e:	d112      	bne.n	8005376 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	2280      	movs	r2, #128	@ 0x80
 8005356:	0112      	lsls	r2, r2, #4
 8005358:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	0018      	movs	r0, r3
 800535e:	f000 f943 	bl	80055e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2290      	movs	r2, #144	@ 0x90
 8005366:	2120      	movs	r1, #32
 8005368:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2284      	movs	r2, #132	@ 0x84
 800536e:	2100      	movs	r1, #0
 8005370:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e00f      	b.n	8005396 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	69db      	ldr	r3, [r3, #28]
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	4013      	ands	r3, r2
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	1ad3      	subs	r3, r2, r3
 8005384:	425a      	negs	r2, r3
 8005386:	4153      	adcs	r3, r2
 8005388:	b2db      	uxtb	r3, r3
 800538a:	001a      	movs	r2, r3
 800538c:	1dfb      	adds	r3, r7, #7
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	429a      	cmp	r2, r3
 8005392:	d0a4      	beq.n	80052de <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005394:	2300      	movs	r3, #0
}
 8005396:	0018      	movs	r0, r3
 8005398:	46bd      	mov	sp, r7
 800539a:	b004      	add	sp, #16
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b098      	sub	sp, #96	@ 0x60
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	1dbb      	adds	r3, r7, #6
 80053ac:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	1dba      	adds	r2, r7, #6
 80053b8:	215c      	movs	r1, #92	@ 0x5c
 80053ba:	8812      	ldrh	r2, [r2, #0]
 80053bc:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	1dba      	adds	r2, r7, #6
 80053c2:	215e      	movs	r1, #94	@ 0x5e
 80053c4:	8812      	ldrh	r2, [r2, #0]
 80053c6:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2200      	movs	r2, #0
 80053cc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	2380      	movs	r3, #128	@ 0x80
 80053d4:	015b      	lsls	r3, r3, #5
 80053d6:	429a      	cmp	r2, r3
 80053d8:	d10d      	bne.n	80053f6 <UART_Start_Receive_IT+0x56>
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d104      	bne.n	80053ec <UART_Start_Receive_IT+0x4c>
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2260      	movs	r2, #96	@ 0x60
 80053e6:	497b      	ldr	r1, [pc, #492]	@ (80055d4 <UART_Start_Receive_IT+0x234>)
 80053e8:	5299      	strh	r1, [r3, r2]
 80053ea:	e02e      	b.n	800544a <UART_Start_Receive_IT+0xaa>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2260      	movs	r2, #96	@ 0x60
 80053f0:	21ff      	movs	r1, #255	@ 0xff
 80053f2:	5299      	strh	r1, [r3, r2]
 80053f4:	e029      	b.n	800544a <UART_Start_Receive_IT+0xaa>
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	689b      	ldr	r3, [r3, #8]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10d      	bne.n	800541a <UART_Start_Receive_IT+0x7a>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d104      	bne.n	8005410 <UART_Start_Receive_IT+0x70>
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	2260      	movs	r2, #96	@ 0x60
 800540a:	21ff      	movs	r1, #255	@ 0xff
 800540c:	5299      	strh	r1, [r3, r2]
 800540e:	e01c      	b.n	800544a <UART_Start_Receive_IT+0xaa>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2260      	movs	r2, #96	@ 0x60
 8005414:	217f      	movs	r1, #127	@ 0x7f
 8005416:	5299      	strh	r1, [r3, r2]
 8005418:	e017      	b.n	800544a <UART_Start_Receive_IT+0xaa>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	689a      	ldr	r2, [r3, #8]
 800541e:	2380      	movs	r3, #128	@ 0x80
 8005420:	055b      	lsls	r3, r3, #21
 8005422:	429a      	cmp	r2, r3
 8005424:	d10d      	bne.n	8005442 <UART_Start_Receive_IT+0xa2>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d104      	bne.n	8005438 <UART_Start_Receive_IT+0x98>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2260      	movs	r2, #96	@ 0x60
 8005432:	217f      	movs	r1, #127	@ 0x7f
 8005434:	5299      	strh	r1, [r3, r2]
 8005436:	e008      	b.n	800544a <UART_Start_Receive_IT+0xaa>
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2260      	movs	r2, #96	@ 0x60
 800543c:	213f      	movs	r1, #63	@ 0x3f
 800543e:	5299      	strh	r1, [r3, r2]
 8005440:	e003      	b.n	800544a <UART_Start_Receive_IT+0xaa>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2260      	movs	r2, #96	@ 0x60
 8005446:	2100      	movs	r1, #0
 8005448:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2290      	movs	r2, #144	@ 0x90
 800544e:	2100      	movs	r1, #0
 8005450:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	228c      	movs	r2, #140	@ 0x8c
 8005456:	2122      	movs	r1, #34	@ 0x22
 8005458:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800545a:	f3ef 8310 	mrs	r3, PRIMASK
 800545e:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8005460:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005462:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005464:	2301      	movs	r3, #1
 8005466:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800546a:	f383 8810 	msr	PRIMASK, r3
}
 800546e:	46c0      	nop			@ (mov r8, r8)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689a      	ldr	r2, [r3, #8]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	2101      	movs	r1, #1
 800547c:	430a      	orrs	r2, r1
 800547e:	609a      	str	r2, [r3, #8]
 8005480:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005482:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005484:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005486:	f383 8810 	msr	PRIMASK, r3
}
 800548a:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005490:	2380      	movs	r3, #128	@ 0x80
 8005492:	059b      	lsls	r3, r3, #22
 8005494:	429a      	cmp	r2, r3
 8005496:	d150      	bne.n	800553a <UART_Start_Receive_IT+0x19a>
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2268      	movs	r2, #104	@ 0x68
 800549c:	5a9b      	ldrh	r3, [r3, r2]
 800549e:	1dba      	adds	r2, r7, #6
 80054a0:	8812      	ldrh	r2, [r2, #0]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d349      	bcc.n	800553a <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	2380      	movs	r3, #128	@ 0x80
 80054ac:	015b      	lsls	r3, r3, #5
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d107      	bne.n	80054c2 <UART_Start_Receive_IT+0x122>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d103      	bne.n	80054c2 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4a46      	ldr	r2, [pc, #280]	@ (80055d8 <UART_Start_Receive_IT+0x238>)
 80054be:	675a      	str	r2, [r3, #116]	@ 0x74
 80054c0:	e002      	b.n	80054c8 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4a45      	ldr	r2, [pc, #276]	@ (80055dc <UART_Start_Receive_IT+0x23c>)
 80054c6:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	691b      	ldr	r3, [r3, #16]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d019      	beq.n	8005504 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80054d0:	f3ef 8310 	mrs	r3, PRIMASK
 80054d4:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 80054d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80054d8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80054da:	2301      	movs	r3, #1
 80054dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e0:	f383 8810 	msr	PRIMASK, r3
}
 80054e4:	46c0      	nop			@ (mov r8, r8)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2180      	movs	r1, #128	@ 0x80
 80054f2:	0049      	lsls	r1, r1, #1
 80054f4:	430a      	orrs	r2, r1
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80054fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054fe:	f383 8810 	msr	PRIMASK, r3
}
 8005502:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005504:	f3ef 8310 	mrs	r3, PRIMASK
 8005508:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800550a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800550c:	657b      	str	r3, [r7, #84]	@ 0x54
 800550e:	2301      	movs	r3, #1
 8005510:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005514:	f383 8810 	msr	PRIMASK, r3
}
 8005518:	46c0      	nop			@ (mov r8, r8)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	2180      	movs	r1, #128	@ 0x80
 8005526:	0549      	lsls	r1, r1, #21
 8005528:	430a      	orrs	r2, r1
 800552a:	609a      	str	r2, [r3, #8]
 800552c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800552e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005530:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005532:	f383 8810 	msr	PRIMASK, r3
}
 8005536:	46c0      	nop			@ (mov r8, r8)
 8005538:	e047      	b.n	80055ca <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	689a      	ldr	r2, [r3, #8]
 800553e:	2380      	movs	r3, #128	@ 0x80
 8005540:	015b      	lsls	r3, r3, #5
 8005542:	429a      	cmp	r2, r3
 8005544:	d107      	bne.n	8005556 <UART_Start_Receive_IT+0x1b6>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d103      	bne.n	8005556 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	4a23      	ldr	r2, [pc, #140]	@ (80055e0 <UART_Start_Receive_IT+0x240>)
 8005552:	675a      	str	r2, [r3, #116]	@ 0x74
 8005554:	e002      	b.n	800555c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	4a22      	ldr	r2, [pc, #136]	@ (80055e4 <UART_Start_Receive_IT+0x244>)
 800555a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d019      	beq.n	8005598 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005564:	f3ef 8310 	mrs	r3, PRIMASK
 8005568:	61fb      	str	r3, [r7, #28]
  return(result);
 800556a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800556c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800556e:	2301      	movs	r3, #1
 8005570:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005572:	6a3b      	ldr	r3, [r7, #32]
 8005574:	f383 8810 	msr	PRIMASK, r3
}
 8005578:	46c0      	nop			@ (mov r8, r8)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681a      	ldr	r2, [r3, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2190      	movs	r1, #144	@ 0x90
 8005586:	0049      	lsls	r1, r1, #1
 8005588:	430a      	orrs	r2, r1
 800558a:	601a      	str	r2, [r3, #0]
 800558c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800558e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	f383 8810 	msr	PRIMASK, r3
}
 8005596:	e018      	b.n	80055ca <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005598:	f3ef 8310 	mrs	r3, PRIMASK
 800559c:	613b      	str	r3, [r7, #16]
  return(result);
 800559e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80055a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80055a2:	2301      	movs	r3, #1
 80055a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f383 8810 	msr	PRIMASK, r3
}
 80055ac:	46c0      	nop			@ (mov r8, r8)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681a      	ldr	r2, [r3, #0]
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	2120      	movs	r1, #32
 80055ba:	430a      	orrs	r2, r1
 80055bc:	601a      	str	r2, [r3, #0]
 80055be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80055c0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	f383 8810 	msr	PRIMASK, r3
}
 80055c8:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	0018      	movs	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	b018      	add	sp, #96	@ 0x60
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	000001ff 	.word	0x000001ff
 80055d8:	08005ddd 	.word	0x08005ddd
 80055dc:	08005aad 	.word	0x08005aad
 80055e0:	080058f5 	.word	0x080058f5
 80055e4:	0800573d 	.word	0x0800573d

080055e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b08e      	sub	sp, #56	@ 0x38
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055f0:	f3ef 8310 	mrs	r3, PRIMASK
 80055f4:	617b      	str	r3, [r7, #20]
  return(result);
 80055f6:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80055fa:	2301      	movs	r3, #1
 80055fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	f383 8810 	msr	PRIMASK, r3
}
 8005604:	46c0      	nop			@ (mov r8, r8)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4926      	ldr	r1, [pc, #152]	@ (80056ac <UART_EndRxTransfer+0xc4>)
 8005612:	400a      	ands	r2, r1
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005618:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800561a:	69fb      	ldr	r3, [r7, #28]
 800561c:	f383 8810 	msr	PRIMASK, r3
}
 8005620:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005622:	f3ef 8310 	mrs	r3, PRIMASK
 8005626:	623b      	str	r3, [r7, #32]
  return(result);
 8005628:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800562a:	633b      	str	r3, [r7, #48]	@ 0x30
 800562c:	2301      	movs	r3, #1
 800562e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	f383 8810 	msr	PRIMASK, r3
}
 8005636:	46c0      	nop			@ (mov r8, r8)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	491b      	ldr	r1, [pc, #108]	@ (80056b0 <UART_EndRxTransfer+0xc8>)
 8005644:	400a      	ands	r2, r1
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800564a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800564c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800564e:	f383 8810 	msr	PRIMASK, r3
}
 8005652:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005658:	2b01      	cmp	r3, #1
 800565a:	d118      	bne.n	800568e <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800565c:	f3ef 8310 	mrs	r3, PRIMASK
 8005660:	60bb      	str	r3, [r7, #8]
  return(result);
 8005662:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005666:	2301      	movs	r3, #1
 8005668:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f383 8810 	msr	PRIMASK, r3
}
 8005670:	46c0      	nop			@ (mov r8, r8)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2110      	movs	r1, #16
 800567e:	438a      	bics	r2, r1
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f383 8810 	msr	PRIMASK, r3
}
 800568c:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	228c      	movs	r2, #140	@ 0x8c
 8005692:	2120      	movs	r1, #32
 8005694:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80056a2:	46c0      	nop			@ (mov r8, r8)
 80056a4:	46bd      	mov	sp, r7
 80056a6:	b00e      	add	sp, #56	@ 0x38
 80056a8:	bd80      	pop	{r7, pc}
 80056aa:	46c0      	nop			@ (mov r8, r8)
 80056ac:	fffffedf 	.word	0xfffffedf
 80056b0:	effffffe 	.word	0xeffffffe

080056b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	225e      	movs	r2, #94	@ 0x5e
 80056c6:	2100      	movs	r1, #0
 80056c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2256      	movs	r2, #86	@ 0x56
 80056ce:	2100      	movs	r1, #0
 80056d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	0018      	movs	r0, r3
 80056d6:	f7ff fb09 	bl	8004cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80056da:	46c0      	nop			@ (mov r8, r8)
 80056dc:	46bd      	mov	sp, r7
 80056de:	b004      	add	sp, #16
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b086      	sub	sp, #24
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80056ea:	f3ef 8310 	mrs	r3, PRIMASK
 80056ee:	60bb      	str	r3, [r7, #8]
  return(result);
 80056f0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80056f2:	617b      	str	r3, [r7, #20]
 80056f4:	2301      	movs	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	f383 8810 	msr	PRIMASK, r3
}
 80056fe:	46c0      	nop			@ (mov r8, r8)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	2140      	movs	r1, #64	@ 0x40
 800570c:	438a      	bics	r2, r1
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f383 8810 	msr	PRIMASK, r3
}
 800571a:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2288      	movs	r2, #136	@ 0x88
 8005720:	2120      	movs	r1, #32
 8005722:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	0018      	movs	r0, r3
 800572e:	f7ff fad5 	bl	8004cdc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005732:	46c0      	nop			@ (mov r8, r8)
 8005734:	46bd      	mov	sp, r7
 8005736:	b006      	add	sp, #24
 8005738:	bd80      	pop	{r7, pc}
	...

0800573c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b094      	sub	sp, #80	@ 0x50
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005744:	204e      	movs	r0, #78	@ 0x4e
 8005746:	183b      	adds	r3, r7, r0
 8005748:	687a      	ldr	r2, [r7, #4]
 800574a:	2160      	movs	r1, #96	@ 0x60
 800574c:	5a52      	ldrh	r2, [r2, r1]
 800574e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	228c      	movs	r2, #140	@ 0x8c
 8005754:	589b      	ldr	r3, [r3, r2]
 8005756:	2b22      	cmp	r3, #34	@ 0x22
 8005758:	d000      	beq.n	800575c <UART_RxISR_8BIT+0x20>
 800575a:	e0ba      	b.n	80058d2 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005762:	214c      	movs	r1, #76	@ 0x4c
 8005764:	187b      	adds	r3, r7, r1
 8005766:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005768:	187b      	adds	r3, r7, r1
 800576a:	881b      	ldrh	r3, [r3, #0]
 800576c:	b2da      	uxtb	r2, r3
 800576e:	183b      	adds	r3, r7, r0
 8005770:	881b      	ldrh	r3, [r3, #0]
 8005772:	b2d9      	uxtb	r1, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005778:	400a      	ands	r2, r1
 800577a:	b2d2      	uxtb	r2, r2
 800577c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005782:	1c5a      	adds	r2, r3, #1
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	225e      	movs	r2, #94	@ 0x5e
 800578c:	5a9b      	ldrh	r3, [r3, r2]
 800578e:	b29b      	uxth	r3, r3
 8005790:	3b01      	subs	r3, #1
 8005792:	b299      	uxth	r1, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	225e      	movs	r2, #94	@ 0x5e
 8005798:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	225e      	movs	r2, #94	@ 0x5e
 800579e:	5a9b      	ldrh	r3, [r3, r2]
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d000      	beq.n	80057a8 <UART_RxISR_8BIT+0x6c>
 80057a6:	e09c      	b.n	80058e2 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057a8:	f3ef 8310 	mrs	r3, PRIMASK
 80057ac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80057b2:	2301      	movs	r3, #1
 80057b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057b8:	f383 8810 	msr	PRIMASK, r3
}
 80057bc:	46c0      	nop			@ (mov r8, r8)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4948      	ldr	r1, [pc, #288]	@ (80058ec <UART_RxISR_8BIT+0x1b0>)
 80057ca:	400a      	ands	r2, r1
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d4:	f383 8810 	msr	PRIMASK, r3
}
 80057d8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057da:	f3ef 8310 	mrs	r3, PRIMASK
 80057de:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80057e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80057e4:	2301      	movs	r3, #1
 80057e6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ea:	f383 8810 	msr	PRIMASK, r3
}
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	689a      	ldr	r2, [r3, #8]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2101      	movs	r1, #1
 80057fc:	438a      	bics	r2, r1
 80057fe:	609a      	str	r2, [r3, #8]
 8005800:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005802:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005806:	f383 8810 	msr	PRIMASK, r3
}
 800580a:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	228c      	movs	r2, #140	@ 0x8c
 8005810:	2120      	movs	r1, #32
 8005812:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	2380      	movs	r3, #128	@ 0x80
 8005828:	041b      	lsls	r3, r3, #16
 800582a:	4013      	ands	r3, r2
 800582c:	d018      	beq.n	8005860 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800582e:	f3ef 8310 	mrs	r3, PRIMASK
 8005832:	61bb      	str	r3, [r7, #24]
  return(result);
 8005834:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005836:	643b      	str	r3, [r7, #64]	@ 0x40
 8005838:	2301      	movs	r3, #1
 800583a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583c:	69fb      	ldr	r3, [r7, #28]
 800583e:	f383 8810 	msr	PRIMASK, r3
}
 8005842:	46c0      	nop			@ (mov r8, r8)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4928      	ldr	r1, [pc, #160]	@ (80058f0 <UART_RxISR_8BIT+0x1b4>)
 8005850:	400a      	ands	r2, r1
 8005852:	601a      	str	r2, [r3, #0]
 8005854:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005856:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	f383 8810 	msr	PRIMASK, r3
}
 800585e:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005864:	2b01      	cmp	r3, #1
 8005866:	d12f      	bne.n	80058c8 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800586e:	f3ef 8310 	mrs	r3, PRIMASK
 8005872:	60fb      	str	r3, [r7, #12]
  return(result);
 8005874:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005878:	2301      	movs	r3, #1
 800587a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587c:	693b      	ldr	r3, [r7, #16]
 800587e:	f383 8810 	msr	PRIMASK, r3
}
 8005882:	46c0      	nop			@ (mov r8, r8)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	681a      	ldr	r2, [r3, #0]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	2110      	movs	r1, #16
 8005890:	438a      	bics	r2, r1
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005896:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005898:	697b      	ldr	r3, [r7, #20]
 800589a:	f383 8810 	msr	PRIMASK, r3
}
 800589e:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	2210      	movs	r2, #16
 80058a8:	4013      	ands	r3, r2
 80058aa:	2b10      	cmp	r3, #16
 80058ac:	d103      	bne.n	80058b6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2210      	movs	r2, #16
 80058b4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	225c      	movs	r2, #92	@ 0x5c
 80058ba:	5a9a      	ldrh	r2, [r3, r2]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	0011      	movs	r1, r2
 80058c0:	0018      	movs	r0, r3
 80058c2:	f7ff fa1b 	bl	8004cfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058c6:	e00c      	b.n	80058e2 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	0018      	movs	r0, r3
 80058cc:	f7fc f80e 	bl	80018ec <HAL_UART_RxCpltCallback>
}
 80058d0:	e007      	b.n	80058e2 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699a      	ldr	r2, [r3, #24]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	2108      	movs	r1, #8
 80058de:	430a      	orrs	r2, r1
 80058e0:	619a      	str	r2, [r3, #24]
}
 80058e2:	46c0      	nop			@ (mov r8, r8)
 80058e4:	46bd      	mov	sp, r7
 80058e6:	b014      	add	sp, #80	@ 0x50
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	46c0      	nop			@ (mov r8, r8)
 80058ec:	fffffedf 	.word	0xfffffedf
 80058f0:	fbffffff 	.word	0xfbffffff

080058f4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b094      	sub	sp, #80	@ 0x50
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058fc:	204e      	movs	r0, #78	@ 0x4e
 80058fe:	183b      	adds	r3, r7, r0
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	2160      	movs	r1, #96	@ 0x60
 8005904:	5a52      	ldrh	r2, [r2, r1]
 8005906:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	228c      	movs	r2, #140	@ 0x8c
 800590c:	589b      	ldr	r3, [r3, r2]
 800590e:	2b22      	cmp	r3, #34	@ 0x22
 8005910:	d000      	beq.n	8005914 <UART_RxISR_16BIT+0x20>
 8005912:	e0ba      	b.n	8005a8a <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800591a:	214c      	movs	r1, #76	@ 0x4c
 800591c:	187b      	adds	r3, r7, r1
 800591e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005924:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8005926:	187b      	adds	r3, r7, r1
 8005928:	183a      	adds	r2, r7, r0
 800592a:	881b      	ldrh	r3, [r3, #0]
 800592c:	8812      	ldrh	r2, [r2, #0]
 800592e:	4013      	ands	r3, r2
 8005930:	b29a      	uxth	r2, r3
 8005932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005934:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800593a:	1c9a      	adds	r2, r3, #2
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	225e      	movs	r2, #94	@ 0x5e
 8005944:	5a9b      	ldrh	r3, [r3, r2]
 8005946:	b29b      	uxth	r3, r3
 8005948:	3b01      	subs	r3, #1
 800594a:	b299      	uxth	r1, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	225e      	movs	r2, #94	@ 0x5e
 8005950:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	225e      	movs	r2, #94	@ 0x5e
 8005956:	5a9b      	ldrh	r3, [r3, r2]
 8005958:	b29b      	uxth	r3, r3
 800595a:	2b00      	cmp	r3, #0
 800595c:	d000      	beq.n	8005960 <UART_RxISR_16BIT+0x6c>
 800595e:	e09c      	b.n	8005a9a <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005960:	f3ef 8310 	mrs	r3, PRIMASK
 8005964:	623b      	str	r3, [r7, #32]
  return(result);
 8005966:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005968:	647b      	str	r3, [r7, #68]	@ 0x44
 800596a:	2301      	movs	r3, #1
 800596c:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005970:	f383 8810 	msr	PRIMASK, r3
}
 8005974:	46c0      	nop			@ (mov r8, r8)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4948      	ldr	r1, [pc, #288]	@ (8005aa4 <UART_RxISR_16BIT+0x1b0>)
 8005982:	400a      	ands	r2, r1
 8005984:	601a      	str	r2, [r3, #0]
 8005986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005988:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800598a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800598c:	f383 8810 	msr	PRIMASK, r3
}
 8005990:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005992:	f3ef 8310 	mrs	r3, PRIMASK
 8005996:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005998:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800599a:	643b      	str	r3, [r7, #64]	@ 0x40
 800599c:	2301      	movs	r3, #1
 800599e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a2:	f383 8810 	msr	PRIMASK, r3
}
 80059a6:	46c0      	nop			@ (mov r8, r8)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2101      	movs	r1, #1
 80059b4:	438a      	bics	r2, r1
 80059b6:	609a      	str	r2, [r3, #8]
 80059b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059ba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059be:	f383 8810 	msr	PRIMASK, r3
}
 80059c2:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	228c      	movs	r2, #140	@ 0x8c
 80059c8:	2120      	movs	r1, #32
 80059ca:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	685a      	ldr	r2, [r3, #4]
 80059de:	2380      	movs	r3, #128	@ 0x80
 80059e0:	041b      	lsls	r3, r3, #16
 80059e2:	4013      	ands	r3, r2
 80059e4:	d018      	beq.n	8005a18 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80059e6:	f3ef 8310 	mrs	r3, PRIMASK
 80059ea:	617b      	str	r3, [r7, #20]
  return(result);
 80059ec:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80059ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80059f0:	2301      	movs	r3, #1
 80059f2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	f383 8810 	msr	PRIMASK, r3
}
 80059fa:	46c0      	nop			@ (mov r8, r8)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	4928      	ldr	r1, [pc, #160]	@ (8005aa8 <UART_RxISR_16BIT+0x1b4>)
 8005a08:	400a      	ands	r2, r1
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a0e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	f383 8810 	msr	PRIMASK, r3
}
 8005a16:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d12f      	bne.n	8005a80 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005a26:	f3ef 8310 	mrs	r3, PRIMASK
 8005a2a:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a2c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005a30:	2301      	movs	r3, #1
 8005a32:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f383 8810 	msr	PRIMASK, r3
}
 8005a3a:	46c0      	nop			@ (mov r8, r8)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2110      	movs	r1, #16
 8005a48:	438a      	bics	r2, r1
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f383 8810 	msr	PRIMASK, r3
}
 8005a56:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	2210      	movs	r2, #16
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b10      	cmp	r3, #16
 8005a64:	d103      	bne.n	8005a6e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	2210      	movs	r2, #16
 8005a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	225c      	movs	r2, #92	@ 0x5c
 8005a72:	5a9a      	ldrh	r2, [r3, r2]
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	0011      	movs	r1, r2
 8005a78:	0018      	movs	r0, r3
 8005a7a:	f7ff f93f 	bl	8004cfc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a7e:	e00c      	b.n	8005a9a <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	0018      	movs	r0, r3
 8005a84:	f7fb ff32 	bl	80018ec <HAL_UART_RxCpltCallback>
}
 8005a88:	e007      	b.n	8005a9a <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	699a      	ldr	r2, [r3, #24]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2108      	movs	r1, #8
 8005a96:	430a      	orrs	r2, r1
 8005a98:	619a      	str	r2, [r3, #24]
}
 8005a9a:	46c0      	nop			@ (mov r8, r8)
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	b014      	add	sp, #80	@ 0x50
 8005aa0:	bd80      	pop	{r7, pc}
 8005aa2:	46c0      	nop			@ (mov r8, r8)
 8005aa4:	fffffedf 	.word	0xfffffedf
 8005aa8:	fbffffff 	.word	0xfbffffff

08005aac <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b0a0      	sub	sp, #128	@ 0x80
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005ab4:	237a      	movs	r3, #122	@ 0x7a
 8005ab6:	18fb      	adds	r3, r7, r3
 8005ab8:	687a      	ldr	r2, [r7, #4]
 8005aba:	2160      	movs	r1, #96	@ 0x60
 8005abc:	5a52      	ldrh	r2, [r2, r1]
 8005abe:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	228c      	movs	r2, #140	@ 0x8c
 8005adc:	589b      	ldr	r3, [r3, r2]
 8005ade:	2b22      	cmp	r3, #34	@ 0x22
 8005ae0:	d000      	beq.n	8005ae4 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005ae2:	e165      	b.n	8005db0 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005ae4:	236e      	movs	r3, #110	@ 0x6e
 8005ae6:	18fb      	adds	r3, r7, r3
 8005ae8:	687a      	ldr	r2, [r7, #4]
 8005aea:	2168      	movs	r1, #104	@ 0x68
 8005aec:	5a52      	ldrh	r2, [r2, r1]
 8005aee:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005af0:	e10c      	b.n	8005d0c <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005af8:	216c      	movs	r1, #108	@ 0x6c
 8005afa:	187b      	adds	r3, r7, r1
 8005afc:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005afe:	187b      	adds	r3, r7, r1
 8005b00:	881b      	ldrh	r3, [r3, #0]
 8005b02:	b2da      	uxtb	r2, r3
 8005b04:	237a      	movs	r3, #122	@ 0x7a
 8005b06:	18fb      	adds	r3, r7, r3
 8005b08:	881b      	ldrh	r3, [r3, #0]
 8005b0a:	b2d9      	uxtb	r1, r3
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b10:	400a      	ands	r2, r1
 8005b12:	b2d2      	uxtb	r2, r2
 8005b14:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b1a:	1c5a      	adds	r2, r3, #1
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	225e      	movs	r2, #94	@ 0x5e
 8005b24:	5a9b      	ldrh	r3, [r3, r2]
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	b299      	uxth	r1, r3
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	225e      	movs	r2, #94	@ 0x5e
 8005b30:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69db      	ldr	r3, [r3, #28]
 8005b38:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b3c:	2207      	movs	r2, #7
 8005b3e:	4013      	ands	r3, r2
 8005b40:	d049      	beq.n	8005bd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005b42:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b44:	2201      	movs	r2, #1
 8005b46:	4013      	ands	r3, r2
 8005b48:	d010      	beq.n	8005b6c <UART_RxISR_8BIT_FIFOEN+0xc0>
 8005b4a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005b4c:	2380      	movs	r3, #128	@ 0x80
 8005b4e:	005b      	lsls	r3, r3, #1
 8005b50:	4013      	ands	r3, r2
 8005b52:	d00b      	beq.n	8005b6c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2290      	movs	r2, #144	@ 0x90
 8005b60:	589b      	ldr	r3, [r3, r2]
 8005b62:	2201      	movs	r2, #1
 8005b64:	431a      	orrs	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2190      	movs	r1, #144	@ 0x90
 8005b6a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b6e:	2202      	movs	r2, #2
 8005b70:	4013      	ands	r3, r2
 8005b72:	d00f      	beq.n	8005b94 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8005b74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b76:	2201      	movs	r2, #1
 8005b78:	4013      	ands	r3, r2
 8005b7a:	d00b      	beq.n	8005b94 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	2202      	movs	r2, #2
 8005b82:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2290      	movs	r2, #144	@ 0x90
 8005b88:	589b      	ldr	r3, [r3, r2]
 8005b8a:	2204      	movs	r2, #4
 8005b8c:	431a      	orrs	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2190      	movs	r1, #144	@ 0x90
 8005b92:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b94:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005b96:	2204      	movs	r2, #4
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d00f      	beq.n	8005bbc <UART_RxISR_8BIT_FIFOEN+0x110>
 8005b9c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	d00b      	beq.n	8005bbc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2290      	movs	r2, #144	@ 0x90
 8005bb0:	589b      	ldr	r3, [r3, r2]
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2190      	movs	r1, #144	@ 0x90
 8005bba:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2290      	movs	r2, #144	@ 0x90
 8005bc0:	589b      	ldr	r3, [r3, r2]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d007      	beq.n	8005bd6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	0018      	movs	r0, r3
 8005bca:	f7ff f88f 	bl	8004cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2290      	movs	r2, #144	@ 0x90
 8005bd2:	2100      	movs	r1, #0
 8005bd4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	225e      	movs	r2, #94	@ 0x5e
 8005bda:	5a9b      	ldrh	r3, [r3, r2]
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d000      	beq.n	8005be4 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005be2:	e093      	b.n	8005d0c <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005be4:	f3ef 8310 	mrs	r3, PRIMASK
 8005be8:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 8005bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005bee:	2301      	movs	r3, #1
 8005bf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bf2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf4:	f383 8810 	msr	PRIMASK, r3
}
 8005bf8:	46c0      	nop			@ (mov r8, r8)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4970      	ldr	r1, [pc, #448]	@ (8005dc8 <UART_RxISR_8BIT_FIFOEN+0x31c>)
 8005c06:	400a      	ands	r2, r1
 8005c08:	601a      	str	r2, [r3, #0]
 8005c0a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005c0c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c10:	f383 8810 	msr	PRIMASK, r3
}
 8005c14:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c16:	f3ef 8310 	mrs	r3, PRIMASK
 8005c1a:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c1e:	667b      	str	r3, [r7, #100]	@ 0x64
 8005c20:	2301      	movs	r3, #1
 8005c22:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c24:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c26:	f383 8810 	msr	PRIMASK, r3
}
 8005c2a:	46c0      	nop			@ (mov r8, r8)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4965      	ldr	r1, [pc, #404]	@ (8005dcc <UART_RxISR_8BIT_FIFOEN+0x320>)
 8005c38:	400a      	ands	r2, r1
 8005c3a:	609a      	str	r2, [r3, #8]
 8005c3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005c3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c42:	f383 8810 	msr	PRIMASK, r3
}
 8005c46:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	228c      	movs	r2, #140	@ 0x8c
 8005c4c:	2120      	movs	r1, #32
 8005c4e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2200      	movs	r2, #0
 8005c54:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685a      	ldr	r2, [r3, #4]
 8005c62:	2380      	movs	r3, #128	@ 0x80
 8005c64:	041b      	lsls	r3, r3, #16
 8005c66:	4013      	ands	r3, r2
 8005c68:	d018      	beq.n	8005c9c <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 8005c70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005c72:	663b      	str	r3, [r7, #96]	@ 0x60
 8005c74:	2301      	movs	r3, #1
 8005c76:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7a:	f383 8810 	msr	PRIMASK, r3
}
 8005c7e:	46c0      	nop			@ (mov r8, r8)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4951      	ldr	r1, [pc, #324]	@ (8005dd0 <UART_RxISR_8BIT_FIFOEN+0x324>)
 8005c8c:	400a      	ands	r2, r1
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005c92:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c96:	f383 8810 	msr	PRIMASK, r3
}
 8005c9a:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d12f      	bne.n	8005d04 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005caa:	f3ef 8310 	mrs	r3, PRIMASK
 8005cae:	623b      	str	r3, [r7, #32]
  return(result);
 8005cb0:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cba:	f383 8810 	msr	PRIMASK, r3
}
 8005cbe:	46c0      	nop			@ (mov r8, r8)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2110      	movs	r1, #16
 8005ccc:	438a      	bics	r2, r1
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005cd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd6:	f383 8810 	msr	PRIMASK, r3
}
 8005cda:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	69db      	ldr	r3, [r3, #28]
 8005ce2:	2210      	movs	r2, #16
 8005ce4:	4013      	ands	r3, r2
 8005ce6:	2b10      	cmp	r3, #16
 8005ce8:	d103      	bne.n	8005cf2 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2210      	movs	r2, #16
 8005cf0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	225c      	movs	r2, #92	@ 0x5c
 8005cf6:	5a9a      	ldrh	r2, [r3, r2]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	0011      	movs	r1, r2
 8005cfc:	0018      	movs	r0, r3
 8005cfe:	f7fe fffd 	bl	8004cfc <HAL_UARTEx_RxEventCallback>
 8005d02:	e003      	b.n	8005d0c <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	0018      	movs	r0, r3
 8005d08:	f7fb fdf0 	bl	80018ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d0c:	236e      	movs	r3, #110	@ 0x6e
 8005d0e:	18fb      	adds	r3, r7, r3
 8005d10:	881b      	ldrh	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d004      	beq.n	8005d20 <UART_RxISR_8BIT_FIFOEN+0x274>
 8005d16:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8005d18:	2220      	movs	r2, #32
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	d000      	beq.n	8005d20 <UART_RxISR_8BIT_FIFOEN+0x274>
 8005d1e:	e6e8      	b.n	8005af2 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005d20:	205a      	movs	r0, #90	@ 0x5a
 8005d22:	183b      	adds	r3, r7, r0
 8005d24:	687a      	ldr	r2, [r7, #4]
 8005d26:	215e      	movs	r1, #94	@ 0x5e
 8005d28:	5a52      	ldrh	r2, [r2, r1]
 8005d2a:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d2c:	0001      	movs	r1, r0
 8005d2e:	187b      	adds	r3, r7, r1
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d044      	beq.n	8005dc0 <UART_RxISR_8BIT_FIFOEN+0x314>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2268      	movs	r2, #104	@ 0x68
 8005d3a:	5a9b      	ldrh	r3, [r3, r2]
 8005d3c:	187a      	adds	r2, r7, r1
 8005d3e:	8812      	ldrh	r2, [r2, #0]
 8005d40:	429a      	cmp	r2, r3
 8005d42:	d23d      	bcs.n	8005dc0 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d44:	f3ef 8310 	mrs	r3, PRIMASK
 8005d48:	60bb      	str	r3, [r7, #8]
  return(result);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d4c:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d4e:	2301      	movs	r3, #1
 8005d50:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f383 8810 	msr	PRIMASK, r3
}
 8005d58:	46c0      	nop			@ (mov r8, r8)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	689a      	ldr	r2, [r3, #8]
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	491b      	ldr	r1, [pc, #108]	@ (8005dd4 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8005d66:	400a      	ands	r2, r1
 8005d68:	609a      	str	r2, [r3, #8]
 8005d6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d6c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f383 8810 	msr	PRIMASK, r3
}
 8005d74:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a17      	ldr	r2, [pc, #92]	@ (8005dd8 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8005d7a:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005d7c:	f3ef 8310 	mrs	r3, PRIMASK
 8005d80:	617b      	str	r3, [r7, #20]
  return(result);
 8005d82:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005d84:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d86:	2301      	movs	r3, #1
 8005d88:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	f383 8810 	msr	PRIMASK, r3
}
 8005d90:	46c0      	nop			@ (mov r8, r8)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	2120      	movs	r1, #32
 8005d9e:	430a      	orrs	r2, r1
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005da4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	f383 8810 	msr	PRIMASK, r3
}
 8005dac:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005dae:	e007      	b.n	8005dc0 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	699a      	ldr	r2, [r3, #24]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2108      	movs	r1, #8
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	619a      	str	r2, [r3, #24]
}
 8005dc0:	46c0      	nop			@ (mov r8, r8)
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	b020      	add	sp, #128	@ 0x80
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	fffffeff 	.word	0xfffffeff
 8005dcc:	effffffe 	.word	0xeffffffe
 8005dd0:	fbffffff 	.word	0xfbffffff
 8005dd4:	efffffff 	.word	0xefffffff
 8005dd8:	0800573d 	.word	0x0800573d

08005ddc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b0a2      	sub	sp, #136	@ 0x88
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005de4:	2382      	movs	r3, #130	@ 0x82
 8005de6:	18fb      	adds	r3, r7, r3
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	2160      	movs	r1, #96	@ 0x60
 8005dec:	5a52      	ldrh	r2, [r2, r1]
 8005dee:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	2284      	movs	r2, #132	@ 0x84
 8005df8:	18ba      	adds	r2, r7, r2
 8005dfa:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	228c      	movs	r2, #140	@ 0x8c
 8005e10:	589b      	ldr	r3, [r3, r2]
 8005e12:	2b22      	cmp	r3, #34	@ 0x22
 8005e14:	d000      	beq.n	8005e18 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8005e16:	e16f      	b.n	80060f8 <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005e18:	2376      	movs	r3, #118	@ 0x76
 8005e1a:	18fb      	adds	r3, r7, r3
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	2168      	movs	r1, #104	@ 0x68
 8005e20:	5a52      	ldrh	r2, [r2, r1]
 8005e22:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e24:	e114      	b.n	8006050 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e2c:	2174      	movs	r1, #116	@ 0x74
 8005e2e:	187b      	adds	r3, r7, r1
 8005e30:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e36:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8005e38:	187b      	adds	r3, r7, r1
 8005e3a:	2282      	movs	r2, #130	@ 0x82
 8005e3c:	18ba      	adds	r2, r7, r2
 8005e3e:	881b      	ldrh	r3, [r3, #0]
 8005e40:	8812      	ldrh	r2, [r2, #0]
 8005e42:	4013      	ands	r3, r2
 8005e44:	b29a      	uxth	r2, r3
 8005e46:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005e48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e4e:	1c9a      	adds	r2, r3, #2
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	225e      	movs	r2, #94	@ 0x5e
 8005e58:	5a9b      	ldrh	r3, [r3, r2]
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	3b01      	subs	r3, #1
 8005e5e:	b299      	uxth	r1, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	225e      	movs	r2, #94	@ 0x5e
 8005e64:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	69db      	ldr	r3, [r3, #28]
 8005e6c:	2184      	movs	r1, #132	@ 0x84
 8005e6e:	187a      	adds	r2, r7, r1
 8005e70:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e72:	187b      	adds	r3, r7, r1
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	2207      	movs	r2, #7
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d04e      	beq.n	8005f1a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e7c:	187b      	adds	r3, r7, r1
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2201      	movs	r2, #1
 8005e82:	4013      	ands	r3, r2
 8005e84:	d010      	beq.n	8005ea8 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8005e86:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8005e88:	2380      	movs	r3, #128	@ 0x80
 8005e8a:	005b      	lsls	r3, r3, #1
 8005e8c:	4013      	ands	r3, r2
 8005e8e:	d00b      	beq.n	8005ea8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	2201      	movs	r2, #1
 8005e96:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2290      	movs	r2, #144	@ 0x90
 8005e9c:	589b      	ldr	r3, [r3, r2]
 8005e9e:	2201      	movs	r2, #1
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2190      	movs	r1, #144	@ 0x90
 8005ea6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ea8:	2384      	movs	r3, #132	@ 0x84
 8005eaa:	18fb      	adds	r3, r7, r3
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2202      	movs	r2, #2
 8005eb0:	4013      	ands	r3, r2
 8005eb2:	d00f      	beq.n	8005ed4 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005eb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005eb6:	2201      	movs	r2, #1
 8005eb8:	4013      	ands	r3, r2
 8005eba:	d00b      	beq.n	8005ed4 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2202      	movs	r2, #2
 8005ec2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2290      	movs	r2, #144	@ 0x90
 8005ec8:	589b      	ldr	r3, [r3, r2]
 8005eca:	2204      	movs	r2, #4
 8005ecc:	431a      	orrs	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2190      	movs	r1, #144	@ 0x90
 8005ed2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ed4:	2384      	movs	r3, #132	@ 0x84
 8005ed6:	18fb      	adds	r3, r7, r3
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2204      	movs	r2, #4
 8005edc:	4013      	ands	r3, r2
 8005ede:	d00f      	beq.n	8005f00 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005ee0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	d00b      	beq.n	8005f00 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2204      	movs	r2, #4
 8005eee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2290      	movs	r2, #144	@ 0x90
 8005ef4:	589b      	ldr	r3, [r3, r2]
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	431a      	orrs	r2, r3
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2190      	movs	r1, #144	@ 0x90
 8005efe:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2290      	movs	r2, #144	@ 0x90
 8005f04:	589b      	ldr	r3, [r3, r2]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d007      	beq.n	8005f1a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	f7fe feed 	bl	8004cec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2290      	movs	r2, #144	@ 0x90
 8005f16:	2100      	movs	r1, #0
 8005f18:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	225e      	movs	r2, #94	@ 0x5e
 8005f1e:	5a9b      	ldrh	r3, [r3, r2]
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d000      	beq.n	8005f28 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8005f26:	e093      	b.n	8006050 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f28:	f3ef 8310 	mrs	r3, PRIMASK
 8005f2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005f32:	2301      	movs	r3, #1
 8005f34:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f36:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f38:	f383 8810 	msr	PRIMASK, r3
}
 8005f3c:	46c0      	nop			@ (mov r8, r8)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4971      	ldr	r1, [pc, #452]	@ (8006110 <UART_RxISR_16BIT_FIFOEN+0x334>)
 8005f4a:	400a      	ands	r2, r1
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f50:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f52:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f54:	f383 8810 	msr	PRIMASK, r3
}
 8005f58:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005f5a:	f3ef 8310 	mrs	r3, PRIMASK
 8005f5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8005f60:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f62:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005f64:	2301      	movs	r3, #1
 8005f66:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f6a:	f383 8810 	msr	PRIMASK, r3
}
 8005f6e:	46c0      	nop			@ (mov r8, r8)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	689a      	ldr	r2, [r3, #8]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4966      	ldr	r1, [pc, #408]	@ (8006114 <UART_RxISR_16BIT_FIFOEN+0x338>)
 8005f7c:	400a      	ands	r2, r1
 8005f7e:	609a      	str	r2, [r3, #8]
 8005f80:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f82:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f86:	f383 8810 	msr	PRIMASK, r3
}
 8005f8a:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	228c      	movs	r2, #140	@ 0x8c
 8005f90:	2120      	movs	r1, #32
 8005f92:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	685a      	ldr	r2, [r3, #4]
 8005fa6:	2380      	movs	r3, #128	@ 0x80
 8005fa8:	041b      	lsls	r3, r3, #16
 8005faa:	4013      	ands	r3, r2
 8005fac:	d018      	beq.n	8005fe0 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005fae:	f3ef 8310 	mrs	r3, PRIMASK
 8005fb2:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005fb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005fb6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005fb8:	2301      	movs	r3, #1
 8005fba:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fbe:	f383 8810 	msr	PRIMASK, r3
}
 8005fc2:	46c0      	nop			@ (mov r8, r8)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4952      	ldr	r1, [pc, #328]	@ (8006118 <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8005fd0:	400a      	ands	r2, r1
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fda:	f383 8810 	msr	PRIMASK, r3
}
 8005fde:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fe4:	2b01      	cmp	r3, #1
 8005fe6:	d12f      	bne.n	8006048 <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005fee:	f3ef 8310 	mrs	r3, PRIMASK
 8005ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffe:	f383 8810 	msr	PRIMASK, r3
}
 8006002:	46c0      	nop			@ (mov r8, r8)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681a      	ldr	r2, [r3, #0]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	2110      	movs	r1, #16
 8006010:	438a      	bics	r2, r1
 8006012:	601a      	str	r2, [r3, #0]
 8006014:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006016:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006018:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800601a:	f383 8810 	msr	PRIMASK, r3
}
 800601e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	2210      	movs	r2, #16
 8006028:	4013      	ands	r3, r2
 800602a:	2b10      	cmp	r3, #16
 800602c:	d103      	bne.n	8006036 <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	2210      	movs	r2, #16
 8006034:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	225c      	movs	r2, #92	@ 0x5c
 800603a:	5a9a      	ldrh	r2, [r3, r2]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	0011      	movs	r1, r2
 8006040:	0018      	movs	r0, r3
 8006042:	f7fe fe5b 	bl	8004cfc <HAL_UARTEx_RxEventCallback>
 8006046:	e003      	b.n	8006050 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	0018      	movs	r0, r3
 800604c:	f7fb fc4e 	bl	80018ec <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006050:	2376      	movs	r3, #118	@ 0x76
 8006052:	18fb      	adds	r3, r7, r3
 8006054:	881b      	ldrh	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d006      	beq.n	8006068 <UART_RxISR_16BIT_FIFOEN+0x28c>
 800605a:	2384      	movs	r3, #132	@ 0x84
 800605c:	18fb      	adds	r3, r7, r3
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2220      	movs	r2, #32
 8006062:	4013      	ands	r3, r2
 8006064:	d000      	beq.n	8006068 <UART_RxISR_16BIT_FIFOEN+0x28c>
 8006066:	e6de      	b.n	8005e26 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006068:	205e      	movs	r0, #94	@ 0x5e
 800606a:	183b      	adds	r3, r7, r0
 800606c:	687a      	ldr	r2, [r7, #4]
 800606e:	215e      	movs	r1, #94	@ 0x5e
 8006070:	5a52      	ldrh	r2, [r2, r1]
 8006072:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006074:	0001      	movs	r1, r0
 8006076:	187b      	adds	r3, r7, r1
 8006078:	881b      	ldrh	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d044      	beq.n	8006108 <UART_RxISR_16BIT_FIFOEN+0x32c>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2268      	movs	r2, #104	@ 0x68
 8006082:	5a9b      	ldrh	r3, [r3, r2]
 8006084:	187a      	adds	r2, r7, r1
 8006086:	8812      	ldrh	r2, [r2, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d23d      	bcs.n	8006108 <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800608c:	f3ef 8310 	mrs	r3, PRIMASK
 8006090:	60fb      	str	r3, [r7, #12]
  return(result);
 8006092:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006094:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006096:	2301      	movs	r3, #1
 8006098:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f383 8810 	msr	PRIMASK, r3
}
 80060a0:	46c0      	nop			@ (mov r8, r8)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	689a      	ldr	r2, [r3, #8]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	491b      	ldr	r1, [pc, #108]	@ (800611c <UART_RxISR_16BIT_FIFOEN+0x340>)
 80060ae:	400a      	ands	r2, r1
 80060b0:	609a      	str	r2, [r3, #8]
 80060b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80060b4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f383 8810 	msr	PRIMASK, r3
}
 80060bc:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a17      	ldr	r2, [pc, #92]	@ (8006120 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80060c2:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80060c4:	f3ef 8310 	mrs	r3, PRIMASK
 80060c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80060ca:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80060cc:	657b      	str	r3, [r7, #84]	@ 0x54
 80060ce:	2301      	movs	r3, #1
 80060d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	f383 8810 	msr	PRIMASK, r3
}
 80060d8:	46c0      	nop			@ (mov r8, r8)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	2120      	movs	r1, #32
 80060e6:	430a      	orrs	r2, r1
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	f383 8810 	msr	PRIMASK, r3
}
 80060f4:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060f6:	e007      	b.n	8006108 <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	699a      	ldr	r2, [r3, #24]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	2108      	movs	r1, #8
 8006104:	430a      	orrs	r2, r1
 8006106:	619a      	str	r2, [r3, #24]
}
 8006108:	46c0      	nop			@ (mov r8, r8)
 800610a:	46bd      	mov	sp, r7
 800610c:	b022      	add	sp, #136	@ 0x88
 800610e:	bd80      	pop	{r7, pc}
 8006110:	fffffeff 	.word	0xfffffeff
 8006114:	effffffe 	.word	0xeffffffe
 8006118:	fbffffff 	.word	0xfbffffff
 800611c:	efffffff 	.word	0xefffffff
 8006120:	080058f5 	.word	0x080058f5

08006124 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b082      	sub	sp, #8
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800612c:	46c0      	nop			@ (mov r8, r8)
 800612e:	46bd      	mov	sp, r7
 8006130:	b002      	add	sp, #8
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800613c:	46c0      	nop			@ (mov r8, r8)
 800613e:	46bd      	mov	sp, r7
 8006140:	b002      	add	sp, #8
 8006142:	bd80      	pop	{r7, pc}

08006144 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800614c:	46c0      	nop			@ (mov r8, r8)
 800614e:	46bd      	mov	sp, r7
 8006150:	b002      	add	sp, #8
 8006152:	bd80      	pop	{r7, pc}

08006154 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b084      	sub	sp, #16
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2284      	movs	r2, #132	@ 0x84
 8006160:	5c9b      	ldrb	r3, [r3, r2]
 8006162:	2b01      	cmp	r3, #1
 8006164:	d101      	bne.n	800616a <HAL_UARTEx_EnableFifoMode+0x16>
 8006166:	2302      	movs	r3, #2
 8006168:	e02d      	b.n	80061c6 <HAL_UARTEx_EnableFifoMode+0x72>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2284      	movs	r2, #132	@ 0x84
 800616e:	2101      	movs	r1, #1
 8006170:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2288      	movs	r2, #136	@ 0x88
 8006176:	2124      	movs	r1, #36	@ 0x24
 8006178:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2101      	movs	r1, #1
 800618e:	438a      	bics	r2, r1
 8006190:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2280      	movs	r2, #128	@ 0x80
 8006196:	0592      	lsls	r2, r2, #22
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2280      	movs	r2, #128	@ 0x80
 80061a0:	0592      	lsls	r2, r2, #22
 80061a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68fa      	ldr	r2, [r7, #12]
 80061aa:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	0018      	movs	r0, r3
 80061b0:	f000 f88e 	bl	80062d0 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2288      	movs	r2, #136	@ 0x88
 80061b8:	2120      	movs	r1, #32
 80061ba:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2284      	movs	r2, #132	@ 0x84
 80061c0:	2100      	movs	r1, #0
 80061c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	0018      	movs	r0, r3
 80061c8:	46bd      	mov	sp, r7
 80061ca:	b004      	add	sp, #16
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2284      	movs	r2, #132	@ 0x84
 80061dc:	5c9b      	ldrb	r3, [r3, r2]
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d101      	bne.n	80061e6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061e2:	2302      	movs	r3, #2
 80061e4:	e02e      	b.n	8006244 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2284      	movs	r2, #132	@ 0x84
 80061ea:	2101      	movs	r1, #1
 80061ec:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2288      	movs	r2, #136	@ 0x88
 80061f2:	2124      	movs	r1, #36	@ 0x24
 80061f4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	2101      	movs	r1, #1
 800620a:	438a      	bics	r2, r1
 800620c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	00db      	lsls	r3, r3, #3
 8006216:	08d9      	lsrs	r1, r3, #3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	683a      	ldr	r2, [r7, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	0018      	movs	r0, r3
 8006226:	f000 f853 	bl	80062d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68fa      	ldr	r2, [r7, #12]
 8006230:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2288      	movs	r2, #136	@ 0x88
 8006236:	2120      	movs	r1, #32
 8006238:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2284      	movs	r2, #132	@ 0x84
 800623e:	2100      	movs	r1, #0
 8006240:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	0018      	movs	r0, r3
 8006246:	46bd      	mov	sp, r7
 8006248:	b004      	add	sp, #16
 800624a:	bd80      	pop	{r7, pc}

0800624c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2284      	movs	r2, #132	@ 0x84
 800625a:	5c9b      	ldrb	r3, [r3, r2]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d101      	bne.n	8006264 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006260:	2302      	movs	r3, #2
 8006262:	e02f      	b.n	80062c4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2284      	movs	r2, #132	@ 0x84
 8006268:	2101      	movs	r1, #1
 800626a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2288      	movs	r2, #136	@ 0x88
 8006270:	2124      	movs	r1, #36	@ 0x24
 8006272:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2101      	movs	r1, #1
 8006288:	438a      	bics	r2, r1
 800628a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	689b      	ldr	r3, [r3, #8]
 8006292:	4a0e      	ldr	r2, [pc, #56]	@ (80062cc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8006294:	4013      	ands	r3, r2
 8006296:	0019      	movs	r1, r3
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	0018      	movs	r0, r3
 80062a6:	f000 f813 	bl	80062d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	68fa      	ldr	r2, [r7, #12]
 80062b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2288      	movs	r2, #136	@ 0x88
 80062b6:	2120      	movs	r1, #32
 80062b8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2284      	movs	r2, #132	@ 0x84
 80062be:	2100      	movs	r1, #0
 80062c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b004      	add	sp, #16
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	f1ffffff 	.word	0xf1ffffff

080062d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d108      	bne.n	80062f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	226a      	movs	r2, #106	@ 0x6a
 80062e4:	2101      	movs	r1, #1
 80062e6:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2268      	movs	r2, #104	@ 0x68
 80062ec:	2101      	movs	r1, #1
 80062ee:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062f0:	e043      	b.n	800637a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062f2:	260f      	movs	r6, #15
 80062f4:	19bb      	adds	r3, r7, r6
 80062f6:	2208      	movs	r2, #8
 80062f8:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062fa:	200e      	movs	r0, #14
 80062fc:	183b      	adds	r3, r7, r0
 80062fe:	2208      	movs	r2, #8
 8006300:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	0e5b      	lsrs	r3, r3, #25
 800630a:	b2da      	uxtb	r2, r3
 800630c:	240d      	movs	r4, #13
 800630e:	193b      	adds	r3, r7, r4
 8006310:	2107      	movs	r1, #7
 8006312:	400a      	ands	r2, r1
 8006314:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	0f5b      	lsrs	r3, r3, #29
 800631e:	b2da      	uxtb	r2, r3
 8006320:	250c      	movs	r5, #12
 8006322:	197b      	adds	r3, r7, r5
 8006324:	2107      	movs	r1, #7
 8006326:	400a      	ands	r2, r1
 8006328:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800632a:	183b      	adds	r3, r7, r0
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	197a      	adds	r2, r7, r5
 8006330:	7812      	ldrb	r2, [r2, #0]
 8006332:	4914      	ldr	r1, [pc, #80]	@ (8006384 <UARTEx_SetNbDataToProcess+0xb4>)
 8006334:	5c8a      	ldrb	r2, [r1, r2]
 8006336:	435a      	muls	r2, r3
 8006338:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 800633a:	197b      	adds	r3, r7, r5
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	4a12      	ldr	r2, [pc, #72]	@ (8006388 <UARTEx_SetNbDataToProcess+0xb8>)
 8006340:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006342:	0019      	movs	r1, r3
 8006344:	f7f9 ff7c 	bl	8000240 <__divsi3>
 8006348:	0003      	movs	r3, r0
 800634a:	b299      	uxth	r1, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	226a      	movs	r2, #106	@ 0x6a
 8006350:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006352:	19bb      	adds	r3, r7, r6
 8006354:	781b      	ldrb	r3, [r3, #0]
 8006356:	193a      	adds	r2, r7, r4
 8006358:	7812      	ldrb	r2, [r2, #0]
 800635a:	490a      	ldr	r1, [pc, #40]	@ (8006384 <UARTEx_SetNbDataToProcess+0xb4>)
 800635c:	5c8a      	ldrb	r2, [r1, r2]
 800635e:	435a      	muls	r2, r3
 8006360:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8006362:	193b      	adds	r3, r7, r4
 8006364:	781b      	ldrb	r3, [r3, #0]
 8006366:	4a08      	ldr	r2, [pc, #32]	@ (8006388 <UARTEx_SetNbDataToProcess+0xb8>)
 8006368:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800636a:	0019      	movs	r1, r3
 800636c:	f7f9 ff68 	bl	8000240 <__divsi3>
 8006370:	0003      	movs	r3, r0
 8006372:	b299      	uxth	r1, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2268      	movs	r2, #104	@ 0x68
 8006378:	5299      	strh	r1, [r3, r2]
}
 800637a:	46c0      	nop			@ (mov r8, r8)
 800637c:	46bd      	mov	sp, r7
 800637e:	b005      	add	sp, #20
 8006380:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006382:	46c0      	nop			@ (mov r8, r8)
 8006384:	08006ed8 	.word	0x08006ed8
 8006388:	08006ee0 	.word	0x08006ee0

0800638c <siprintf>:
 800638c:	b40e      	push	{r1, r2, r3}
 800638e:	b500      	push	{lr}
 8006390:	490b      	ldr	r1, [pc, #44]	@ (80063c0 <siprintf+0x34>)
 8006392:	b09c      	sub	sp, #112	@ 0x70
 8006394:	ab1d      	add	r3, sp, #116	@ 0x74
 8006396:	9002      	str	r0, [sp, #8]
 8006398:	9006      	str	r0, [sp, #24]
 800639a:	9107      	str	r1, [sp, #28]
 800639c:	9104      	str	r1, [sp, #16]
 800639e:	4809      	ldr	r0, [pc, #36]	@ (80063c4 <siprintf+0x38>)
 80063a0:	4909      	ldr	r1, [pc, #36]	@ (80063c8 <siprintf+0x3c>)
 80063a2:	cb04      	ldmia	r3!, {r2}
 80063a4:	9105      	str	r1, [sp, #20]
 80063a6:	6800      	ldr	r0, [r0, #0]
 80063a8:	a902      	add	r1, sp, #8
 80063aa:	9301      	str	r3, [sp, #4]
 80063ac:	f000 f99e 	bl	80066ec <_svfiprintf_r>
 80063b0:	2200      	movs	r2, #0
 80063b2:	9b02      	ldr	r3, [sp, #8]
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	b01c      	add	sp, #112	@ 0x70
 80063b8:	bc08      	pop	{r3}
 80063ba:	b003      	add	sp, #12
 80063bc:	4718      	bx	r3
 80063be:	46c0      	nop			@ (mov r8, r8)
 80063c0:	7fffffff 	.word	0x7fffffff
 80063c4:	20000018 	.word	0x20000018
 80063c8:	ffff0208 	.word	0xffff0208

080063cc <memset>:
 80063cc:	0003      	movs	r3, r0
 80063ce:	1882      	adds	r2, r0, r2
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d100      	bne.n	80063d6 <memset+0xa>
 80063d4:	4770      	bx	lr
 80063d6:	7019      	strb	r1, [r3, #0]
 80063d8:	3301      	adds	r3, #1
 80063da:	e7f9      	b.n	80063d0 <memset+0x4>

080063dc <__errno>:
 80063dc:	4b01      	ldr	r3, [pc, #4]	@ (80063e4 <__errno+0x8>)
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	4770      	bx	lr
 80063e2:	46c0      	nop			@ (mov r8, r8)
 80063e4:	20000018 	.word	0x20000018

080063e8 <__libc_init_array>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	2600      	movs	r6, #0
 80063ec:	4c0c      	ldr	r4, [pc, #48]	@ (8006420 <__libc_init_array+0x38>)
 80063ee:	4d0d      	ldr	r5, [pc, #52]	@ (8006424 <__libc_init_array+0x3c>)
 80063f0:	1b64      	subs	r4, r4, r5
 80063f2:	10a4      	asrs	r4, r4, #2
 80063f4:	42a6      	cmp	r6, r4
 80063f6:	d109      	bne.n	800640c <__libc_init_array+0x24>
 80063f8:	2600      	movs	r6, #0
 80063fa:	f000 fc65 	bl	8006cc8 <_init>
 80063fe:	4c0a      	ldr	r4, [pc, #40]	@ (8006428 <__libc_init_array+0x40>)
 8006400:	4d0a      	ldr	r5, [pc, #40]	@ (800642c <__libc_init_array+0x44>)
 8006402:	1b64      	subs	r4, r4, r5
 8006404:	10a4      	asrs	r4, r4, #2
 8006406:	42a6      	cmp	r6, r4
 8006408:	d105      	bne.n	8006416 <__libc_init_array+0x2e>
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	00b3      	lsls	r3, r6, #2
 800640e:	58eb      	ldr	r3, [r5, r3]
 8006410:	4798      	blx	r3
 8006412:	3601      	adds	r6, #1
 8006414:	e7ee      	b.n	80063f4 <__libc_init_array+0xc>
 8006416:	00b3      	lsls	r3, r6, #2
 8006418:	58eb      	ldr	r3, [r5, r3]
 800641a:	4798      	blx	r3
 800641c:	3601      	adds	r6, #1
 800641e:	e7f2      	b.n	8006406 <__libc_init_array+0x1e>
 8006420:	08006f1c 	.word	0x08006f1c
 8006424:	08006f1c 	.word	0x08006f1c
 8006428:	08006f20 	.word	0x08006f20
 800642c:	08006f1c 	.word	0x08006f1c

08006430 <__retarget_lock_acquire_recursive>:
 8006430:	4770      	bx	lr

08006432 <__retarget_lock_release_recursive>:
 8006432:	4770      	bx	lr

08006434 <_free_r>:
 8006434:	b570      	push	{r4, r5, r6, lr}
 8006436:	0005      	movs	r5, r0
 8006438:	1e0c      	subs	r4, r1, #0
 800643a:	d010      	beq.n	800645e <_free_r+0x2a>
 800643c:	3c04      	subs	r4, #4
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	da00      	bge.n	8006446 <_free_r+0x12>
 8006444:	18e4      	adds	r4, r4, r3
 8006446:	0028      	movs	r0, r5
 8006448:	f000 f8e0 	bl	800660c <__malloc_lock>
 800644c:	4a1d      	ldr	r2, [pc, #116]	@ (80064c4 <_free_r+0x90>)
 800644e:	6813      	ldr	r3, [r2, #0]
 8006450:	2b00      	cmp	r3, #0
 8006452:	d105      	bne.n	8006460 <_free_r+0x2c>
 8006454:	6063      	str	r3, [r4, #4]
 8006456:	6014      	str	r4, [r2, #0]
 8006458:	0028      	movs	r0, r5
 800645a:	f000 f8df 	bl	800661c <__malloc_unlock>
 800645e:	bd70      	pop	{r4, r5, r6, pc}
 8006460:	42a3      	cmp	r3, r4
 8006462:	d908      	bls.n	8006476 <_free_r+0x42>
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	1821      	adds	r1, r4, r0
 8006468:	428b      	cmp	r3, r1
 800646a:	d1f3      	bne.n	8006454 <_free_r+0x20>
 800646c:	6819      	ldr	r1, [r3, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	1809      	adds	r1, r1, r0
 8006472:	6021      	str	r1, [r4, #0]
 8006474:	e7ee      	b.n	8006454 <_free_r+0x20>
 8006476:	001a      	movs	r2, r3
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d001      	beq.n	8006482 <_free_r+0x4e>
 800647e:	42a3      	cmp	r3, r4
 8006480:	d9f9      	bls.n	8006476 <_free_r+0x42>
 8006482:	6811      	ldr	r1, [r2, #0]
 8006484:	1850      	adds	r0, r2, r1
 8006486:	42a0      	cmp	r0, r4
 8006488:	d10b      	bne.n	80064a2 <_free_r+0x6e>
 800648a:	6820      	ldr	r0, [r4, #0]
 800648c:	1809      	adds	r1, r1, r0
 800648e:	1850      	adds	r0, r2, r1
 8006490:	6011      	str	r1, [r2, #0]
 8006492:	4283      	cmp	r3, r0
 8006494:	d1e0      	bne.n	8006458 <_free_r+0x24>
 8006496:	6818      	ldr	r0, [r3, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	1841      	adds	r1, r0, r1
 800649c:	6011      	str	r1, [r2, #0]
 800649e:	6053      	str	r3, [r2, #4]
 80064a0:	e7da      	b.n	8006458 <_free_r+0x24>
 80064a2:	42a0      	cmp	r0, r4
 80064a4:	d902      	bls.n	80064ac <_free_r+0x78>
 80064a6:	230c      	movs	r3, #12
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	e7d5      	b.n	8006458 <_free_r+0x24>
 80064ac:	6820      	ldr	r0, [r4, #0]
 80064ae:	1821      	adds	r1, r4, r0
 80064b0:	428b      	cmp	r3, r1
 80064b2:	d103      	bne.n	80064bc <_free_r+0x88>
 80064b4:	6819      	ldr	r1, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	1809      	adds	r1, r1, r0
 80064ba:	6021      	str	r1, [r4, #0]
 80064bc:	6063      	str	r3, [r4, #4]
 80064be:	6054      	str	r4, [r2, #4]
 80064c0:	e7ca      	b.n	8006458 <_free_r+0x24>
 80064c2:	46c0      	nop			@ (mov r8, r8)
 80064c4:	200006d0 	.word	0x200006d0

080064c8 <sbrk_aligned>:
 80064c8:	b570      	push	{r4, r5, r6, lr}
 80064ca:	4e0f      	ldr	r6, [pc, #60]	@ (8006508 <sbrk_aligned+0x40>)
 80064cc:	000d      	movs	r5, r1
 80064ce:	6831      	ldr	r1, [r6, #0]
 80064d0:	0004      	movs	r4, r0
 80064d2:	2900      	cmp	r1, #0
 80064d4:	d102      	bne.n	80064dc <sbrk_aligned+0x14>
 80064d6:	f000 fb99 	bl	8006c0c <_sbrk_r>
 80064da:	6030      	str	r0, [r6, #0]
 80064dc:	0029      	movs	r1, r5
 80064de:	0020      	movs	r0, r4
 80064e0:	f000 fb94 	bl	8006c0c <_sbrk_r>
 80064e4:	1c43      	adds	r3, r0, #1
 80064e6:	d103      	bne.n	80064f0 <sbrk_aligned+0x28>
 80064e8:	2501      	movs	r5, #1
 80064ea:	426d      	negs	r5, r5
 80064ec:	0028      	movs	r0, r5
 80064ee:	bd70      	pop	{r4, r5, r6, pc}
 80064f0:	2303      	movs	r3, #3
 80064f2:	1cc5      	adds	r5, r0, #3
 80064f4:	439d      	bics	r5, r3
 80064f6:	42a8      	cmp	r0, r5
 80064f8:	d0f8      	beq.n	80064ec <sbrk_aligned+0x24>
 80064fa:	1a29      	subs	r1, r5, r0
 80064fc:	0020      	movs	r0, r4
 80064fe:	f000 fb85 	bl	8006c0c <_sbrk_r>
 8006502:	3001      	adds	r0, #1
 8006504:	d1f2      	bne.n	80064ec <sbrk_aligned+0x24>
 8006506:	e7ef      	b.n	80064e8 <sbrk_aligned+0x20>
 8006508:	200006cc 	.word	0x200006cc

0800650c <_malloc_r>:
 800650c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800650e:	2203      	movs	r2, #3
 8006510:	1ccb      	adds	r3, r1, #3
 8006512:	4393      	bics	r3, r2
 8006514:	3308      	adds	r3, #8
 8006516:	0005      	movs	r5, r0
 8006518:	001f      	movs	r7, r3
 800651a:	2b0c      	cmp	r3, #12
 800651c:	d234      	bcs.n	8006588 <_malloc_r+0x7c>
 800651e:	270c      	movs	r7, #12
 8006520:	42b9      	cmp	r1, r7
 8006522:	d833      	bhi.n	800658c <_malloc_r+0x80>
 8006524:	0028      	movs	r0, r5
 8006526:	f000 f871 	bl	800660c <__malloc_lock>
 800652a:	4e37      	ldr	r6, [pc, #220]	@ (8006608 <_malloc_r+0xfc>)
 800652c:	6833      	ldr	r3, [r6, #0]
 800652e:	001c      	movs	r4, r3
 8006530:	2c00      	cmp	r4, #0
 8006532:	d12f      	bne.n	8006594 <_malloc_r+0x88>
 8006534:	0039      	movs	r1, r7
 8006536:	0028      	movs	r0, r5
 8006538:	f7ff ffc6 	bl	80064c8 <sbrk_aligned>
 800653c:	0004      	movs	r4, r0
 800653e:	1c43      	adds	r3, r0, #1
 8006540:	d15f      	bne.n	8006602 <_malloc_r+0xf6>
 8006542:	6834      	ldr	r4, [r6, #0]
 8006544:	9400      	str	r4, [sp, #0]
 8006546:	9b00      	ldr	r3, [sp, #0]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d14a      	bne.n	80065e2 <_malloc_r+0xd6>
 800654c:	2c00      	cmp	r4, #0
 800654e:	d052      	beq.n	80065f6 <_malloc_r+0xea>
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	0028      	movs	r0, r5
 8006554:	18e3      	adds	r3, r4, r3
 8006556:	9900      	ldr	r1, [sp, #0]
 8006558:	9301      	str	r3, [sp, #4]
 800655a:	f000 fb57 	bl	8006c0c <_sbrk_r>
 800655e:	9b01      	ldr	r3, [sp, #4]
 8006560:	4283      	cmp	r3, r0
 8006562:	d148      	bne.n	80065f6 <_malloc_r+0xea>
 8006564:	6823      	ldr	r3, [r4, #0]
 8006566:	0028      	movs	r0, r5
 8006568:	1aff      	subs	r7, r7, r3
 800656a:	0039      	movs	r1, r7
 800656c:	f7ff ffac 	bl	80064c8 <sbrk_aligned>
 8006570:	3001      	adds	r0, #1
 8006572:	d040      	beq.n	80065f6 <_malloc_r+0xea>
 8006574:	6823      	ldr	r3, [r4, #0]
 8006576:	19db      	adds	r3, r3, r7
 8006578:	6023      	str	r3, [r4, #0]
 800657a:	6833      	ldr	r3, [r6, #0]
 800657c:	685a      	ldr	r2, [r3, #4]
 800657e:	2a00      	cmp	r2, #0
 8006580:	d133      	bne.n	80065ea <_malloc_r+0xde>
 8006582:	9b00      	ldr	r3, [sp, #0]
 8006584:	6033      	str	r3, [r6, #0]
 8006586:	e019      	b.n	80065bc <_malloc_r+0xb0>
 8006588:	2b00      	cmp	r3, #0
 800658a:	dac9      	bge.n	8006520 <_malloc_r+0x14>
 800658c:	230c      	movs	r3, #12
 800658e:	602b      	str	r3, [r5, #0]
 8006590:	2000      	movs	r0, #0
 8006592:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006594:	6821      	ldr	r1, [r4, #0]
 8006596:	1bc9      	subs	r1, r1, r7
 8006598:	d420      	bmi.n	80065dc <_malloc_r+0xd0>
 800659a:	290b      	cmp	r1, #11
 800659c:	d90a      	bls.n	80065b4 <_malloc_r+0xa8>
 800659e:	19e2      	adds	r2, r4, r7
 80065a0:	6027      	str	r7, [r4, #0]
 80065a2:	42a3      	cmp	r3, r4
 80065a4:	d104      	bne.n	80065b0 <_malloc_r+0xa4>
 80065a6:	6032      	str	r2, [r6, #0]
 80065a8:	6863      	ldr	r3, [r4, #4]
 80065aa:	6011      	str	r1, [r2, #0]
 80065ac:	6053      	str	r3, [r2, #4]
 80065ae:	e005      	b.n	80065bc <_malloc_r+0xb0>
 80065b0:	605a      	str	r2, [r3, #4]
 80065b2:	e7f9      	b.n	80065a8 <_malloc_r+0x9c>
 80065b4:	6862      	ldr	r2, [r4, #4]
 80065b6:	42a3      	cmp	r3, r4
 80065b8:	d10e      	bne.n	80065d8 <_malloc_r+0xcc>
 80065ba:	6032      	str	r2, [r6, #0]
 80065bc:	0028      	movs	r0, r5
 80065be:	f000 f82d 	bl	800661c <__malloc_unlock>
 80065c2:	0020      	movs	r0, r4
 80065c4:	2207      	movs	r2, #7
 80065c6:	300b      	adds	r0, #11
 80065c8:	1d23      	adds	r3, r4, #4
 80065ca:	4390      	bics	r0, r2
 80065cc:	1ac2      	subs	r2, r0, r3
 80065ce:	4298      	cmp	r0, r3
 80065d0:	d0df      	beq.n	8006592 <_malloc_r+0x86>
 80065d2:	1a1b      	subs	r3, r3, r0
 80065d4:	50a3      	str	r3, [r4, r2]
 80065d6:	e7dc      	b.n	8006592 <_malloc_r+0x86>
 80065d8:	605a      	str	r2, [r3, #4]
 80065da:	e7ef      	b.n	80065bc <_malloc_r+0xb0>
 80065dc:	0023      	movs	r3, r4
 80065de:	6864      	ldr	r4, [r4, #4]
 80065e0:	e7a6      	b.n	8006530 <_malloc_r+0x24>
 80065e2:	9c00      	ldr	r4, [sp, #0]
 80065e4:	6863      	ldr	r3, [r4, #4]
 80065e6:	9300      	str	r3, [sp, #0]
 80065e8:	e7ad      	b.n	8006546 <_malloc_r+0x3a>
 80065ea:	001a      	movs	r2, r3
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	42a3      	cmp	r3, r4
 80065f0:	d1fb      	bne.n	80065ea <_malloc_r+0xde>
 80065f2:	2300      	movs	r3, #0
 80065f4:	e7da      	b.n	80065ac <_malloc_r+0xa0>
 80065f6:	230c      	movs	r3, #12
 80065f8:	0028      	movs	r0, r5
 80065fa:	602b      	str	r3, [r5, #0]
 80065fc:	f000 f80e 	bl	800661c <__malloc_unlock>
 8006600:	e7c6      	b.n	8006590 <_malloc_r+0x84>
 8006602:	6007      	str	r7, [r0, #0]
 8006604:	e7da      	b.n	80065bc <_malloc_r+0xb0>
 8006606:	46c0      	nop			@ (mov r8, r8)
 8006608:	200006d0 	.word	0x200006d0

0800660c <__malloc_lock>:
 800660c:	b510      	push	{r4, lr}
 800660e:	4802      	ldr	r0, [pc, #8]	@ (8006618 <__malloc_lock+0xc>)
 8006610:	f7ff ff0e 	bl	8006430 <__retarget_lock_acquire_recursive>
 8006614:	bd10      	pop	{r4, pc}
 8006616:	46c0      	nop			@ (mov r8, r8)
 8006618:	200006c8 	.word	0x200006c8

0800661c <__malloc_unlock>:
 800661c:	b510      	push	{r4, lr}
 800661e:	4802      	ldr	r0, [pc, #8]	@ (8006628 <__malloc_unlock+0xc>)
 8006620:	f7ff ff07 	bl	8006432 <__retarget_lock_release_recursive>
 8006624:	bd10      	pop	{r4, pc}
 8006626:	46c0      	nop			@ (mov r8, r8)
 8006628:	200006c8 	.word	0x200006c8

0800662c <__ssputs_r>:
 800662c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800662e:	688e      	ldr	r6, [r1, #8]
 8006630:	b085      	sub	sp, #20
 8006632:	001f      	movs	r7, r3
 8006634:	000c      	movs	r4, r1
 8006636:	680b      	ldr	r3, [r1, #0]
 8006638:	9002      	str	r0, [sp, #8]
 800663a:	9203      	str	r2, [sp, #12]
 800663c:	42be      	cmp	r6, r7
 800663e:	d830      	bhi.n	80066a2 <__ssputs_r+0x76>
 8006640:	210c      	movs	r1, #12
 8006642:	5e62      	ldrsh	r2, [r4, r1]
 8006644:	2190      	movs	r1, #144	@ 0x90
 8006646:	00c9      	lsls	r1, r1, #3
 8006648:	420a      	tst	r2, r1
 800664a:	d028      	beq.n	800669e <__ssputs_r+0x72>
 800664c:	2003      	movs	r0, #3
 800664e:	6921      	ldr	r1, [r4, #16]
 8006650:	1a5b      	subs	r3, r3, r1
 8006652:	9301      	str	r3, [sp, #4]
 8006654:	6963      	ldr	r3, [r4, #20]
 8006656:	4343      	muls	r3, r0
 8006658:	9801      	ldr	r0, [sp, #4]
 800665a:	0fdd      	lsrs	r5, r3, #31
 800665c:	18ed      	adds	r5, r5, r3
 800665e:	1c7b      	adds	r3, r7, #1
 8006660:	181b      	adds	r3, r3, r0
 8006662:	106d      	asrs	r5, r5, #1
 8006664:	42ab      	cmp	r3, r5
 8006666:	d900      	bls.n	800666a <__ssputs_r+0x3e>
 8006668:	001d      	movs	r5, r3
 800666a:	0552      	lsls	r2, r2, #21
 800666c:	d528      	bpl.n	80066c0 <__ssputs_r+0x94>
 800666e:	0029      	movs	r1, r5
 8006670:	9802      	ldr	r0, [sp, #8]
 8006672:	f7ff ff4b 	bl	800650c <_malloc_r>
 8006676:	1e06      	subs	r6, r0, #0
 8006678:	d02c      	beq.n	80066d4 <__ssputs_r+0xa8>
 800667a:	9a01      	ldr	r2, [sp, #4]
 800667c:	6921      	ldr	r1, [r4, #16]
 800667e:	f000 fae2 	bl	8006c46 <memcpy>
 8006682:	89a2      	ldrh	r2, [r4, #12]
 8006684:	4b18      	ldr	r3, [pc, #96]	@ (80066e8 <__ssputs_r+0xbc>)
 8006686:	401a      	ands	r2, r3
 8006688:	2380      	movs	r3, #128	@ 0x80
 800668a:	4313      	orrs	r3, r2
 800668c:	81a3      	strh	r3, [r4, #12]
 800668e:	9b01      	ldr	r3, [sp, #4]
 8006690:	6126      	str	r6, [r4, #16]
 8006692:	18f6      	adds	r6, r6, r3
 8006694:	6026      	str	r6, [r4, #0]
 8006696:	003e      	movs	r6, r7
 8006698:	6165      	str	r5, [r4, #20]
 800669a:	1aed      	subs	r5, r5, r3
 800669c:	60a5      	str	r5, [r4, #8]
 800669e:	42be      	cmp	r6, r7
 80066a0:	d900      	bls.n	80066a4 <__ssputs_r+0x78>
 80066a2:	003e      	movs	r6, r7
 80066a4:	0032      	movs	r2, r6
 80066a6:	9903      	ldr	r1, [sp, #12]
 80066a8:	6820      	ldr	r0, [r4, #0]
 80066aa:	f000 fa9b 	bl	8006be4 <memmove>
 80066ae:	2000      	movs	r0, #0
 80066b0:	68a3      	ldr	r3, [r4, #8]
 80066b2:	1b9b      	subs	r3, r3, r6
 80066b4:	60a3      	str	r3, [r4, #8]
 80066b6:	6823      	ldr	r3, [r4, #0]
 80066b8:	199b      	adds	r3, r3, r6
 80066ba:	6023      	str	r3, [r4, #0]
 80066bc:	b005      	add	sp, #20
 80066be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066c0:	002a      	movs	r2, r5
 80066c2:	9802      	ldr	r0, [sp, #8]
 80066c4:	f000 fac8 	bl	8006c58 <_realloc_r>
 80066c8:	1e06      	subs	r6, r0, #0
 80066ca:	d1e0      	bne.n	800668e <__ssputs_r+0x62>
 80066cc:	6921      	ldr	r1, [r4, #16]
 80066ce:	9802      	ldr	r0, [sp, #8]
 80066d0:	f7ff feb0 	bl	8006434 <_free_r>
 80066d4:	230c      	movs	r3, #12
 80066d6:	2001      	movs	r0, #1
 80066d8:	9a02      	ldr	r2, [sp, #8]
 80066da:	4240      	negs	r0, r0
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	89a2      	ldrh	r2, [r4, #12]
 80066e0:	3334      	adds	r3, #52	@ 0x34
 80066e2:	4313      	orrs	r3, r2
 80066e4:	81a3      	strh	r3, [r4, #12]
 80066e6:	e7e9      	b.n	80066bc <__ssputs_r+0x90>
 80066e8:	fffffb7f 	.word	0xfffffb7f

080066ec <_svfiprintf_r>:
 80066ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ee:	b0a1      	sub	sp, #132	@ 0x84
 80066f0:	9003      	str	r0, [sp, #12]
 80066f2:	001d      	movs	r5, r3
 80066f4:	898b      	ldrh	r3, [r1, #12]
 80066f6:	000f      	movs	r7, r1
 80066f8:	0016      	movs	r6, r2
 80066fa:	061b      	lsls	r3, r3, #24
 80066fc:	d511      	bpl.n	8006722 <_svfiprintf_r+0x36>
 80066fe:	690b      	ldr	r3, [r1, #16]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10e      	bne.n	8006722 <_svfiprintf_r+0x36>
 8006704:	2140      	movs	r1, #64	@ 0x40
 8006706:	f7ff ff01 	bl	800650c <_malloc_r>
 800670a:	6038      	str	r0, [r7, #0]
 800670c:	6138      	str	r0, [r7, #16]
 800670e:	2800      	cmp	r0, #0
 8006710:	d105      	bne.n	800671e <_svfiprintf_r+0x32>
 8006712:	230c      	movs	r3, #12
 8006714:	9a03      	ldr	r2, [sp, #12]
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	2001      	movs	r0, #1
 800671a:	4240      	negs	r0, r0
 800671c:	e0cf      	b.n	80068be <_svfiprintf_r+0x1d2>
 800671e:	2340      	movs	r3, #64	@ 0x40
 8006720:	617b      	str	r3, [r7, #20]
 8006722:	2300      	movs	r3, #0
 8006724:	ac08      	add	r4, sp, #32
 8006726:	6163      	str	r3, [r4, #20]
 8006728:	3320      	adds	r3, #32
 800672a:	7663      	strb	r3, [r4, #25]
 800672c:	3310      	adds	r3, #16
 800672e:	76a3      	strb	r3, [r4, #26]
 8006730:	9507      	str	r5, [sp, #28]
 8006732:	0035      	movs	r5, r6
 8006734:	782b      	ldrb	r3, [r5, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d001      	beq.n	800673e <_svfiprintf_r+0x52>
 800673a:	2b25      	cmp	r3, #37	@ 0x25
 800673c:	d148      	bne.n	80067d0 <_svfiprintf_r+0xe4>
 800673e:	1bab      	subs	r3, r5, r6
 8006740:	9305      	str	r3, [sp, #20]
 8006742:	42b5      	cmp	r5, r6
 8006744:	d00b      	beq.n	800675e <_svfiprintf_r+0x72>
 8006746:	0032      	movs	r2, r6
 8006748:	0039      	movs	r1, r7
 800674a:	9803      	ldr	r0, [sp, #12]
 800674c:	f7ff ff6e 	bl	800662c <__ssputs_r>
 8006750:	3001      	adds	r0, #1
 8006752:	d100      	bne.n	8006756 <_svfiprintf_r+0x6a>
 8006754:	e0ae      	b.n	80068b4 <_svfiprintf_r+0x1c8>
 8006756:	6963      	ldr	r3, [r4, #20]
 8006758:	9a05      	ldr	r2, [sp, #20]
 800675a:	189b      	adds	r3, r3, r2
 800675c:	6163      	str	r3, [r4, #20]
 800675e:	782b      	ldrb	r3, [r5, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d100      	bne.n	8006766 <_svfiprintf_r+0x7a>
 8006764:	e0a6      	b.n	80068b4 <_svfiprintf_r+0x1c8>
 8006766:	2201      	movs	r2, #1
 8006768:	2300      	movs	r3, #0
 800676a:	4252      	negs	r2, r2
 800676c:	6062      	str	r2, [r4, #4]
 800676e:	a904      	add	r1, sp, #16
 8006770:	3254      	adds	r2, #84	@ 0x54
 8006772:	1852      	adds	r2, r2, r1
 8006774:	1c6e      	adds	r6, r5, #1
 8006776:	6023      	str	r3, [r4, #0]
 8006778:	60e3      	str	r3, [r4, #12]
 800677a:	60a3      	str	r3, [r4, #8]
 800677c:	7013      	strb	r3, [r2, #0]
 800677e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8006780:	4b54      	ldr	r3, [pc, #336]	@ (80068d4 <_svfiprintf_r+0x1e8>)
 8006782:	2205      	movs	r2, #5
 8006784:	0018      	movs	r0, r3
 8006786:	7831      	ldrb	r1, [r6, #0]
 8006788:	9305      	str	r3, [sp, #20]
 800678a:	f000 fa51 	bl	8006c30 <memchr>
 800678e:	1c75      	adds	r5, r6, #1
 8006790:	2800      	cmp	r0, #0
 8006792:	d11f      	bne.n	80067d4 <_svfiprintf_r+0xe8>
 8006794:	6822      	ldr	r2, [r4, #0]
 8006796:	06d3      	lsls	r3, r2, #27
 8006798:	d504      	bpl.n	80067a4 <_svfiprintf_r+0xb8>
 800679a:	2353      	movs	r3, #83	@ 0x53
 800679c:	a904      	add	r1, sp, #16
 800679e:	185b      	adds	r3, r3, r1
 80067a0:	2120      	movs	r1, #32
 80067a2:	7019      	strb	r1, [r3, #0]
 80067a4:	0713      	lsls	r3, r2, #28
 80067a6:	d504      	bpl.n	80067b2 <_svfiprintf_r+0xc6>
 80067a8:	2353      	movs	r3, #83	@ 0x53
 80067aa:	a904      	add	r1, sp, #16
 80067ac:	185b      	adds	r3, r3, r1
 80067ae:	212b      	movs	r1, #43	@ 0x2b
 80067b0:	7019      	strb	r1, [r3, #0]
 80067b2:	7833      	ldrb	r3, [r6, #0]
 80067b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80067b6:	d016      	beq.n	80067e6 <_svfiprintf_r+0xfa>
 80067b8:	0035      	movs	r5, r6
 80067ba:	2100      	movs	r1, #0
 80067bc:	200a      	movs	r0, #10
 80067be:	68e3      	ldr	r3, [r4, #12]
 80067c0:	782a      	ldrb	r2, [r5, #0]
 80067c2:	1c6e      	adds	r6, r5, #1
 80067c4:	3a30      	subs	r2, #48	@ 0x30
 80067c6:	2a09      	cmp	r2, #9
 80067c8:	d950      	bls.n	800686c <_svfiprintf_r+0x180>
 80067ca:	2900      	cmp	r1, #0
 80067cc:	d111      	bne.n	80067f2 <_svfiprintf_r+0x106>
 80067ce:	e017      	b.n	8006800 <_svfiprintf_r+0x114>
 80067d0:	3501      	adds	r5, #1
 80067d2:	e7af      	b.n	8006734 <_svfiprintf_r+0x48>
 80067d4:	9b05      	ldr	r3, [sp, #20]
 80067d6:	6822      	ldr	r2, [r4, #0]
 80067d8:	1ac0      	subs	r0, r0, r3
 80067da:	2301      	movs	r3, #1
 80067dc:	4083      	lsls	r3, r0
 80067de:	4313      	orrs	r3, r2
 80067e0:	002e      	movs	r6, r5
 80067e2:	6023      	str	r3, [r4, #0]
 80067e4:	e7cc      	b.n	8006780 <_svfiprintf_r+0x94>
 80067e6:	9b07      	ldr	r3, [sp, #28]
 80067e8:	1d19      	adds	r1, r3, #4
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	9107      	str	r1, [sp, #28]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	db01      	blt.n	80067f6 <_svfiprintf_r+0x10a>
 80067f2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067f4:	e004      	b.n	8006800 <_svfiprintf_r+0x114>
 80067f6:	425b      	negs	r3, r3
 80067f8:	60e3      	str	r3, [r4, #12]
 80067fa:	2302      	movs	r3, #2
 80067fc:	4313      	orrs	r3, r2
 80067fe:	6023      	str	r3, [r4, #0]
 8006800:	782b      	ldrb	r3, [r5, #0]
 8006802:	2b2e      	cmp	r3, #46	@ 0x2e
 8006804:	d10c      	bne.n	8006820 <_svfiprintf_r+0x134>
 8006806:	786b      	ldrb	r3, [r5, #1]
 8006808:	2b2a      	cmp	r3, #42	@ 0x2a
 800680a:	d134      	bne.n	8006876 <_svfiprintf_r+0x18a>
 800680c:	9b07      	ldr	r3, [sp, #28]
 800680e:	3502      	adds	r5, #2
 8006810:	1d1a      	adds	r2, r3, #4
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	9207      	str	r2, [sp, #28]
 8006816:	2b00      	cmp	r3, #0
 8006818:	da01      	bge.n	800681e <_svfiprintf_r+0x132>
 800681a:	2301      	movs	r3, #1
 800681c:	425b      	negs	r3, r3
 800681e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006820:	4e2d      	ldr	r6, [pc, #180]	@ (80068d8 <_svfiprintf_r+0x1ec>)
 8006822:	2203      	movs	r2, #3
 8006824:	0030      	movs	r0, r6
 8006826:	7829      	ldrb	r1, [r5, #0]
 8006828:	f000 fa02 	bl	8006c30 <memchr>
 800682c:	2800      	cmp	r0, #0
 800682e:	d006      	beq.n	800683e <_svfiprintf_r+0x152>
 8006830:	2340      	movs	r3, #64	@ 0x40
 8006832:	1b80      	subs	r0, r0, r6
 8006834:	4083      	lsls	r3, r0
 8006836:	6822      	ldr	r2, [r4, #0]
 8006838:	3501      	adds	r5, #1
 800683a:	4313      	orrs	r3, r2
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	7829      	ldrb	r1, [r5, #0]
 8006840:	2206      	movs	r2, #6
 8006842:	4826      	ldr	r0, [pc, #152]	@ (80068dc <_svfiprintf_r+0x1f0>)
 8006844:	1c6e      	adds	r6, r5, #1
 8006846:	7621      	strb	r1, [r4, #24]
 8006848:	f000 f9f2 	bl	8006c30 <memchr>
 800684c:	2800      	cmp	r0, #0
 800684e:	d038      	beq.n	80068c2 <_svfiprintf_r+0x1d6>
 8006850:	4b23      	ldr	r3, [pc, #140]	@ (80068e0 <_svfiprintf_r+0x1f4>)
 8006852:	2b00      	cmp	r3, #0
 8006854:	d122      	bne.n	800689c <_svfiprintf_r+0x1b0>
 8006856:	2207      	movs	r2, #7
 8006858:	9b07      	ldr	r3, [sp, #28]
 800685a:	3307      	adds	r3, #7
 800685c:	4393      	bics	r3, r2
 800685e:	3308      	adds	r3, #8
 8006860:	9307      	str	r3, [sp, #28]
 8006862:	6963      	ldr	r3, [r4, #20]
 8006864:	9a04      	ldr	r2, [sp, #16]
 8006866:	189b      	adds	r3, r3, r2
 8006868:	6163      	str	r3, [r4, #20]
 800686a:	e762      	b.n	8006732 <_svfiprintf_r+0x46>
 800686c:	4343      	muls	r3, r0
 800686e:	0035      	movs	r5, r6
 8006870:	2101      	movs	r1, #1
 8006872:	189b      	adds	r3, r3, r2
 8006874:	e7a4      	b.n	80067c0 <_svfiprintf_r+0xd4>
 8006876:	2300      	movs	r3, #0
 8006878:	200a      	movs	r0, #10
 800687a:	0019      	movs	r1, r3
 800687c:	3501      	adds	r5, #1
 800687e:	6063      	str	r3, [r4, #4]
 8006880:	782a      	ldrb	r2, [r5, #0]
 8006882:	1c6e      	adds	r6, r5, #1
 8006884:	3a30      	subs	r2, #48	@ 0x30
 8006886:	2a09      	cmp	r2, #9
 8006888:	d903      	bls.n	8006892 <_svfiprintf_r+0x1a6>
 800688a:	2b00      	cmp	r3, #0
 800688c:	d0c8      	beq.n	8006820 <_svfiprintf_r+0x134>
 800688e:	9109      	str	r1, [sp, #36]	@ 0x24
 8006890:	e7c6      	b.n	8006820 <_svfiprintf_r+0x134>
 8006892:	4341      	muls	r1, r0
 8006894:	0035      	movs	r5, r6
 8006896:	2301      	movs	r3, #1
 8006898:	1889      	adds	r1, r1, r2
 800689a:	e7f1      	b.n	8006880 <_svfiprintf_r+0x194>
 800689c:	aa07      	add	r2, sp, #28
 800689e:	9200      	str	r2, [sp, #0]
 80068a0:	0021      	movs	r1, r4
 80068a2:	003a      	movs	r2, r7
 80068a4:	4b0f      	ldr	r3, [pc, #60]	@ (80068e4 <_svfiprintf_r+0x1f8>)
 80068a6:	9803      	ldr	r0, [sp, #12]
 80068a8:	e000      	b.n	80068ac <_svfiprintf_r+0x1c0>
 80068aa:	bf00      	nop
 80068ac:	9004      	str	r0, [sp, #16]
 80068ae:	9b04      	ldr	r3, [sp, #16]
 80068b0:	3301      	adds	r3, #1
 80068b2:	d1d6      	bne.n	8006862 <_svfiprintf_r+0x176>
 80068b4:	89bb      	ldrh	r3, [r7, #12]
 80068b6:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80068b8:	065b      	lsls	r3, r3, #25
 80068ba:	d500      	bpl.n	80068be <_svfiprintf_r+0x1d2>
 80068bc:	e72c      	b.n	8006718 <_svfiprintf_r+0x2c>
 80068be:	b021      	add	sp, #132	@ 0x84
 80068c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068c2:	aa07      	add	r2, sp, #28
 80068c4:	9200      	str	r2, [sp, #0]
 80068c6:	0021      	movs	r1, r4
 80068c8:	003a      	movs	r2, r7
 80068ca:	4b06      	ldr	r3, [pc, #24]	@ (80068e4 <_svfiprintf_r+0x1f8>)
 80068cc:	9803      	ldr	r0, [sp, #12]
 80068ce:	f000 f87b 	bl	80069c8 <_printf_i>
 80068d2:	e7eb      	b.n	80068ac <_svfiprintf_r+0x1c0>
 80068d4:	08006ee8 	.word	0x08006ee8
 80068d8:	08006eee 	.word	0x08006eee
 80068dc:	08006ef2 	.word	0x08006ef2
 80068e0:	00000000 	.word	0x00000000
 80068e4:	0800662d 	.word	0x0800662d

080068e8 <_printf_common>:
 80068e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80068ea:	0016      	movs	r6, r2
 80068ec:	9301      	str	r3, [sp, #4]
 80068ee:	688a      	ldr	r2, [r1, #8]
 80068f0:	690b      	ldr	r3, [r1, #16]
 80068f2:	000c      	movs	r4, r1
 80068f4:	9000      	str	r0, [sp, #0]
 80068f6:	4293      	cmp	r3, r2
 80068f8:	da00      	bge.n	80068fc <_printf_common+0x14>
 80068fa:	0013      	movs	r3, r2
 80068fc:	0022      	movs	r2, r4
 80068fe:	6033      	str	r3, [r6, #0]
 8006900:	3243      	adds	r2, #67	@ 0x43
 8006902:	7812      	ldrb	r2, [r2, #0]
 8006904:	2a00      	cmp	r2, #0
 8006906:	d001      	beq.n	800690c <_printf_common+0x24>
 8006908:	3301      	adds	r3, #1
 800690a:	6033      	str	r3, [r6, #0]
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	069b      	lsls	r3, r3, #26
 8006910:	d502      	bpl.n	8006918 <_printf_common+0x30>
 8006912:	6833      	ldr	r3, [r6, #0]
 8006914:	3302      	adds	r3, #2
 8006916:	6033      	str	r3, [r6, #0]
 8006918:	6822      	ldr	r2, [r4, #0]
 800691a:	2306      	movs	r3, #6
 800691c:	0015      	movs	r5, r2
 800691e:	401d      	ands	r5, r3
 8006920:	421a      	tst	r2, r3
 8006922:	d027      	beq.n	8006974 <_printf_common+0x8c>
 8006924:	0023      	movs	r3, r4
 8006926:	3343      	adds	r3, #67	@ 0x43
 8006928:	781b      	ldrb	r3, [r3, #0]
 800692a:	1e5a      	subs	r2, r3, #1
 800692c:	4193      	sbcs	r3, r2
 800692e:	6822      	ldr	r2, [r4, #0]
 8006930:	0692      	lsls	r2, r2, #26
 8006932:	d430      	bmi.n	8006996 <_printf_common+0xae>
 8006934:	0022      	movs	r2, r4
 8006936:	9901      	ldr	r1, [sp, #4]
 8006938:	9800      	ldr	r0, [sp, #0]
 800693a:	9d08      	ldr	r5, [sp, #32]
 800693c:	3243      	adds	r2, #67	@ 0x43
 800693e:	47a8      	blx	r5
 8006940:	3001      	adds	r0, #1
 8006942:	d025      	beq.n	8006990 <_printf_common+0xa8>
 8006944:	2206      	movs	r2, #6
 8006946:	6823      	ldr	r3, [r4, #0]
 8006948:	2500      	movs	r5, #0
 800694a:	4013      	ands	r3, r2
 800694c:	2b04      	cmp	r3, #4
 800694e:	d105      	bne.n	800695c <_printf_common+0x74>
 8006950:	6833      	ldr	r3, [r6, #0]
 8006952:	68e5      	ldr	r5, [r4, #12]
 8006954:	1aed      	subs	r5, r5, r3
 8006956:	43eb      	mvns	r3, r5
 8006958:	17db      	asrs	r3, r3, #31
 800695a:	401d      	ands	r5, r3
 800695c:	68a3      	ldr	r3, [r4, #8]
 800695e:	6922      	ldr	r2, [r4, #16]
 8006960:	4293      	cmp	r3, r2
 8006962:	dd01      	ble.n	8006968 <_printf_common+0x80>
 8006964:	1a9b      	subs	r3, r3, r2
 8006966:	18ed      	adds	r5, r5, r3
 8006968:	2600      	movs	r6, #0
 800696a:	42b5      	cmp	r5, r6
 800696c:	d120      	bne.n	80069b0 <_printf_common+0xc8>
 800696e:	2000      	movs	r0, #0
 8006970:	e010      	b.n	8006994 <_printf_common+0xac>
 8006972:	3501      	adds	r5, #1
 8006974:	68e3      	ldr	r3, [r4, #12]
 8006976:	6832      	ldr	r2, [r6, #0]
 8006978:	1a9b      	subs	r3, r3, r2
 800697a:	42ab      	cmp	r3, r5
 800697c:	ddd2      	ble.n	8006924 <_printf_common+0x3c>
 800697e:	0022      	movs	r2, r4
 8006980:	2301      	movs	r3, #1
 8006982:	9901      	ldr	r1, [sp, #4]
 8006984:	9800      	ldr	r0, [sp, #0]
 8006986:	9f08      	ldr	r7, [sp, #32]
 8006988:	3219      	adds	r2, #25
 800698a:	47b8      	blx	r7
 800698c:	3001      	adds	r0, #1
 800698e:	d1f0      	bne.n	8006972 <_printf_common+0x8a>
 8006990:	2001      	movs	r0, #1
 8006992:	4240      	negs	r0, r0
 8006994:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006996:	2030      	movs	r0, #48	@ 0x30
 8006998:	18e1      	adds	r1, r4, r3
 800699a:	3143      	adds	r1, #67	@ 0x43
 800699c:	7008      	strb	r0, [r1, #0]
 800699e:	0021      	movs	r1, r4
 80069a0:	1c5a      	adds	r2, r3, #1
 80069a2:	3145      	adds	r1, #69	@ 0x45
 80069a4:	7809      	ldrb	r1, [r1, #0]
 80069a6:	18a2      	adds	r2, r4, r2
 80069a8:	3243      	adds	r2, #67	@ 0x43
 80069aa:	3302      	adds	r3, #2
 80069ac:	7011      	strb	r1, [r2, #0]
 80069ae:	e7c1      	b.n	8006934 <_printf_common+0x4c>
 80069b0:	0022      	movs	r2, r4
 80069b2:	2301      	movs	r3, #1
 80069b4:	9901      	ldr	r1, [sp, #4]
 80069b6:	9800      	ldr	r0, [sp, #0]
 80069b8:	9f08      	ldr	r7, [sp, #32]
 80069ba:	321a      	adds	r2, #26
 80069bc:	47b8      	blx	r7
 80069be:	3001      	adds	r0, #1
 80069c0:	d0e6      	beq.n	8006990 <_printf_common+0xa8>
 80069c2:	3601      	adds	r6, #1
 80069c4:	e7d1      	b.n	800696a <_printf_common+0x82>
	...

080069c8 <_printf_i>:
 80069c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80069ca:	b08b      	sub	sp, #44	@ 0x2c
 80069cc:	9206      	str	r2, [sp, #24]
 80069ce:	000a      	movs	r2, r1
 80069d0:	3243      	adds	r2, #67	@ 0x43
 80069d2:	9307      	str	r3, [sp, #28]
 80069d4:	9005      	str	r0, [sp, #20]
 80069d6:	9203      	str	r2, [sp, #12]
 80069d8:	7e0a      	ldrb	r2, [r1, #24]
 80069da:	000c      	movs	r4, r1
 80069dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80069de:	2a78      	cmp	r2, #120	@ 0x78
 80069e0:	d809      	bhi.n	80069f6 <_printf_i+0x2e>
 80069e2:	2a62      	cmp	r2, #98	@ 0x62
 80069e4:	d80b      	bhi.n	80069fe <_printf_i+0x36>
 80069e6:	2a00      	cmp	r2, #0
 80069e8:	d100      	bne.n	80069ec <_printf_i+0x24>
 80069ea:	e0bc      	b.n	8006b66 <_printf_i+0x19e>
 80069ec:	497b      	ldr	r1, [pc, #492]	@ (8006bdc <_printf_i+0x214>)
 80069ee:	9104      	str	r1, [sp, #16]
 80069f0:	2a58      	cmp	r2, #88	@ 0x58
 80069f2:	d100      	bne.n	80069f6 <_printf_i+0x2e>
 80069f4:	e090      	b.n	8006b18 <_printf_i+0x150>
 80069f6:	0025      	movs	r5, r4
 80069f8:	3542      	adds	r5, #66	@ 0x42
 80069fa:	702a      	strb	r2, [r5, #0]
 80069fc:	e022      	b.n	8006a44 <_printf_i+0x7c>
 80069fe:	0010      	movs	r0, r2
 8006a00:	3863      	subs	r0, #99	@ 0x63
 8006a02:	2815      	cmp	r0, #21
 8006a04:	d8f7      	bhi.n	80069f6 <_printf_i+0x2e>
 8006a06:	f7f9 fb87 	bl	8000118 <__gnu_thumb1_case_shi>
 8006a0a:	0016      	.short	0x0016
 8006a0c:	fff6001f 	.word	0xfff6001f
 8006a10:	fff6fff6 	.word	0xfff6fff6
 8006a14:	001ffff6 	.word	0x001ffff6
 8006a18:	fff6fff6 	.word	0xfff6fff6
 8006a1c:	fff6fff6 	.word	0xfff6fff6
 8006a20:	003600a1 	.word	0x003600a1
 8006a24:	fff60080 	.word	0xfff60080
 8006a28:	00b2fff6 	.word	0x00b2fff6
 8006a2c:	0036fff6 	.word	0x0036fff6
 8006a30:	fff6fff6 	.word	0xfff6fff6
 8006a34:	0084      	.short	0x0084
 8006a36:	0025      	movs	r5, r4
 8006a38:	681a      	ldr	r2, [r3, #0]
 8006a3a:	3542      	adds	r5, #66	@ 0x42
 8006a3c:	1d11      	adds	r1, r2, #4
 8006a3e:	6019      	str	r1, [r3, #0]
 8006a40:	6813      	ldr	r3, [r2, #0]
 8006a42:	702b      	strb	r3, [r5, #0]
 8006a44:	2301      	movs	r3, #1
 8006a46:	e0a0      	b.n	8006b8a <_printf_i+0x1c2>
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	6809      	ldr	r1, [r1, #0]
 8006a4c:	1d02      	adds	r2, r0, #4
 8006a4e:	060d      	lsls	r5, r1, #24
 8006a50:	d50b      	bpl.n	8006a6a <_printf_i+0xa2>
 8006a52:	6806      	ldr	r6, [r0, #0]
 8006a54:	601a      	str	r2, [r3, #0]
 8006a56:	2e00      	cmp	r6, #0
 8006a58:	da03      	bge.n	8006a62 <_printf_i+0x9a>
 8006a5a:	232d      	movs	r3, #45	@ 0x2d
 8006a5c:	9a03      	ldr	r2, [sp, #12]
 8006a5e:	4276      	negs	r6, r6
 8006a60:	7013      	strb	r3, [r2, #0]
 8006a62:	4b5e      	ldr	r3, [pc, #376]	@ (8006bdc <_printf_i+0x214>)
 8006a64:	270a      	movs	r7, #10
 8006a66:	9304      	str	r3, [sp, #16]
 8006a68:	e018      	b.n	8006a9c <_printf_i+0xd4>
 8006a6a:	6806      	ldr	r6, [r0, #0]
 8006a6c:	601a      	str	r2, [r3, #0]
 8006a6e:	0649      	lsls	r1, r1, #25
 8006a70:	d5f1      	bpl.n	8006a56 <_printf_i+0x8e>
 8006a72:	b236      	sxth	r6, r6
 8006a74:	e7ef      	b.n	8006a56 <_printf_i+0x8e>
 8006a76:	6808      	ldr	r0, [r1, #0]
 8006a78:	6819      	ldr	r1, [r3, #0]
 8006a7a:	c940      	ldmia	r1!, {r6}
 8006a7c:	0605      	lsls	r5, r0, #24
 8006a7e:	d402      	bmi.n	8006a86 <_printf_i+0xbe>
 8006a80:	0640      	lsls	r0, r0, #25
 8006a82:	d500      	bpl.n	8006a86 <_printf_i+0xbe>
 8006a84:	b2b6      	uxth	r6, r6
 8006a86:	6019      	str	r1, [r3, #0]
 8006a88:	4b54      	ldr	r3, [pc, #336]	@ (8006bdc <_printf_i+0x214>)
 8006a8a:	270a      	movs	r7, #10
 8006a8c:	9304      	str	r3, [sp, #16]
 8006a8e:	2a6f      	cmp	r2, #111	@ 0x6f
 8006a90:	d100      	bne.n	8006a94 <_printf_i+0xcc>
 8006a92:	3f02      	subs	r7, #2
 8006a94:	0023      	movs	r3, r4
 8006a96:	2200      	movs	r2, #0
 8006a98:	3343      	adds	r3, #67	@ 0x43
 8006a9a:	701a      	strb	r2, [r3, #0]
 8006a9c:	6863      	ldr	r3, [r4, #4]
 8006a9e:	60a3      	str	r3, [r4, #8]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	db03      	blt.n	8006aac <_printf_i+0xe4>
 8006aa4:	2104      	movs	r1, #4
 8006aa6:	6822      	ldr	r2, [r4, #0]
 8006aa8:	438a      	bics	r2, r1
 8006aaa:	6022      	str	r2, [r4, #0]
 8006aac:	2e00      	cmp	r6, #0
 8006aae:	d102      	bne.n	8006ab6 <_printf_i+0xee>
 8006ab0:	9d03      	ldr	r5, [sp, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d00c      	beq.n	8006ad0 <_printf_i+0x108>
 8006ab6:	9d03      	ldr	r5, [sp, #12]
 8006ab8:	0030      	movs	r0, r6
 8006aba:	0039      	movs	r1, r7
 8006abc:	f7f9 fbbc 	bl	8000238 <__aeabi_uidivmod>
 8006ac0:	9b04      	ldr	r3, [sp, #16]
 8006ac2:	3d01      	subs	r5, #1
 8006ac4:	5c5b      	ldrb	r3, [r3, r1]
 8006ac6:	702b      	strb	r3, [r5, #0]
 8006ac8:	0033      	movs	r3, r6
 8006aca:	0006      	movs	r6, r0
 8006acc:	429f      	cmp	r7, r3
 8006ace:	d9f3      	bls.n	8006ab8 <_printf_i+0xf0>
 8006ad0:	2f08      	cmp	r7, #8
 8006ad2:	d109      	bne.n	8006ae8 <_printf_i+0x120>
 8006ad4:	6823      	ldr	r3, [r4, #0]
 8006ad6:	07db      	lsls	r3, r3, #31
 8006ad8:	d506      	bpl.n	8006ae8 <_printf_i+0x120>
 8006ada:	6862      	ldr	r2, [r4, #4]
 8006adc:	6923      	ldr	r3, [r4, #16]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	dc02      	bgt.n	8006ae8 <_printf_i+0x120>
 8006ae2:	2330      	movs	r3, #48	@ 0x30
 8006ae4:	3d01      	subs	r5, #1
 8006ae6:	702b      	strb	r3, [r5, #0]
 8006ae8:	9b03      	ldr	r3, [sp, #12]
 8006aea:	1b5b      	subs	r3, r3, r5
 8006aec:	6123      	str	r3, [r4, #16]
 8006aee:	9b07      	ldr	r3, [sp, #28]
 8006af0:	0021      	movs	r1, r4
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	9805      	ldr	r0, [sp, #20]
 8006af6:	9b06      	ldr	r3, [sp, #24]
 8006af8:	aa09      	add	r2, sp, #36	@ 0x24
 8006afa:	f7ff fef5 	bl	80068e8 <_printf_common>
 8006afe:	3001      	adds	r0, #1
 8006b00:	d148      	bne.n	8006b94 <_printf_i+0x1cc>
 8006b02:	2001      	movs	r0, #1
 8006b04:	4240      	negs	r0, r0
 8006b06:	b00b      	add	sp, #44	@ 0x2c
 8006b08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006b0a:	2220      	movs	r2, #32
 8006b0c:	6809      	ldr	r1, [r1, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	6022      	str	r2, [r4, #0]
 8006b12:	2278      	movs	r2, #120	@ 0x78
 8006b14:	4932      	ldr	r1, [pc, #200]	@ (8006be0 <_printf_i+0x218>)
 8006b16:	9104      	str	r1, [sp, #16]
 8006b18:	0021      	movs	r1, r4
 8006b1a:	3145      	adds	r1, #69	@ 0x45
 8006b1c:	700a      	strb	r2, [r1, #0]
 8006b1e:	6819      	ldr	r1, [r3, #0]
 8006b20:	6822      	ldr	r2, [r4, #0]
 8006b22:	c940      	ldmia	r1!, {r6}
 8006b24:	0610      	lsls	r0, r2, #24
 8006b26:	d402      	bmi.n	8006b2e <_printf_i+0x166>
 8006b28:	0650      	lsls	r0, r2, #25
 8006b2a:	d500      	bpl.n	8006b2e <_printf_i+0x166>
 8006b2c:	b2b6      	uxth	r6, r6
 8006b2e:	6019      	str	r1, [r3, #0]
 8006b30:	07d3      	lsls	r3, r2, #31
 8006b32:	d502      	bpl.n	8006b3a <_printf_i+0x172>
 8006b34:	2320      	movs	r3, #32
 8006b36:	4313      	orrs	r3, r2
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	2e00      	cmp	r6, #0
 8006b3c:	d001      	beq.n	8006b42 <_printf_i+0x17a>
 8006b3e:	2710      	movs	r7, #16
 8006b40:	e7a8      	b.n	8006a94 <_printf_i+0xcc>
 8006b42:	2220      	movs	r2, #32
 8006b44:	6823      	ldr	r3, [r4, #0]
 8006b46:	4393      	bics	r3, r2
 8006b48:	6023      	str	r3, [r4, #0]
 8006b4a:	e7f8      	b.n	8006b3e <_printf_i+0x176>
 8006b4c:	681a      	ldr	r2, [r3, #0]
 8006b4e:	680d      	ldr	r5, [r1, #0]
 8006b50:	1d10      	adds	r0, r2, #4
 8006b52:	6949      	ldr	r1, [r1, #20]
 8006b54:	6018      	str	r0, [r3, #0]
 8006b56:	6813      	ldr	r3, [r2, #0]
 8006b58:	062e      	lsls	r6, r5, #24
 8006b5a:	d501      	bpl.n	8006b60 <_printf_i+0x198>
 8006b5c:	6019      	str	r1, [r3, #0]
 8006b5e:	e002      	b.n	8006b66 <_printf_i+0x19e>
 8006b60:	066d      	lsls	r5, r5, #25
 8006b62:	d5fb      	bpl.n	8006b5c <_printf_i+0x194>
 8006b64:	8019      	strh	r1, [r3, #0]
 8006b66:	2300      	movs	r3, #0
 8006b68:	9d03      	ldr	r5, [sp, #12]
 8006b6a:	6123      	str	r3, [r4, #16]
 8006b6c:	e7bf      	b.n	8006aee <_printf_i+0x126>
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	1d11      	adds	r1, r2, #4
 8006b72:	6019      	str	r1, [r3, #0]
 8006b74:	6815      	ldr	r5, [r2, #0]
 8006b76:	2100      	movs	r1, #0
 8006b78:	0028      	movs	r0, r5
 8006b7a:	6862      	ldr	r2, [r4, #4]
 8006b7c:	f000 f858 	bl	8006c30 <memchr>
 8006b80:	2800      	cmp	r0, #0
 8006b82:	d001      	beq.n	8006b88 <_printf_i+0x1c0>
 8006b84:	1b40      	subs	r0, r0, r5
 8006b86:	6060      	str	r0, [r4, #4]
 8006b88:	6863      	ldr	r3, [r4, #4]
 8006b8a:	6123      	str	r3, [r4, #16]
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	9a03      	ldr	r2, [sp, #12]
 8006b90:	7013      	strb	r3, [r2, #0]
 8006b92:	e7ac      	b.n	8006aee <_printf_i+0x126>
 8006b94:	002a      	movs	r2, r5
 8006b96:	6923      	ldr	r3, [r4, #16]
 8006b98:	9906      	ldr	r1, [sp, #24]
 8006b9a:	9805      	ldr	r0, [sp, #20]
 8006b9c:	9d07      	ldr	r5, [sp, #28]
 8006b9e:	47a8      	blx	r5
 8006ba0:	3001      	adds	r0, #1
 8006ba2:	d0ae      	beq.n	8006b02 <_printf_i+0x13a>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	079b      	lsls	r3, r3, #30
 8006ba8:	d415      	bmi.n	8006bd6 <_printf_i+0x20e>
 8006baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006bac:	68e0      	ldr	r0, [r4, #12]
 8006bae:	4298      	cmp	r0, r3
 8006bb0:	daa9      	bge.n	8006b06 <_printf_i+0x13e>
 8006bb2:	0018      	movs	r0, r3
 8006bb4:	e7a7      	b.n	8006b06 <_printf_i+0x13e>
 8006bb6:	0022      	movs	r2, r4
 8006bb8:	2301      	movs	r3, #1
 8006bba:	9906      	ldr	r1, [sp, #24]
 8006bbc:	9805      	ldr	r0, [sp, #20]
 8006bbe:	9e07      	ldr	r6, [sp, #28]
 8006bc0:	3219      	adds	r2, #25
 8006bc2:	47b0      	blx	r6
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d09c      	beq.n	8006b02 <_printf_i+0x13a>
 8006bc8:	3501      	adds	r5, #1
 8006bca:	68e3      	ldr	r3, [r4, #12]
 8006bcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	42ab      	cmp	r3, r5
 8006bd2:	dcf0      	bgt.n	8006bb6 <_printf_i+0x1ee>
 8006bd4:	e7e9      	b.n	8006baa <_printf_i+0x1e2>
 8006bd6:	2500      	movs	r5, #0
 8006bd8:	e7f7      	b.n	8006bca <_printf_i+0x202>
 8006bda:	46c0      	nop			@ (mov r8, r8)
 8006bdc:	08006ef9 	.word	0x08006ef9
 8006be0:	08006f0a 	.word	0x08006f0a

08006be4 <memmove>:
 8006be4:	b510      	push	{r4, lr}
 8006be6:	4288      	cmp	r0, r1
 8006be8:	d806      	bhi.n	8006bf8 <memmove+0x14>
 8006bea:	2300      	movs	r3, #0
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d008      	beq.n	8006c02 <memmove+0x1e>
 8006bf0:	5ccc      	ldrb	r4, [r1, r3]
 8006bf2:	54c4      	strb	r4, [r0, r3]
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	e7f9      	b.n	8006bec <memmove+0x8>
 8006bf8:	188b      	adds	r3, r1, r2
 8006bfa:	4298      	cmp	r0, r3
 8006bfc:	d2f5      	bcs.n	8006bea <memmove+0x6>
 8006bfe:	3a01      	subs	r2, #1
 8006c00:	d200      	bcs.n	8006c04 <memmove+0x20>
 8006c02:	bd10      	pop	{r4, pc}
 8006c04:	5c8b      	ldrb	r3, [r1, r2]
 8006c06:	5483      	strb	r3, [r0, r2]
 8006c08:	e7f9      	b.n	8006bfe <memmove+0x1a>
	...

08006c0c <_sbrk_r>:
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	b570      	push	{r4, r5, r6, lr}
 8006c10:	4d06      	ldr	r5, [pc, #24]	@ (8006c2c <_sbrk_r+0x20>)
 8006c12:	0004      	movs	r4, r0
 8006c14:	0008      	movs	r0, r1
 8006c16:	602b      	str	r3, [r5, #0]
 8006c18:	f7fb f872 	bl	8001d00 <_sbrk>
 8006c1c:	1c43      	adds	r3, r0, #1
 8006c1e:	d103      	bne.n	8006c28 <_sbrk_r+0x1c>
 8006c20:	682b      	ldr	r3, [r5, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d000      	beq.n	8006c28 <_sbrk_r+0x1c>
 8006c26:	6023      	str	r3, [r4, #0]
 8006c28:	bd70      	pop	{r4, r5, r6, pc}
 8006c2a:	46c0      	nop			@ (mov r8, r8)
 8006c2c:	200006c4 	.word	0x200006c4

08006c30 <memchr>:
 8006c30:	b2c9      	uxtb	r1, r1
 8006c32:	1882      	adds	r2, r0, r2
 8006c34:	4290      	cmp	r0, r2
 8006c36:	d101      	bne.n	8006c3c <memchr+0xc>
 8006c38:	2000      	movs	r0, #0
 8006c3a:	4770      	bx	lr
 8006c3c:	7803      	ldrb	r3, [r0, #0]
 8006c3e:	428b      	cmp	r3, r1
 8006c40:	d0fb      	beq.n	8006c3a <memchr+0xa>
 8006c42:	3001      	adds	r0, #1
 8006c44:	e7f6      	b.n	8006c34 <memchr+0x4>

08006c46 <memcpy>:
 8006c46:	2300      	movs	r3, #0
 8006c48:	b510      	push	{r4, lr}
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d100      	bne.n	8006c50 <memcpy+0xa>
 8006c4e:	bd10      	pop	{r4, pc}
 8006c50:	5ccc      	ldrb	r4, [r1, r3]
 8006c52:	54c4      	strb	r4, [r0, r3]
 8006c54:	3301      	adds	r3, #1
 8006c56:	e7f8      	b.n	8006c4a <memcpy+0x4>

08006c58 <_realloc_r>:
 8006c58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c5a:	0006      	movs	r6, r0
 8006c5c:	000c      	movs	r4, r1
 8006c5e:	0015      	movs	r5, r2
 8006c60:	2900      	cmp	r1, #0
 8006c62:	d105      	bne.n	8006c70 <_realloc_r+0x18>
 8006c64:	0011      	movs	r1, r2
 8006c66:	f7ff fc51 	bl	800650c <_malloc_r>
 8006c6a:	0004      	movs	r4, r0
 8006c6c:	0020      	movs	r0, r4
 8006c6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006c70:	2a00      	cmp	r2, #0
 8006c72:	d103      	bne.n	8006c7c <_realloc_r+0x24>
 8006c74:	f7ff fbde 	bl	8006434 <_free_r>
 8006c78:	2400      	movs	r4, #0
 8006c7a:	e7f7      	b.n	8006c6c <_realloc_r+0x14>
 8006c7c:	f000 f81b 	bl	8006cb6 <_malloc_usable_size_r>
 8006c80:	0007      	movs	r7, r0
 8006c82:	4285      	cmp	r5, r0
 8006c84:	d802      	bhi.n	8006c8c <_realloc_r+0x34>
 8006c86:	0843      	lsrs	r3, r0, #1
 8006c88:	42ab      	cmp	r3, r5
 8006c8a:	d3ef      	bcc.n	8006c6c <_realloc_r+0x14>
 8006c8c:	0029      	movs	r1, r5
 8006c8e:	0030      	movs	r0, r6
 8006c90:	f7ff fc3c 	bl	800650c <_malloc_r>
 8006c94:	9001      	str	r0, [sp, #4]
 8006c96:	2800      	cmp	r0, #0
 8006c98:	d0ee      	beq.n	8006c78 <_realloc_r+0x20>
 8006c9a:	002a      	movs	r2, r5
 8006c9c:	42bd      	cmp	r5, r7
 8006c9e:	d900      	bls.n	8006ca2 <_realloc_r+0x4a>
 8006ca0:	003a      	movs	r2, r7
 8006ca2:	0021      	movs	r1, r4
 8006ca4:	9801      	ldr	r0, [sp, #4]
 8006ca6:	f7ff ffce 	bl	8006c46 <memcpy>
 8006caa:	0021      	movs	r1, r4
 8006cac:	0030      	movs	r0, r6
 8006cae:	f7ff fbc1 	bl	8006434 <_free_r>
 8006cb2:	9c01      	ldr	r4, [sp, #4]
 8006cb4:	e7da      	b.n	8006c6c <_realloc_r+0x14>

08006cb6 <_malloc_usable_size_r>:
 8006cb6:	1f0b      	subs	r3, r1, #4
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	1f18      	subs	r0, r3, #4
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	da01      	bge.n	8006cc4 <_malloc_usable_size_r+0xe>
 8006cc0:	580b      	ldr	r3, [r1, r0]
 8006cc2:	18c0      	adds	r0, r0, r3
 8006cc4:	4770      	bx	lr
	...

08006cc8 <_init>:
 8006cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cca:	46c0      	nop			@ (mov r8, r8)
 8006ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cce:	bc08      	pop	{r3}
 8006cd0:	469e      	mov	lr, r3
 8006cd2:	4770      	bx	lr

08006cd4 <_fini>:
 8006cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd6:	46c0      	nop			@ (mov r8, r8)
 8006cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cda:	bc08      	pop	{r3}
 8006cdc:	469e      	mov	lr, r3
 8006cde:	4770      	bx	lr
