
driver-nema17-v2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006484  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c4  08006544  08006544  00007544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006708  08006708  0000805c  2**0
                  CONTENTS
  4 .ARM          00000000  08006708  08006708  0000805c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006708  08006708  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006708  08006708  00007708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800670c  0800670c  0000770c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08006710  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  2000005c  0800676c  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006bc  0800676c  000086bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d716  00000000  00000000  00008084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020f2  00000000  00000000  0001579a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac0  00000000  00000000  00017890  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000842  00000000  00000000  00018350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000149de  00000000  00000000  00018b92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd2c  00000000  00000000  0002d570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000805b6  00000000  00000000  0003b29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb852  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002aa8  00000000  00000000  000bb898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  000be340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000005c 	.word	0x2000005c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800652c 	.word	0x0800652c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000060 	.word	0x20000060
 8000104:	0800652c 	.word	0x0800652c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	@ 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	@ 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			@ (mov r8, r8)

08000418 <ParserJSON>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

long int ParserJSON(const char *token) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b08a      	sub	sp, #40	@ 0x28
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
	int i, j, ap, ch, done, trovato;

	long int retval = JSON_TOKEN_NOT_FOUND;
 8000420:	4b5a      	ldr	r3, [pc, #360]	@ (800058c <ParserJSON+0x174>)
 8000422:	60fb      	str	r3, [r7, #12]

	/* il buffer è circolare, potrebbe trovarsi a cavalcioni,
	 * quindi prima cosa cerco la graffa aperta */
	for (i=0, ap=-1, ch=-1; i<RX_BUFFER_SIZE; i++) {
 8000424:	2300      	movs	r3, #0
 8000426:	627b      	str	r3, [r7, #36]	@ 0x24
 8000428:	2301      	movs	r3, #1
 800042a:	425b      	negs	r3, r3
 800042c:	61fb      	str	r3, [r7, #28]
 800042e:	2301      	movs	r3, #1
 8000430:	425b      	negs	r3, r3
 8000432:	61bb      	str	r3, [r7, #24]
 8000434:	e012      	b.n	800045c <ParserJSON+0x44>
		if (rxBuffer[i] == '{') { ap = i; }
 8000436:	4a56      	ldr	r2, [pc, #344]	@ (8000590 <ParserJSON+0x178>)
 8000438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800043a:	18d3      	adds	r3, r2, r3
 800043c:	781b      	ldrb	r3, [r3, #0]
 800043e:	2b7b      	cmp	r3, #123	@ 0x7b
 8000440:	d101      	bne.n	8000446 <ParserJSON+0x2e>
 8000442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000444:	61fb      	str	r3, [r7, #28]
		if (rxBuffer[i] == '}') { ch = i; }
 8000446:	4a52      	ldr	r2, [pc, #328]	@ (8000590 <ParserJSON+0x178>)
 8000448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800044a:	18d3      	adds	r3, r2, r3
 800044c:	781b      	ldrb	r3, [r3, #0]
 800044e:	2b7d      	cmp	r3, #125	@ 0x7d
 8000450:	d101      	bne.n	8000456 <ParserJSON+0x3e>
 8000452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000454:	61bb      	str	r3, [r7, #24]
	for (i=0, ap=-1, ch=-1; i<RX_BUFFER_SIZE; i++) {
 8000456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000458:	3301      	adds	r3, #1
 800045a:	627b      	str	r3, [r7, #36]	@ 0x24
 800045c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800045e:	2bff      	cmp	r3, #255	@ 0xff
 8000460:	dde9      	ble.n	8000436 <ParserJSON+0x1e>
	}

	if ((ap >= 0) && (ch >= 0)) {
 8000462:	69fb      	ldr	r3, [r7, #28]
 8000464:	2b00      	cmp	r3, #0
 8000466:	da00      	bge.n	800046a <ParserJSON+0x52>
 8000468:	e08a      	b.n	8000580 <ParserJSON+0x168>
 800046a:	69bb      	ldr	r3, [r7, #24]
 800046c:	2b00      	cmp	r3, #0
 800046e:	da00      	bge.n	8000472 <ParserJSON+0x5a>
 8000470:	e086      	b.n	8000580 <ParserJSON+0x168>

		/* ci sono tutte le graffe, cerco il token desiderato */
		for (i=ap+1, j=0, trovato=0, done=0; done==0; i++) {
 8000472:	69fb      	ldr	r3, [r7, #28]
 8000474:	3301      	adds	r3, #1
 8000476:	627b      	str	r3, [r7, #36]	@ 0x24
 8000478:	2300      	movs	r3, #0
 800047a:	623b      	str	r3, [r7, #32]
 800047c:	2300      	movs	r3, #0
 800047e:	613b      	str	r3, [r7, #16]
 8000480:	2300      	movs	r3, #0
 8000482:	617b      	str	r3, [r7, #20]
 8000484:	e037      	b.n	80004f6 <ParserJSON+0xde>
			if (i >= RX_BUFFER_SIZE) { i = i % RX_BUFFER_SIZE; }
 8000486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000488:	2bff      	cmp	r3, #255	@ 0xff
 800048a:	dd08      	ble.n	800049e <ParserJSON+0x86>
 800048c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800048e:	4a41      	ldr	r2, [pc, #260]	@ (8000594 <ParserJSON+0x17c>)
 8000490:	4013      	ands	r3, r2
 8000492:	d503      	bpl.n	800049c <ParserJSON+0x84>
 8000494:	3b01      	subs	r3, #1
 8000496:	4a40      	ldr	r2, [pc, #256]	@ (8000598 <ParserJSON+0x180>)
 8000498:	4313      	orrs	r3, r2
 800049a:	3301      	adds	r3, #1
 800049c:	627b      	str	r3, [r7, #36]	@ 0x24

			if ((rxBuffer[i] == ':') && (token[j]==0)) { trovato=1; done=1; }
 800049e:	4a3c      	ldr	r2, [pc, #240]	@ (8000590 <ParserJSON+0x178>)
 80004a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004a2:	18d3      	adds	r3, r2, r3
 80004a4:	781b      	ldrb	r3, [r3, #0]
 80004a6:	2b3a      	cmp	r3, #58	@ 0x3a
 80004a8:	d10a      	bne.n	80004c0 <ParserJSON+0xa8>
 80004aa:	6a3b      	ldr	r3, [r7, #32]
 80004ac:	687a      	ldr	r2, [r7, #4]
 80004ae:	18d3      	adds	r3, r2, r3
 80004b0:	781b      	ldrb	r3, [r3, #0]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d104      	bne.n	80004c0 <ParserJSON+0xa8>
 80004b6:	2301      	movs	r3, #1
 80004b8:	613b      	str	r3, [r7, #16]
 80004ba:	2301      	movs	r3, #1
 80004bc:	617b      	str	r3, [r7, #20]
 80004be:	e00f      	b.n	80004e0 <ParserJSON+0xc8>
			else if (rxBuffer[i] == token[j]) { j++; }
 80004c0:	4a33      	ldr	r2, [pc, #204]	@ (8000590 <ParserJSON+0x178>)
 80004c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004c4:	18d3      	adds	r3, r2, r3
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	6a3b      	ldr	r3, [r7, #32]
 80004ca:	6879      	ldr	r1, [r7, #4]
 80004cc:	18cb      	adds	r3, r1, r3
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d103      	bne.n	80004dc <ParserJSON+0xc4>
 80004d4:	6a3b      	ldr	r3, [r7, #32]
 80004d6:	3301      	adds	r3, #1
 80004d8:	623b      	str	r3, [r7, #32]
 80004da:	e001      	b.n	80004e0 <ParserJSON+0xc8>
			else { j=0; }
 80004dc:	2300      	movs	r3, #0
 80004de:	623b      	str	r3, [r7, #32]

			if (rxBuffer[i] == '}') { done=1; }
 80004e0:	4a2b      	ldr	r2, [pc, #172]	@ (8000590 <ParserJSON+0x178>)
 80004e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004e4:	18d3      	adds	r3, r2, r3
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b7d      	cmp	r3, #125	@ 0x7d
 80004ea:	d101      	bne.n	80004f0 <ParserJSON+0xd8>
 80004ec:	2301      	movs	r3, #1
 80004ee:	617b      	str	r3, [r7, #20]
		for (i=ap+1, j=0, trovato=0, done=0; done==0; i++) {
 80004f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80004f2:	3301      	adds	r3, #1
 80004f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80004f6:	697b      	ldr	r3, [r7, #20]
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d0c4      	beq.n	8000486 <ParserJSON+0x6e>
		}

		if (trovato != 0) {
 80004fc:	693b      	ldr	r3, [r7, #16]
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d03e      	beq.n	8000580 <ParserJSON+0x168>
			/* trovato il token, tiro fuori il valore */
			retval = 0;
 8000502:	2300      	movs	r3, #0
 8000504:	60fb      	str	r3, [r7, #12]
			for (done=0; done==0; i++) {
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	e036      	b.n	800057a <ParserJSON+0x162>
				if (i >= RX_BUFFER_SIZE) { i = i % RX_BUFFER_SIZE; }
 800050c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800050e:	2bff      	cmp	r3, #255	@ 0xff
 8000510:	dd08      	ble.n	8000524 <ParserJSON+0x10c>
 8000512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000514:	4a1f      	ldr	r2, [pc, #124]	@ (8000594 <ParserJSON+0x17c>)
 8000516:	4013      	ands	r3, r2
 8000518:	d503      	bpl.n	8000522 <ParserJSON+0x10a>
 800051a:	3b01      	subs	r3, #1
 800051c:	4a1e      	ldr	r2, [pc, #120]	@ (8000598 <ParserJSON+0x180>)
 800051e:	4313      	orrs	r3, r2
 8000520:	3301      	adds	r3, #1
 8000522:	627b      	str	r3, [r7, #36]	@ 0x24

				if ((rxBuffer[i] == ',') || (rxBuffer[i] == '}')) { done=1; }
 8000524:	4a1a      	ldr	r2, [pc, #104]	@ (8000590 <ParserJSON+0x178>)
 8000526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000528:	18d3      	adds	r3, r2, r3
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b2c      	cmp	r3, #44	@ 0x2c
 800052e:	d005      	beq.n	800053c <ParserJSON+0x124>
 8000530:	4a17      	ldr	r2, [pc, #92]	@ (8000590 <ParserJSON+0x178>)
 8000532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000534:	18d3      	adds	r3, r2, r3
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	2b7d      	cmp	r3, #125	@ 0x7d
 800053a:	d102      	bne.n	8000542 <ParserJSON+0x12a>
 800053c:	2301      	movs	r3, #1
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	e018      	b.n	8000574 <ParserJSON+0x15c>
				else if ((rxBuffer[i] >= '0') && (rxBuffer[i] <= '9')) {
 8000542:	4a13      	ldr	r2, [pc, #76]	@ (8000590 <ParserJSON+0x178>)
 8000544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000546:	18d3      	adds	r3, r2, r3
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	2b2f      	cmp	r3, #47	@ 0x2f
 800054c:	d912      	bls.n	8000574 <ParserJSON+0x15c>
 800054e:	4a10      	ldr	r2, [pc, #64]	@ (8000590 <ParserJSON+0x178>)
 8000550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000552:	18d3      	adds	r3, r2, r3
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	2b39      	cmp	r3, #57	@ 0x39
 8000558:	d80c      	bhi.n	8000574 <ParserJSON+0x15c>
					retval = (retval*10) + rxBuffer[i] - '0';
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	0013      	movs	r3, r2
 800055e:	009b      	lsls	r3, r3, #2
 8000560:	189b      	adds	r3, r3, r2
 8000562:	005b      	lsls	r3, r3, #1
 8000564:	0019      	movs	r1, r3
 8000566:	4a0a      	ldr	r2, [pc, #40]	@ (8000590 <ParserJSON+0x178>)
 8000568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800056a:	18d3      	adds	r3, r2, r3
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	18cb      	adds	r3, r1, r3
 8000570:	3b30      	subs	r3, #48	@ 0x30
 8000572:	60fb      	str	r3, [r7, #12]
			for (done=0; done==0; i++) {
 8000574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000576:	3301      	adds	r3, #1
 8000578:	627b      	str	r3, [r7, #36]	@ 0x24
 800057a:	697b      	ldr	r3, [r7, #20]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d0c5      	beq.n	800050c <ParserJSON+0xf4>
				}
			}
		}
	}

	return retval;
 8000580:	68fb      	ldr	r3, [r7, #12]
}
 8000582:	0018      	movs	r0, r3
 8000584:	46bd      	mov	sp, r7
 8000586:	b00a      	add	sp, #40	@ 0x28
 8000588:	bd80      	pop	{r7, pc}
 800058a:	46c0      	nop			@ (mov r8, r8)
 800058c:	0000ffff 	.word	0x0000ffff
 8000590:	20000464 	.word	0x20000464
 8000594:	800000ff 	.word	0x800000ff
 8000598:	ffffff00 	.word	0xffffff00

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b590      	push	{r4, r7, lr}
 800059e:	b093      	sub	sp, #76	@ 0x4c
 80005a0:	af02      	add	r7, sp, #8
	uint32_t status;
	int device_id;
	int32_t direction, steps_to_do;
	int32_t deg4096_to_go;

	deg4096_to_go = -1;
 80005a2:	2301      	movs	r3, #1
 80005a4:	425b      	negs	r3, r3
 80005a6:	633b      	str	r3, [r7, #48]	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a8:	f001 f83d 	bl	8001626 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ac:	f000 fbb8 	bl	8000d20 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005b0:	f000 fbfa 	bl	8000da8 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b4:	f000 fd4e 	bl	8001054 <MX_GPIO_Init>
  MX_DMA_Init();
 80005b8:	f000 fd2e 	bl	8001018 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80005bc:	f000 fc9c 	bl	8000ef8 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80005c0:	f000 fc10 	bl	8000de4 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80005c4:	f000 fcec 	bl	8000fa0 <MX_USART2_UART_Init>
  /* A4988 MS3, MS2, MS1 LOW  LOW  LOW  =   FULL STEP  */
  /* A4988 MS3, MS2, MS1 LOW  LOW  HIGH =   HALF STEP  */
  /* A4988 MS3, MS2, MS1 LOW  HIGH LOW  =  4 microstep */
  /* A4988 MS3, MS2, MS1 LOW  HIGH HIGH =  8 microstep */
  /* A4988 MS3, MS2, MS1 HIGH HIGH HIGH = 16 microstep */
  HAL_GPIO_WritePin(A4988_MS1_GPIO_Port, A4988_MS1_Pin, 0);
 80005c8:	23a0      	movs	r3, #160	@ 0xa0
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2200      	movs	r2, #0
 80005ce:	2120      	movs	r1, #32
 80005d0:	0018      	movs	r0, r3
 80005d2:	f002 fee0 	bl	8003396 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A4988_MS2_GPIO_Port, A4988_MS2_Pin, 0);
 80005d6:	23a0      	movs	r3, #160	@ 0xa0
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2200      	movs	r2, #0
 80005dc:	2140      	movs	r1, #64	@ 0x40
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 fed9 	bl	8003396 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A4988_MS3_GPIO_Port, A4988_MS3_Pin, 0);
 80005e4:	23a0      	movs	r3, #160	@ 0xa0
 80005e6:	05db      	lsls	r3, r3, #23
 80005e8:	2200      	movs	r2, #0
 80005ea:	2180      	movs	r1, #128	@ 0x80
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 fed2 	bl	8003396 <HAL_GPIO_WritePin>

  /* imposto step e direzione */
  HAL_GPIO_WritePin(A4988_DIR_GPIO_Port,  A4988_DIR_Pin,  0);
 80005f2:	2380      	movs	r3, #128	@ 0x80
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	48a6      	ldr	r0, [pc, #664]	@ (8000890 <main+0x2f4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	0019      	movs	r1, r3
 80005fc:	f002 fecb 	bl	8003396 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A4988_STEP_GPIO_Port, A4988_STEP_Pin, 0);
 8000600:	4ba3      	ldr	r3, [pc, #652]	@ (8000890 <main+0x2f4>)
 8000602:	2200      	movs	r2, #0
 8000604:	2104      	movs	r1, #4
 8000606:	0018      	movs	r0, r3
 8000608:	f002 fec5 	bl	8003396 <HAL_GPIO_WritePin>
  direction = 0; steps_to_do = 0;
 800060c:	2300      	movs	r3, #0
 800060e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000610:	2300      	movs	r3, #0
 8000612:	637b      	str	r3, [r7, #52]	@ 0x34

  /* abilito il driver */
  HAL_GPIO_WritePin(A4988_nRST_GPIO_Port,   A4988_nRST_Pin,   1);
 8000614:	4b9e      	ldr	r3, [pc, #632]	@ (8000890 <main+0x2f4>)
 8000616:	2201      	movs	r2, #1
 8000618:	2101      	movs	r1, #1
 800061a:	0018      	movs	r0, r3
 800061c:	f002 febb 	bl	8003396 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A4988_nSLEEP_GPIO_Port, A4988_nSLEEP_Pin, 0);
 8000620:	4b9b      	ldr	r3, [pc, #620]	@ (8000890 <main+0x2f4>)
 8000622:	2200      	movs	r2, #0
 8000624:	2102      	movs	r1, #2
 8000626:	0018      	movs	r0, r3
 8000628:	f002 feb5 	bl	8003396 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(A4988_nEN_GPIO_Port,    A4988_nEN_Pin,    1);
 800062c:	23a0      	movs	r3, #160	@ 0xa0
 800062e:	05db      	lsls	r3, r3, #23
 8000630:	2201      	movs	r2, #1
 8000632:	2110      	movs	r1, #16
 8000634:	0018      	movs	r0, r3
 8000636:	f002 feae 	bl	8003396 <HAL_GPIO_WritePin>

  /* lettura device-id */
  int temp;
  device_id = -1;
 800063a:	2301      	movs	r3, #1
 800063c:	425b      	negs	r3, r3
 800063e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  do {
	  temp = device_id;
 8000640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000642:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_Delay(100);
 8000644:	2064      	movs	r0, #100	@ 0x64
 8000646:	f001 f86b 	bl	8001720 <HAL_Delay>
	  device_id = HAL_GPIO_ReadPin(ADD7_GPIO_Port, ADD7_Pin) & 0x01;
 800064a:	2380      	movs	r3, #128	@ 0x80
 800064c:	00da      	lsls	r2, r3, #3
 800064e:	23a0      	movs	r3, #160	@ 0xa0
 8000650:	05db      	lsls	r3, r3, #23
 8000652:	0011      	movs	r1, r2
 8000654:	0018      	movs	r0, r3
 8000656:	f002 fe81 	bl	800335c <HAL_GPIO_ReadPin>
 800065a:	0003      	movs	r3, r0
 800065c:	001a      	movs	r2, r3
 800065e:	2301      	movs	r3, #1
 8000660:	4013      	ands	r3, r2
 8000662:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id = device_id << 1;
 8000664:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id += HAL_GPIO_ReadPin(ADD6_GPIO_Port, ADD6_Pin) & 0x01;
 800066a:	4b8a      	ldr	r3, [pc, #552]	@ (8000894 <main+0x2f8>)
 800066c:	2180      	movs	r1, #128	@ 0x80
 800066e:	0018      	movs	r0, r3
 8000670:	f002 fe74 	bl	800335c <HAL_GPIO_ReadPin>
 8000674:	0003      	movs	r3, r0
 8000676:	001a      	movs	r2, r3
 8000678:	2301      	movs	r3, #1
 800067a:	4013      	ands	r3, r2
 800067c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800067e:	18d3      	adds	r3, r2, r3
 8000680:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id = device_id << 1;
 8000682:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000684:	005b      	lsls	r3, r3, #1
 8000686:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id += HAL_GPIO_ReadPin(ADD5_GPIO_Port, ADD5_Pin) & 0x01;
 8000688:	4b82      	ldr	r3, [pc, #520]	@ (8000894 <main+0x2f8>)
 800068a:	2140      	movs	r1, #64	@ 0x40
 800068c:	0018      	movs	r0, r3
 800068e:	f002 fe65 	bl	800335c <HAL_GPIO_ReadPin>
 8000692:	0003      	movs	r3, r0
 8000694:	001a      	movs	r2, r3
 8000696:	2301      	movs	r3, #1
 8000698:	4013      	ands	r3, r2
 800069a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800069c:	18d3      	adds	r3, r2, r3
 800069e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id = device_id << 1;
 80006a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id += HAL_GPIO_ReadPin(ADD4_GPIO_Port, ADD4_Pin) & 0x01;
 80006a6:	2380      	movs	r3, #128	@ 0x80
 80006a8:	009a      	lsls	r2, r3, #2
 80006aa:	23a0      	movs	r3, #160	@ 0xa0
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	0011      	movs	r1, r2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f002 fe53 	bl	800335c <HAL_GPIO_ReadPin>
 80006b6:	0003      	movs	r3, r0
 80006b8:	001a      	movs	r2, r3
 80006ba:	2301      	movs	r3, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80006c0:	18d3      	adds	r3, r2, r3
 80006c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id = device_id << 1;
 80006c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006c6:	005b      	lsls	r3, r3, #1
 80006c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id += HAL_GPIO_ReadPin(ADD3_GPIO_Port, ADD3_Pin) & 0x01;
 80006ca:	2380      	movs	r3, #128	@ 0x80
 80006cc:	005a      	lsls	r2, r3, #1
 80006ce:	23a0      	movs	r3, #160	@ 0xa0
 80006d0:	05db      	lsls	r3, r3, #23
 80006d2:	0011      	movs	r1, r2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f002 fe41 	bl	800335c <HAL_GPIO_ReadPin>
 80006da:	0003      	movs	r3, r0
 80006dc:	001a      	movs	r2, r3
 80006de:	2301      	movs	r3, #1
 80006e0:	4013      	ands	r3, r2
 80006e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80006e4:	18d3      	adds	r3, r2, r3
 80006e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id = device_id << 1;
 80006e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006ea:	005b      	lsls	r3, r3, #1
 80006ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id += HAL_GPIO_ReadPin(ADD2_GPIO_Port, ADD2_Pin) & 0x01;
 80006ee:	2380      	movs	r3, #128	@ 0x80
 80006f0:	021b      	lsls	r3, r3, #8
 80006f2:	4a67      	ldr	r2, [pc, #412]	@ (8000890 <main+0x2f4>)
 80006f4:	0019      	movs	r1, r3
 80006f6:	0010      	movs	r0, r2
 80006f8:	f002 fe30 	bl	800335c <HAL_GPIO_ReadPin>
 80006fc:	0003      	movs	r3, r0
 80006fe:	001a      	movs	r2, r3
 8000700:	2301      	movs	r3, #1
 8000702:	4013      	ands	r3, r2
 8000704:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000706:	18d3      	adds	r3, r2, r3
 8000708:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id = device_id << 1;
 800070a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800070c:	005b      	lsls	r3, r3, #1
 800070e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id += HAL_GPIO_ReadPin(ADD1_GPIO_Port, ADD1_Pin) & 0x01;
 8000710:	2380      	movs	r3, #128	@ 0x80
 8000712:	01db      	lsls	r3, r3, #7
 8000714:	4a5e      	ldr	r2, [pc, #376]	@ (8000890 <main+0x2f4>)
 8000716:	0019      	movs	r1, r3
 8000718:	0010      	movs	r0, r2
 800071a:	f002 fe1f 	bl	800335c <HAL_GPIO_ReadPin>
 800071e:	0003      	movs	r3, r0
 8000720:	001a      	movs	r2, r3
 8000722:	2301      	movs	r3, #1
 8000724:	4013      	ands	r3, r2
 8000726:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000728:	18d3      	adds	r3, r2, r3
 800072a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id = device_id << 1;
 800072c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  device_id += HAL_GPIO_ReadPin(ADD0_GPIO_Port, ADD0_Pin) & 0x01;
 8000732:	2380      	movs	r3, #128	@ 0x80
 8000734:	019b      	lsls	r3, r3, #6
 8000736:	4a56      	ldr	r2, [pc, #344]	@ (8000890 <main+0x2f4>)
 8000738:	0019      	movs	r1, r3
 800073a:	0010      	movs	r0, r2
 800073c:	f002 fe0e 	bl	800335c <HAL_GPIO_ReadPin>
 8000740:	0003      	movs	r3, r0
 8000742:	001a      	movs	r2, r3
 8000744:	2301      	movs	r3, #1
 8000746:	4013      	ands	r3, r2
 8000748:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800074a:	18d3      	adds	r3, r2, r3
 800074c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  } while (temp != device_id);
 800074e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000752:	429a      	cmp	r2, r3
 8000754:	d000      	beq.n	8000758 <main+0x1bc>
 8000756:	e773      	b.n	8000640 <main+0xa4>


  // attiva la ricezione ad interrupt
  rxIndex = 0;
 8000758:	4b4f      	ldr	r3, [pc, #316]	@ (8000898 <main+0x2fc>)
 800075a:	2200      	movs	r2, #0
 800075c:	701a      	strb	r2, [r3, #0]
  EN_RX_485();
 800075e:	4b4c      	ldr	r3, [pc, #304]	@ (8000890 <main+0x2f4>)
 8000760:	2200      	movs	r2, #0
 8000762:	2108      	movs	r1, #8
 8000764:	0018      	movs	r0, r3
 8000766:	f002 fe16 	bl	8003396 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800076a:	200a      	movs	r0, #10
 800076c:	f000 ffd8 	bl	8001720 <HAL_Delay>
  HAL_UART_Receive_IT(&huart1, &rxRcvd, 1);
 8000770:	494a      	ldr	r1, [pc, #296]	@ (800089c <main+0x300>)
 8000772:	4b4b      	ldr	r3, [pc, #300]	@ (80008a0 <main+0x304>)
 8000774:	2201      	movs	r2, #1
 8000776:	0018      	movs	r0, r3
 8000778:	f003 fb64 	bl	8003e44 <HAL_UART_Receive_IT>

  // Avvia la conversione
  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)anValues, 3) != HAL_OK) { Error_Handler(); }
 800077c:	4949      	ldr	r1, [pc, #292]	@ (80008a4 <main+0x308>)
 800077e:	4b4a      	ldr	r3, [pc, #296]	@ (80008a8 <main+0x30c>)
 8000780:	2203      	movs	r2, #3
 8000782:	0018      	movs	r0, r3
 8000784:	f001 faee 	bl	8001d64 <HAL_ADC_Start_DMA>
 8000788:	1e03      	subs	r3, r0, #0
 800078a:	d001      	beq.n	8000790 <main+0x1f4>
 800078c:	f000 fd38 	bl	8001200 <Error_Handler>

  // invio stringa di debug
  sprintf((char *)txBuffer, "\r\n" VERSION "\r\n");
 8000790:	4a46      	ldr	r2, [pc, #280]	@ (80008ac <main+0x310>)
 8000792:	4b47      	ldr	r3, [pc, #284]	@ (80008b0 <main+0x314>)
 8000794:	0011      	movs	r1, r2
 8000796:	0018      	movs	r0, r3
 8000798:	f005 fa2a 	bl	8005bf0 <siprintf>
  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 800079c:	4b44      	ldr	r3, [pc, #272]	@ (80008b0 <main+0x314>)
 800079e:	0018      	movs	r0, r3
 80007a0:	f7ff fcb2 	bl	8000108 <strlen>
 80007a4:	0003      	movs	r3, r0
 80007a6:	b29a      	uxth	r2, r3
 80007a8:	4941      	ldr	r1, [pc, #260]	@ (80008b0 <main+0x314>)
 80007aa:	4842      	ldr	r0, [pc, #264]	@ (80008b4 <main+0x318>)
 80007ac:	2364      	movs	r3, #100	@ 0x64
 80007ae:	f003 faa5 	bl	8003cfc <HAL_UART_Transmit>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  status = HAL_ADC_GetState(&hadc1);
 80007b2:	4b3d      	ldr	r3, [pc, #244]	@ (80008a8 <main+0x30c>)
 80007b4:	0018      	movs	r0, r3
 80007b6:	f001 fd51 	bl	800225c <HAL_ADC_GetState>
 80007ba:	0003      	movs	r3, r0
 80007bc:	627b      	str	r3, [r7, #36]	@ 0x24

	  if ( (status & HAL_ADC_STATE_REG_BUSY) == 0 ) {
 80007be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80007c0:	2380      	movs	r3, #128	@ 0x80
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4013      	ands	r3, r2
 80007c6:	d000      	beq.n	80007ca <main+0x22e>
 80007c8:	e09a      	b.n	8000900 <main+0x364>

		  // La scansione ADC è completa
		  angolo4096 = (anValues[0] + anValues[1] + anValues[2]) / 3;
 80007ca:	4b36      	ldr	r3, [pc, #216]	@ (80008a4 <main+0x308>)
 80007cc:	881b      	ldrh	r3, [r3, #0]
 80007ce:	001a      	movs	r2, r3
 80007d0:	4b34      	ldr	r3, [pc, #208]	@ (80008a4 <main+0x308>)
 80007d2:	885b      	ldrh	r3, [r3, #2]
 80007d4:	18d3      	adds	r3, r2, r3
 80007d6:	4a33      	ldr	r2, [pc, #204]	@ (80008a4 <main+0x308>)
 80007d8:	8892      	ldrh	r2, [r2, #4]
 80007da:	189b      	adds	r3, r3, r2
 80007dc:	2103      	movs	r1, #3
 80007de:	0018      	movs	r0, r3
 80007e0:	f7ff fd2e 	bl	8000240 <__divsi3>
 80007e4:	0003      	movs	r3, r0
 80007e6:	b29a      	uxth	r2, r3
 80007e8:	4b33      	ldr	r3, [pc, #204]	@ (80008b8 <main+0x31c>)
 80007ea:	801a      	strh	r2, [r3, #0]
				    , angolo4096);
		   HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
		   */

		  // Riavvia un'altra conversione
		  if (HAL_ADC_Start_DMA(&hadc1, (uint32_t *)anValues, 3) != HAL_OK) { Error_Handler(); }
 80007ec:	492d      	ldr	r1, [pc, #180]	@ (80008a4 <main+0x308>)
 80007ee:	4b2e      	ldr	r3, [pc, #184]	@ (80008a8 <main+0x30c>)
 80007f0:	2203      	movs	r2, #3
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 fab6 	bl	8001d64 <HAL_ADC_Start_DMA>
 80007f8:	1e03      	subs	r3, r0, #0
 80007fa:	d001      	beq.n	8000800 <main+0x264>
 80007fc:	f000 fd00 	bl	8001200 <Error_Handler>

		  // se devo posizionare ad anello chiuso,
		  // eseguo la movimentazione
		  if (deg4096_to_go >= 0) {
 8000800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000802:	2b00      	cmp	r3, #0
 8000804:	da00      	bge.n	8000808 <main+0x26c>
 8000806:	e07b      	b.n	8000900 <main+0x364>

 			  // abilitazione
 			  HAL_GPIO_WritePin(A4988_nSLEEP_GPIO_Port, A4988_nSLEEP_Pin, 1);
 8000808:	4b21      	ldr	r3, [pc, #132]	@ (8000890 <main+0x2f4>)
 800080a:	2201      	movs	r2, #1
 800080c:	2102      	movs	r1, #2
 800080e:	0018      	movs	r0, r3
 8000810:	f002 fdc1 	bl	8003396 <HAL_GPIO_WritePin>
 			  HAL_GPIO_WritePin(A4988_nEN_GPIO_Port,    A4988_nEN_Pin,    0);
 8000814:	23a0      	movs	r3, #160	@ 0xa0
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	2200      	movs	r2, #0
 800081a:	2110      	movs	r1, #16
 800081c:	0018      	movs	r0, r3
 800081e:	f002 fdba 	bl	8003396 <HAL_GPIO_WritePin>
 			  /* A4988 MS3, MS2, MS1 LOW  HIGH HIGH =  8 microstep */
 			  HAL_GPIO_WritePin(A4988_MS1_GPIO_Port, A4988_MS1_Pin, 1);
 8000822:	23a0      	movs	r3, #160	@ 0xa0
 8000824:	05db      	lsls	r3, r3, #23
 8000826:	2201      	movs	r2, #1
 8000828:	2120      	movs	r1, #32
 800082a:	0018      	movs	r0, r3
 800082c:	f002 fdb3 	bl	8003396 <HAL_GPIO_WritePin>
 			  HAL_GPIO_WritePin(A4988_MS2_GPIO_Port, A4988_MS2_Pin, 1);
 8000830:	23a0      	movs	r3, #160	@ 0xa0
 8000832:	05db      	lsls	r3, r3, #23
 8000834:	2201      	movs	r2, #1
 8000836:	2140      	movs	r1, #64	@ 0x40
 8000838:	0018      	movs	r0, r3
 800083a:	f002 fdac 	bl	8003396 <HAL_GPIO_WritePin>
 			  HAL_GPIO_WritePin(A4988_MS3_GPIO_Port, A4988_MS3_Pin, 0);
 800083e:	23a0      	movs	r3, #160	@ 0xa0
 8000840:	05db      	lsls	r3, r3, #23
 8000842:	2200      	movs	r2, #0
 8000844:	2180      	movs	r1, #128	@ 0x80
 8000846:	0018      	movs	r0, r3
 8000848:	f002 fda5 	bl	8003396 <HAL_GPIO_WritePin>
 			  HAL_Delay(1);
 800084c:	2001      	movs	r0, #1
 800084e:	f000 ff67 	bl	8001720 <HAL_Delay>

 			  // vai avanti se è troppo indietro
 			  if (angolo4096 < (deg4096_to_go - SAFETY_GAP)) {
 8000852:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <main+0x31c>)
 8000854:	881b      	ldrh	r3, [r3, #0]
 8000856:	001a      	movs	r2, r3
 8000858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800085a:	3b28      	subs	r3, #40	@ 0x28
 800085c:	429a      	cmp	r2, r3
 800085e:	da07      	bge.n	8000870 <main+0x2d4>
 				  HAL_GPIO_WritePin(A4988_DIR_GPIO_Port,  A4988_DIR_Pin, 1);
 8000860:	2380      	movs	r3, #128	@ 0x80
 8000862:	00db      	lsls	r3, r3, #3
 8000864:	480a      	ldr	r0, [pc, #40]	@ (8000890 <main+0x2f4>)
 8000866:	2201      	movs	r2, #1
 8000868:	0019      	movs	r1, r3
 800086a:	f002 fd94 	bl	8003396 <HAL_GPIO_WritePin>
 800086e:	e035      	b.n	80008dc <main+0x340>
 			  }
 			  else
 	 		  // vai indietro se è troppo avanti
 	 		  if (angolo4096 > (deg4096_to_go + SAFETY_GAP)) {
 8000870:	4b11      	ldr	r3, [pc, #68]	@ (80008b8 <main+0x31c>)
 8000872:	881b      	ldrh	r3, [r3, #0]
 8000874:	001a      	movs	r2, r3
 8000876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000878:	3328      	adds	r3, #40	@ 0x28
 800087a:	429a      	cmp	r2, r3
 800087c:	dd1e      	ble.n	80008bc <main+0x320>
 	 			  HAL_GPIO_WritePin(A4988_DIR_GPIO_Port,  A4988_DIR_Pin, 0);
 800087e:	2380      	movs	r3, #128	@ 0x80
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	4803      	ldr	r0, [pc, #12]	@ (8000890 <main+0x2f4>)
 8000884:	2200      	movs	r2, #0
 8000886:	0019      	movs	r1, r3
 8000888:	f002 fd85 	bl	8003396 <HAL_GPIO_WritePin>
 800088c:	e026      	b.n	80008dc <main+0x340>
 800088e:	46c0      	nop			@ (mov r8, r8)
 8000890:	50000400 	.word	0x50000400
 8000894:	50000800 	.word	0x50000800
 8000898:	20000460 	.word	0x20000460
 800089c:	20000461 	.word	0x20000461
 80008a0:	20000138 	.word	0x20000138
 80008a4:	20000564 	.word	0x20000564
 80008a8:	20000078 	.word	0x20000078
 80008ac:	08006544 	.word	0x08006544
 80008b0:	20000260 	.word	0x20000260
 80008b4:	200001cc 	.word	0x200001cc
 80008b8:	2000056a 	.word	0x2000056a
 	 		  }
 	 		  else
 	 	      // sono arrivato dentro la banda di sicurezza +/- SAFETY_GAP
 			  //: disabilito
 	 		  {
 	 			  deg4096_to_go = -1;
 80008bc:	2301      	movs	r3, #1
 80008be:	425b      	negs	r3, r3
 80008c0:	633b      	str	r3, [r7, #48]	@ 0x30

 	 			  // disabilitazione
 	 			  HAL_GPIO_WritePin(A4988_nSLEEP_GPIO_Port, A4988_nSLEEP_Pin, 0);
 80008c2:	4bbe      	ldr	r3, [pc, #760]	@ (8000bbc <main+0x620>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	2102      	movs	r1, #2
 80008c8:	0018      	movs	r0, r3
 80008ca:	f002 fd64 	bl	8003396 <HAL_GPIO_WritePin>
 	 			  HAL_GPIO_WritePin(A4988_nEN_GPIO_Port,    A4988_nEN_Pin,    1);
 80008ce:	23a0      	movs	r3, #160	@ 0xa0
 80008d0:	05db      	lsls	r3, r3, #23
 80008d2:	2201      	movs	r2, #1
 80008d4:	2110      	movs	r1, #16
 80008d6:	0018      	movs	r0, r3
 80008d8:	f002 fd5d 	bl	8003396 <HAL_GPIO_WritePin>
 	 		  }

 			  /* faccio uno step */
 			  HAL_GPIO_WritePin(A4988_STEP_GPIO_Port, A4988_STEP_Pin, 1);
 80008dc:	4bb7      	ldr	r3, [pc, #732]	@ (8000bbc <main+0x620>)
 80008de:	2201      	movs	r2, #1
 80008e0:	2104      	movs	r1, #4
 80008e2:	0018      	movs	r0, r3
 80008e4:	f002 fd57 	bl	8003396 <HAL_GPIO_WritePin>
 			  HAL_Delay(1);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f000 ff19 	bl	8001720 <HAL_Delay>
 			  HAL_GPIO_WritePin(A4988_STEP_GPIO_Port, A4988_STEP_Pin, 0);
 80008ee:	4bb3      	ldr	r3, [pc, #716]	@ (8000bbc <main+0x620>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	2104      	movs	r1, #4
 80008f4:	0018      	movs	r0, r3
 80008f6:	f002 fd4e 	bl	8003396 <HAL_GPIO_WritePin>
 			  HAL_Delay(1);
 80008fa:	2001      	movs	r0, #1
 80008fc:	f000 ff10 	bl	8001720 <HAL_Delay>
	  }

	  /* controllo del motore */

	  /* protocollo JSON */
	  long int json1 = ParserJSON("id");
 8000900:	4baf      	ldr	r3, [pc, #700]	@ (8000bc0 <main+0x624>)
 8000902:	0018      	movs	r0, r3
 8000904:	f7ff fd88 	bl	8000418 <ParserJSON>
 8000908:	0003      	movs	r3, r0
 800090a:	623b      	str	r3, [r7, #32]
	  long int json2 = ParserJSON("dir");
 800090c:	4bad      	ldr	r3, [pc, #692]	@ (8000bc4 <main+0x628>)
 800090e:	0018      	movs	r0, r3
 8000910:	f7ff fd82 	bl	8000418 <ParserJSON>
 8000914:	0003      	movs	r3, r0
 8000916:	61fb      	str	r3, [r7, #28]
	  long int json3 = ParserJSON("step");
 8000918:	4bab      	ldr	r3, [pc, #684]	@ (8000bc8 <main+0x62c>)
 800091a:	0018      	movs	r0, r3
 800091c:	f7ff fd7c 	bl	8000418 <ParserJSON>
 8000920:	0003      	movs	r3, r0
 8000922:	61bb      	str	r3, [r7, #24]
	  long int json4 = ParserJSON("ppr");   // pulses per revolution
 8000924:	4ba9      	ldr	r3, [pc, #676]	@ (8000bcc <main+0x630>)
 8000926:	0018      	movs	r0, r3
 8000928:	f7ff fd76 	bl	8000418 <ParserJSON>
 800092c:	0003      	movs	r3, r0
 800092e:	617b      	str	r3, [r7, #20]
	  long int json5 = ParserJSON("deg");   // eseguo subito un posizionamento con controllo ad anello chiuso
 8000930:	4ba7      	ldr	r3, [pc, #668]	@ (8000bd0 <main+0x634>)
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff fd70 	bl	8000418 <ParserJSON>
 8000938:	0003      	movs	r3, r0
 800093a:	613b      	str	r3, [r7, #16]
	  long int json6 = ParserJSON("go");
 800093c:	4ba5      	ldr	r3, [pc, #660]	@ (8000bd4 <main+0x638>)
 800093e:	0018      	movs	r0, r3
 8000940:	f7ff fd6a 	bl	8000418 <ParserJSON>
 8000944:	0003      	movs	r3, r0
 8000946:	60fb      	str	r3, [r7, #12]
	  long int json7 = ParserJSON("rnd");   // serve a complicare il protocollo e renderlo un po' più robusto
 8000948:	4ba3      	ldr	r3, [pc, #652]	@ (8000bd8 <main+0x63c>)
 800094a:	0018      	movs	r0, r3
 800094c:	f7ff fd64 	bl	8000418 <ParserJSON>
 8000950:	0003      	movs	r3, r0
 8000952:	60bb      	str	r3, [r7, #8]
	  long int csum  = ParserJSON("csum");
 8000954:	4ba1      	ldr	r3, [pc, #644]	@ (8000bdc <main+0x640>)
 8000956:	0018      	movs	r0, r3
 8000958:	f7ff fd5e 	bl	8000418 <ParserJSON>
 800095c:	0003      	movs	r3, r0
 800095e:	607b      	str	r3, [r7, #4]
 	  int rnd = HAL_GetTick() & 0xffff;     // genera numero pseudo casuale
 8000960:	f000 fed4 	bl	800170c <HAL_GetTick>
 8000964:	0003      	movs	r3, r0
 8000966:	041b      	lsls	r3, r3, #16
 8000968:	0c1b      	lsrs	r3, r3, #16
 800096a:	603b      	str	r3, [r7, #0]


	  if ((json1 == device_id) || (json1 == DEVICE_ID_BROADCAST)) {
 800096c:	6a3a      	ldr	r2, [r7, #32]
 800096e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000970:	429a      	cmp	r2, r3
 8000972:	d003      	beq.n	800097c <main+0x3e0>
 8000974:	6a3b      	ldr	r3, [r7, #32]
 8000976:	2bff      	cmp	r3, #255	@ 0xff
 8000978:	d000      	beq.n	800097c <main+0x3e0>
 800097a:	e71a      	b.n	80007b2 <main+0x216>

		  // attendo un attimo per consentire lo switch TX->RX al master
		  HAL_Delay(1);
 800097c:	2001      	movs	r0, #1
 800097e:	f000 fecf 	bl	8001720 <HAL_Delay>
		  //sprintf((char *)txBuffer, "<-- %s\n\r", rxBuffer);
		  //HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);

		  // FF = Broadcasting

		  long int tmpCsum = json1;
 8000982:	6a3b      	ldr	r3, [r7, #32]
 8000984:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  if ( json2 != JSON_TOKEN_NOT_FOUND ) { tmpCsum += json2; }
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	4a95      	ldr	r2, [pc, #596]	@ (8000be0 <main+0x644>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d003      	beq.n	8000996 <main+0x3fa>
 800098e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	18d3      	adds	r3, r2, r3
 8000994:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  if ( json3 != JSON_TOKEN_NOT_FOUND ) { tmpCsum += json3; }
 8000996:	69bb      	ldr	r3, [r7, #24]
 8000998:	4a91      	ldr	r2, [pc, #580]	@ (8000be0 <main+0x644>)
 800099a:	4293      	cmp	r3, r2
 800099c:	d003      	beq.n	80009a6 <main+0x40a>
 800099e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	18d3      	adds	r3, r2, r3
 80009a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  if ( json4 != JSON_TOKEN_NOT_FOUND ) { tmpCsum += json4; }
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	4a8d      	ldr	r2, [pc, #564]	@ (8000be0 <main+0x644>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d003      	beq.n	80009b6 <main+0x41a>
 80009ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	18d3      	adds	r3, r2, r3
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  if ( json5 != JSON_TOKEN_NOT_FOUND ) { tmpCsum += json5; }
 80009b6:	693b      	ldr	r3, [r7, #16]
 80009b8:	4a89      	ldr	r2, [pc, #548]	@ (8000be0 <main+0x644>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d003      	beq.n	80009c6 <main+0x42a>
 80009be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	18d3      	adds	r3, r2, r3
 80009c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  if ( json6 != JSON_TOKEN_NOT_FOUND ) { tmpCsum += json6; }
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	4a85      	ldr	r2, [pc, #532]	@ (8000be0 <main+0x644>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d003      	beq.n	80009d6 <main+0x43a>
 80009ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	18d3      	adds	r3, r2, r3
 80009d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		  if ( json7 != JSON_TOKEN_NOT_FOUND ) { tmpCsum += json7; }
 80009d6:	68bb      	ldr	r3, [r7, #8]
 80009d8:	4a81      	ldr	r2, [pc, #516]	@ (8000be0 <main+0x644>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d003      	beq.n	80009e6 <main+0x44a>
 80009de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	18d3      	adds	r3, r2, r3
 80009e4:	62fb      	str	r3, [r7, #44]	@ 0x2c

	 	  if ( csum == tmpCsum ) {
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d000      	beq.n	80009f0 <main+0x454>
 80009ee:	e155      	b.n	8000c9c <main+0x700>
	 		  //HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);

	 		  // esegue il comando

	 		  // PULSES PER REVOLUTION
	 		  if ( json4 != JSON_TOKEN_NOT_FOUND ) {
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	4a7b      	ldr	r2, [pc, #492]	@ (8000be0 <main+0x644>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d100      	bne.n	80009fa <main+0x45e>
 80009f8:	e08c      	b.n	8000b14 <main+0x578>
	 			  switch ( json4 ) {
 80009fa:	697a      	ldr	r2, [r7, #20]
 80009fc:	23c8      	movs	r3, #200	@ 0xc8
 80009fe:	011b      	lsls	r3, r3, #4
 8000a00:	429a      	cmp	r2, r3
 8000a02:	d05b      	beq.n	8000abc <main+0x520>
 8000a04:	697a      	ldr	r2, [r7, #20]
 8000a06:	23c8      	movs	r3, #200	@ 0xc8
 8000a08:	011b      	lsls	r3, r3, #4
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	dc6c      	bgt.n	8000ae8 <main+0x54c>
 8000a0e:	697a      	ldr	r2, [r7, #20]
 8000a10:	23c8      	movs	r3, #200	@ 0xc8
 8000a12:	00db      	lsls	r3, r3, #3
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d03b      	beq.n	8000a90 <main+0x4f4>
 8000a18:	697a      	ldr	r2, [r7, #20]
 8000a1a:	23c8      	movs	r3, #200	@ 0xc8
 8000a1c:	00db      	lsls	r3, r3, #3
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	dc62      	bgt.n	8000ae8 <main+0x54c>
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	23c8      	movs	r3, #200	@ 0xc8
 8000a26:	005b      	lsls	r3, r3, #1
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d005      	beq.n	8000a38 <main+0x49c>
 8000a2c:	697a      	ldr	r2, [r7, #20]
 8000a2e:	23c8      	movs	r3, #200	@ 0xc8
 8000a30:	009b      	lsls	r3, r3, #2
 8000a32:	429a      	cmp	r2, r3
 8000a34:	d016      	beq.n	8000a64 <main+0x4c8>
 8000a36:	e057      	b.n	8000ae8 <main+0x54c>
 			  	  	  case 400: /* A4988 MS3, MS2, MS1 LOW  LOW  HIGH =   HALF STEP  */
 			  	  		  HAL_GPIO_WritePin(A4988_MS1_GPIO_Port, A4988_MS1_Pin, 1);
 8000a38:	23a0      	movs	r3, #160	@ 0xa0
 8000a3a:	05db      	lsls	r3, r3, #23
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2120      	movs	r1, #32
 8000a40:	0018      	movs	r0, r3
 8000a42:	f002 fca8 	bl	8003396 <HAL_GPIO_WritePin>
 			  	  		  HAL_GPIO_WritePin(A4988_MS2_GPIO_Port, A4988_MS2_Pin, 0);
 8000a46:	23a0      	movs	r3, #160	@ 0xa0
 8000a48:	05db      	lsls	r3, r3, #23
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2140      	movs	r1, #64	@ 0x40
 8000a4e:	0018      	movs	r0, r3
 8000a50:	f002 fca1 	bl	8003396 <HAL_GPIO_WritePin>
 			  	  		  HAL_GPIO_WritePin(A4988_MS3_GPIO_Port, A4988_MS3_Pin, 0);
 8000a54:	23a0      	movs	r3, #160	@ 0xa0
 8000a56:	05db      	lsls	r3, r3, #23
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2180      	movs	r1, #128	@ 0x80
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f002 fc9a 	bl	8003396 <HAL_GPIO_WritePin>
 			  	  		  break;
 8000a62:	e057      	b.n	8000b14 <main+0x578>

 			  	  	  case 800: /* A4988 MS3, MS2, MS1 LOW  HIGH LOW  =  4 microstep */
 			  	  		  HAL_GPIO_WritePin(A4988_MS1_GPIO_Port, A4988_MS1_Pin, 0);
 8000a64:	23a0      	movs	r3, #160	@ 0xa0
 8000a66:	05db      	lsls	r3, r3, #23
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2120      	movs	r1, #32
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 fc92 	bl	8003396 <HAL_GPIO_WritePin>
 			  	  		  HAL_GPIO_WritePin(A4988_MS2_GPIO_Port, A4988_MS2_Pin, 1);
 8000a72:	23a0      	movs	r3, #160	@ 0xa0
 8000a74:	05db      	lsls	r3, r3, #23
 8000a76:	2201      	movs	r2, #1
 8000a78:	2140      	movs	r1, #64	@ 0x40
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f002 fc8b 	bl	8003396 <HAL_GPIO_WritePin>
 			  	  		  HAL_GPIO_WritePin(A4988_MS3_GPIO_Port, A4988_MS3_Pin, 0);
 8000a80:	23a0      	movs	r3, #160	@ 0xa0
 8000a82:	05db      	lsls	r3, r3, #23
 8000a84:	2200      	movs	r2, #0
 8000a86:	2180      	movs	r1, #128	@ 0x80
 8000a88:	0018      	movs	r0, r3
 8000a8a:	f002 fc84 	bl	8003396 <HAL_GPIO_WritePin>
 			  	  		  break;
 8000a8e:	e041      	b.n	8000b14 <main+0x578>

 			  	  	  case 1600: /* A4988 MS3, MS2, MS1 LOW  HIGH HIGH =  8 microstep */
 			  	  		  HAL_GPIO_WritePin(A4988_MS1_GPIO_Port, A4988_MS1_Pin, 1);
 8000a90:	23a0      	movs	r3, #160	@ 0xa0
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	2201      	movs	r2, #1
 8000a96:	2120      	movs	r1, #32
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f002 fc7c 	bl	8003396 <HAL_GPIO_WritePin>
 			  	  		  HAL_GPIO_WritePin(A4988_MS2_GPIO_Port, A4988_MS2_Pin, 1);
 8000a9e:	23a0      	movs	r3, #160	@ 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	2140      	movs	r1, #64	@ 0x40
 8000aa6:	0018      	movs	r0, r3
 8000aa8:	f002 fc75 	bl	8003396 <HAL_GPIO_WritePin>
 			  	  		  HAL_GPIO_WritePin(A4988_MS3_GPIO_Port, A4988_MS3_Pin, 0);
 8000aac:	23a0      	movs	r3, #160	@ 0xa0
 8000aae:	05db      	lsls	r3, r3, #23
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2180      	movs	r1, #128	@ 0x80
 8000ab4:	0018      	movs	r0, r3
 8000ab6:	f002 fc6e 	bl	8003396 <HAL_GPIO_WritePin>
 			  	  		  break;
 8000aba:	e02b      	b.n	8000b14 <main+0x578>

 			  	  	  case 3200: /* A4988 MS3, MS2, MS1 HIGH HIGH HIGH = 16 microstep */
 			  	  		  HAL_GPIO_WritePin(A4988_MS1_GPIO_Port, A4988_MS1_Pin, 1);
 8000abc:	23a0      	movs	r3, #160	@ 0xa0
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2120      	movs	r1, #32
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f002 fc66 	bl	8003396 <HAL_GPIO_WritePin>
 			  	  		  HAL_GPIO_WritePin(A4988_MS2_GPIO_Port, A4988_MS2_Pin, 1);
 8000aca:	23a0      	movs	r3, #160	@ 0xa0
 8000acc:	05db      	lsls	r3, r3, #23
 8000ace:	2201      	movs	r2, #1
 8000ad0:	2140      	movs	r1, #64	@ 0x40
 8000ad2:	0018      	movs	r0, r3
 8000ad4:	f002 fc5f 	bl	8003396 <HAL_GPIO_WritePin>
 			  	  		  HAL_GPIO_WritePin(A4988_MS3_GPIO_Port, A4988_MS3_Pin, 1);
 8000ad8:	23a0      	movs	r3, #160	@ 0xa0
 8000ada:	05db      	lsls	r3, r3, #23
 8000adc:	2201      	movs	r2, #1
 8000ade:	2180      	movs	r1, #128	@ 0x80
 8000ae0:	0018      	movs	r0, r3
 8000ae2:	f002 fc58 	bl	8003396 <HAL_GPIO_WritePin>
 			  	  		  break;
 8000ae6:	e015      	b.n	8000b14 <main+0x578>

	 			  	  case 200:   /* A4988 MS3, MS2, MS1 LOW  LOW  LOW  =   FULL STEP  */
	 			  	  default:
	 			  		  HAL_GPIO_WritePin(A4988_MS1_GPIO_Port, A4988_MS1_Pin, 0);
 8000ae8:	23a0      	movs	r3, #160	@ 0xa0
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	2200      	movs	r2, #0
 8000aee:	2120      	movs	r1, #32
 8000af0:	0018      	movs	r0, r3
 8000af2:	f002 fc50 	bl	8003396 <HAL_GPIO_WritePin>
	 			  		  HAL_GPIO_WritePin(A4988_MS2_GPIO_Port, A4988_MS2_Pin, 0);
 8000af6:	23a0      	movs	r3, #160	@ 0xa0
 8000af8:	05db      	lsls	r3, r3, #23
 8000afa:	2200      	movs	r2, #0
 8000afc:	2140      	movs	r1, #64	@ 0x40
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 fc49 	bl	8003396 <HAL_GPIO_WritePin>
	 			  		  HAL_GPIO_WritePin(A4988_MS3_GPIO_Port, A4988_MS3_Pin, 0);
 8000b04:	23a0      	movs	r3, #160	@ 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2180      	movs	r1, #128	@ 0x80
 8000b0c:	0018      	movs	r0, r3
 8000b0e:	f002 fc42 	bl	8003396 <HAL_GPIO_WritePin>
	 			  		  break;
 8000b12:	46c0      	nop			@ (mov r8, r8)
	 			  }
	 		  }

	 		  // DIRECTION
	 		  if ( json2 != JSON_TOKEN_NOT_FOUND ) {
 8000b14:	69fb      	ldr	r3, [r7, #28]
 8000b16:	4a32      	ldr	r2, [pc, #200]	@ (8000be0 <main+0x644>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d007      	beq.n	8000b2c <main+0x590>
	 			 direction = (json2 != 0)?(1):(-1);  // 1 avanti, -1 indietro
 8000b1c:	69fb      	ldr	r3, [r7, #28]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <main+0x58a>
 8000b22:	2301      	movs	r3, #1
 8000b24:	e001      	b.n	8000b2a <main+0x58e>
 8000b26:	2301      	movs	r3, #1
 8000b28:	425b      	negs	r3, r3
 8000b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
	 		  }

	 		  // STEPS
	 		  if ( json3 != JSON_TOKEN_NOT_FOUND ) {
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8000be0 <main+0x644>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d005      	beq.n	8000b40 <main+0x5a4>
	 			 steps_to_do += direction * json3;
 8000b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000b36:	69ba      	ldr	r2, [r7, #24]
 8000b38:	4353      	muls	r3, r2
 8000b3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000b3c:	18d3      	adds	r3, r2, r3
 8000b3e:	637b      	str	r3, [r7, #52]	@ 0x34
	 		  }

	 		  // DEG (eseguo subito)
	 		  if ( json5 != JSON_TOKEN_NOT_FOUND ) {
 8000b40:	693b      	ldr	r3, [r7, #16]
 8000b42:	4a27      	ldr	r2, [pc, #156]	@ (8000be0 <main+0x644>)
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d001      	beq.n	8000b4c <main+0x5b0>
	 			  deg4096_to_go = json5;
 8000b48:	693b      	ldr	r3, [r7, #16]
 8000b4a:	633b      	str	r3, [r7, #48]	@ 0x30
	 		  }


	 		  // GO
	 		  if (( json6 != JSON_TOKEN_NOT_FOUND ) && ( json6 == 1 )) {
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	4a24      	ldr	r2, [pc, #144]	@ (8000be0 <main+0x644>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d073      	beq.n	8000c3c <main+0x6a0>
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	2b01      	cmp	r3, #1
 8000b58:	d170      	bne.n	8000c3c <main+0x6a0>

	 			  // abilitazione
	 			  HAL_GPIO_WritePin(A4988_nSLEEP_GPIO_Port, A4988_nSLEEP_Pin, 1);
 8000b5a:	4b18      	ldr	r3, [pc, #96]	@ (8000bbc <main+0x620>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2102      	movs	r1, #2
 8000b60:	0018      	movs	r0, r3
 8000b62:	f002 fc18 	bl	8003396 <HAL_GPIO_WritePin>
	 			  HAL_GPIO_WritePin(A4988_nEN_GPIO_Port,    A4988_nEN_Pin,    0);
 8000b66:	23a0      	movs	r3, #160	@ 0xa0
 8000b68:	05db      	lsls	r3, r3, #23
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2110      	movs	r1, #16
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f002 fc11 	bl	8003396 <HAL_GPIO_WritePin>
	 			  HAL_Delay(10);
 8000b74:	200a      	movs	r0, #10
 8000b76:	f000 fdd3 	bl	8001720 <HAL_Delay>

	 			  // vai avanti
	 			  while (steps_to_do > 0) {
 8000b7a:	e01b      	b.n	8000bb4 <main+0x618>
	 				  HAL_GPIO_WritePin(A4988_DIR_GPIO_Port,  A4988_DIR_Pin, 1);
 8000b7c:	2380      	movs	r3, #128	@ 0x80
 8000b7e:	00db      	lsls	r3, r3, #3
 8000b80:	480e      	ldr	r0, [pc, #56]	@ (8000bbc <main+0x620>)
 8000b82:	2201      	movs	r2, #1
 8000b84:	0019      	movs	r1, r3
 8000b86:	f002 fc06 	bl	8003396 <HAL_GPIO_WritePin>

		 			  /* faccio uno step */
		 			  HAL_GPIO_WritePin(A4988_STEP_GPIO_Port, A4988_STEP_Pin, 1);
 8000b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000bbc <main+0x620>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	2104      	movs	r1, #4
 8000b90:	0018      	movs	r0, r3
 8000b92:	f002 fc00 	bl	8003396 <HAL_GPIO_WritePin>
		 			  HAL_Delay(1);
 8000b96:	2001      	movs	r0, #1
 8000b98:	f000 fdc2 	bl	8001720 <HAL_Delay>
		 			  HAL_GPIO_WritePin(A4988_STEP_GPIO_Port, A4988_STEP_Pin, 0);
 8000b9c:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <main+0x620>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2104      	movs	r1, #4
 8000ba2:	0018      	movs	r0, r3
 8000ba4:	f002 fbf7 	bl	8003396 <HAL_GPIO_WritePin>
		 			  HAL_Delay(1);
 8000ba8:	2001      	movs	r0, #1
 8000baa:	f000 fdb9 	bl	8001720 <HAL_Delay>

		 			  steps_to_do --;
 8000bae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bb0:	3b01      	subs	r3, #1
 8000bb2:	637b      	str	r3, [r7, #52]	@ 0x34
	 			  while (steps_to_do > 0) {
 8000bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	dce0      	bgt.n	8000b7c <main+0x5e0>
	 			  }

	 			  // vai indietro
	 			  while (steps_to_do < 0) {
 8000bba:	e02f      	b.n	8000c1c <main+0x680>
 8000bbc:	50000400 	.word	0x50000400
 8000bc0:	080065b4 	.word	0x080065b4
 8000bc4:	080065b8 	.word	0x080065b8
 8000bc8:	080065bc 	.word	0x080065bc
 8000bcc:	080065c4 	.word	0x080065c4
 8000bd0:	080065c8 	.word	0x080065c8
 8000bd4:	080065cc 	.word	0x080065cc
 8000bd8:	080065d0 	.word	0x080065d0
 8000bdc:	080065d4 	.word	0x080065d4
 8000be0:	0000ffff 	.word	0x0000ffff
	 				  HAL_GPIO_WritePin(A4988_DIR_GPIO_Port,  A4988_DIR_Pin, 0);
 8000be4:	2380      	movs	r3, #128	@ 0x80
 8000be6:	00db      	lsls	r3, r3, #3
 8000be8:	4845      	ldr	r0, [pc, #276]	@ (8000d00 <main+0x764>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	0019      	movs	r1, r3
 8000bee:	f002 fbd2 	bl	8003396 <HAL_GPIO_WritePin>

		 			  /* faccio uno step */
		 			  HAL_GPIO_WritePin(A4988_STEP_GPIO_Port, A4988_STEP_Pin, 1);
 8000bf2:	4b43      	ldr	r3, [pc, #268]	@ (8000d00 <main+0x764>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	2104      	movs	r1, #4
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f002 fbcc 	bl	8003396 <HAL_GPIO_WritePin>
		 			  HAL_Delay(1);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f000 fd8e 	bl	8001720 <HAL_Delay>
		 			  HAL_GPIO_WritePin(A4988_STEP_GPIO_Port, A4988_STEP_Pin, 0);
 8000c04:	4b3e      	ldr	r3, [pc, #248]	@ (8000d00 <main+0x764>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	2104      	movs	r1, #4
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f002 fbc3 	bl	8003396 <HAL_GPIO_WritePin>
		 			  HAL_Delay(1);
 8000c10:	2001      	movs	r0, #1
 8000c12:	f000 fd85 	bl	8001720 <HAL_Delay>

		 			  steps_to_do ++;
 8000c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c18:	3301      	adds	r3, #1
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
	 			  while (steps_to_do < 0) {
 8000c1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	dbe0      	blt.n	8000be4 <main+0x648>
	 			  }

	 			  // disabilitazione
 	 			  HAL_GPIO_WritePin(A4988_nSLEEP_GPIO_Port, A4988_nSLEEP_Pin, 0);
 8000c22:	4b37      	ldr	r3, [pc, #220]	@ (8000d00 <main+0x764>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	2102      	movs	r1, #2
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f002 fbb4 	bl	8003396 <HAL_GPIO_WritePin>
	 			  HAL_GPIO_WritePin(A4988_nEN_GPIO_Port,    A4988_nEN_Pin,    1);
 8000c2e:	23a0      	movs	r3, #160	@ 0xa0
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	2201      	movs	r2, #1
 8000c34:	2110      	movs	r1, #16
 8000c36:	0018      	movs	r0, r3
 8000c38:	f002 fbad 	bl	8003396 <HAL_GPIO_WritePin>

	 		  }

	 		  if (json1 == device_id) {
 8000c3c:	6a3a      	ldr	r2, [r7, #32]
 8000c3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c40:	429a      	cmp	r2, r3
 8000c42:	d152      	bne.n	8000cea <main+0x74e>
	 			  // non risponde per i broadcasting

	 			  EN_TX_485();
 8000c44:	4b2e      	ldr	r3, [pc, #184]	@ (8000d00 <main+0x764>)
 8000c46:	2201      	movs	r2, #1
 8000c48:	2108      	movs	r1, #8
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f002 fba3 	bl	8003396 <HAL_GPIO_WritePin>

	 			  // preparo la stringa con due byte di stuffing avanti e indietro
	 			  sprintf((char *)txBuffer, "  {id:%d,deg:%d,ack:1,rnd:%d,csum:%d}\n ",
 8000c50:	4b2c      	ldr	r3, [pc, #176]	@ (8000d04 <main+0x768>)
 8000c52:	881b      	ldrh	r3, [r3, #0]
 8000c54:	001c      	movs	r4, r3
	 	  				              device_id, angolo4096, rnd, device_id + angolo4096 + 1 + rnd );
 8000c56:	4b2b      	ldr	r3, [pc, #172]	@ (8000d04 <main+0x768>)
 8000c58:	881b      	ldrh	r3, [r3, #0]
 8000c5a:	001a      	movs	r2, r3
 8000c5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000c5e:	18d3      	adds	r3, r2, r3
 8000c60:	1c5a      	adds	r2, r3, #1
	 			  sprintf((char *)txBuffer, "  {id:%d,deg:%d,ack:1,rnd:%d,csum:%d}\n ",
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	18d3      	adds	r3, r2, r3
 8000c66:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000c68:	4927      	ldr	r1, [pc, #156]	@ (8000d08 <main+0x76c>)
 8000c6a:	4828      	ldr	r0, [pc, #160]	@ (8000d0c <main+0x770>)
 8000c6c:	9301      	str	r3, [sp, #4]
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	9300      	str	r3, [sp, #0]
 8000c72:	0023      	movs	r3, r4
 8000c74:	f004 ffbc 	bl	8005bf0 <siprintf>

	 			  // se Timeout != 0 la Transmit è bloccante
	 			  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 8000c78:	4b24      	ldr	r3, [pc, #144]	@ (8000d0c <main+0x770>)
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	f7ff fa44 	bl	8000108 <strlen>
 8000c80:	0003      	movs	r3, r0
 8000c82:	b29a      	uxth	r2, r3
 8000c84:	4921      	ldr	r1, [pc, #132]	@ (8000d0c <main+0x770>)
 8000c86:	4822      	ldr	r0, [pc, #136]	@ (8000d10 <main+0x774>)
 8000c88:	2364      	movs	r3, #100	@ 0x64
 8000c8a:	f003 f837 	bl	8003cfc <HAL_UART_Transmit>

	 			  EN_RX_485();
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d00 <main+0x764>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	2108      	movs	r1, #8
 8000c94:	0018      	movs	r0, r3
 8000c96:	f002 fb7e 	bl	8003396 <HAL_GPIO_WritePin>
 8000c9a:	e026      	b.n	8000cea <main+0x74e>
	 		  }
	 	  }
	 	  else if (json1 == device_id) {
 8000c9c:	6a3a      	ldr	r2, [r7, #32]
 8000c9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d122      	bne.n	8000cea <main+0x74e>
 			  // risponde solo se è diretto a me e non per i broadcasting

	 		  EN_TX_485();
 8000ca4:	4b16      	ldr	r3, [pc, #88]	@ (8000d00 <main+0x764>)
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2108      	movs	r1, #8
 8000caa:	0018      	movs	r0, r3
 8000cac:	f002 fb73 	bl	8003396 <HAL_GPIO_WritePin>

	 		  // preparo la stringa con due byte di stuffing avanti e indietro
 			  sprintf((char *)txBuffer, "  {id:%d,ack:0,rnd:%d,csum:%d}\n ",
 	  				              device_id, rnd, device_id + 1 + rnd );
 8000cb0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000cb2:	1c5a      	adds	r2, r3, #1
 			  sprintf((char *)txBuffer, "  {id:%d,ack:0,rnd:%d,csum:%d}\n ",
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	18d3      	adds	r3, r2, r3
 8000cb8:	683c      	ldr	r4, [r7, #0]
 8000cba:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000cbc:	4915      	ldr	r1, [pc, #84]	@ (8000d14 <main+0x778>)
 8000cbe:	4813      	ldr	r0, [pc, #76]	@ (8000d0c <main+0x770>)
 8000cc0:	9300      	str	r3, [sp, #0]
 8000cc2:	0023      	movs	r3, r4
 8000cc4:	f004 ff94 	bl	8005bf0 <siprintf>

 			  // se Timeout != 0 la Transmit è bloccante
 			  HAL_UART_Transmit(&huart1,  txBuffer, strlen((char *)txBuffer), 100);
 8000cc8:	4b10      	ldr	r3, [pc, #64]	@ (8000d0c <main+0x770>)
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f7ff fa1c 	bl	8000108 <strlen>
 8000cd0:	0003      	movs	r3, r0
 8000cd2:	b29a      	uxth	r2, r3
 8000cd4:	490d      	ldr	r1, [pc, #52]	@ (8000d0c <main+0x770>)
 8000cd6:	480e      	ldr	r0, [pc, #56]	@ (8000d10 <main+0x774>)
 8000cd8:	2364      	movs	r3, #100	@ 0x64
 8000cda:	f003 f80f 	bl	8003cfc <HAL_UART_Transmit>

 			  EN_RX_485();
 8000cde:	4b08      	ldr	r3, [pc, #32]	@ (8000d00 <main+0x764>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2108      	movs	r1, #8
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	f002 fb56 	bl	8003396 <HAL_GPIO_WritePin>

	 	  }

	 	  // riavvia la ricezione per un'altra stringa
	 	  memset(rxBuffer, 0, RX_BUFFER_SIZE);
 8000cea:	2380      	movs	r3, #128	@ 0x80
 8000cec:	005a      	lsls	r2, r3, #1
 8000cee:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <main+0x77c>)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f004 ff9c 	bl	8005c30 <memset>
	 	  rxIndex = 0;
 8000cf8:	4b08      	ldr	r3, [pc, #32]	@ (8000d1c <main+0x780>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	701a      	strb	r2, [r3, #0]
  {
 8000cfe:	e558      	b.n	80007b2 <main+0x216>
 8000d00:	50000400 	.word	0x50000400
 8000d04:	2000056a 	.word	0x2000056a
 8000d08:	080065dc 	.word	0x080065dc
 8000d0c:	20000260 	.word	0x20000260
 8000d10:	20000138 	.word	0x20000138
 8000d14:	08006604 	.word	0x08006604
 8000d18:	20000464 	.word	0x20000464
 8000d1c:	20000460 	.word	0x20000460

08000d20 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d20:	b590      	push	{r4, r7, lr}
 8000d22:	b08d      	sub	sp, #52	@ 0x34
 8000d24:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d26:	2414      	movs	r4, #20
 8000d28:	193b      	adds	r3, r7, r4
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	231c      	movs	r3, #28
 8000d2e:	001a      	movs	r2, r3
 8000d30:	2100      	movs	r1, #0
 8000d32:	f004 ff7d 	bl	8005c30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d36:	003b      	movs	r3, r7
 8000d38:	0018      	movs	r0, r3
 8000d3a:	2314      	movs	r3, #20
 8000d3c:	001a      	movs	r2, r3
 8000d3e:	2100      	movs	r1, #0
 8000d40:	f004 ff76 	bl	8005c30 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	2202      	movs	r2, #2
 8000d48:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4a:	193b      	adds	r3, r7, r4
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	0052      	lsls	r2, r2, #1
 8000d50:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d58:	193b      	adds	r3, r7, r4
 8000d5a:	2240      	movs	r2, #64	@ 0x40
 8000d5c:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5e:	193b      	adds	r3, r7, r4
 8000d60:	0018      	movs	r0, r3
 8000d62:	f002 fb35 	bl	80033d0 <HAL_RCC_OscConfig>
 8000d66:	1e03      	subs	r3, r0, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000d6a:	f000 fa49 	bl	8001200 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d6e:	003b      	movs	r3, r7
 8000d70:	2207      	movs	r2, #7
 8000d72:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d74:	003b      	movs	r3, r7
 8000d76:	2200      	movs	r2, #0
 8000d78:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d7a:	003b      	movs	r3, r7
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d80:	003b      	movs	r3, r7
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d86:	003b      	movs	r3, r7
 8000d88:	2280      	movs	r2, #128	@ 0x80
 8000d8a:	01d2      	lsls	r2, r2, #7
 8000d8c:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d8e:	003b      	movs	r3, r7
 8000d90:	2101      	movs	r1, #1
 8000d92:	0018      	movs	r0, r3
 8000d94:	f002 fd00 	bl	8003798 <HAL_RCC_ClockConfig>
 8000d98:	1e03      	subs	r3, r0, #0
 8000d9a:	d001      	beq.n	8000da0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000d9c:	f000 fa30 	bl	8001200 <Error_Handler>
  }
}
 8000da0:	46c0      	nop			@ (mov r8, r8)
 8000da2:	46bd      	mov	sp, r7
 8000da4:	b00d      	add	sp, #52	@ 0x34
 8000da6:	bd90      	pop	{r4, r7, pc}

08000da8 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	0018      	movs	r0, r3
 8000db2:	231c      	movs	r3, #28
 8000db4:	001a      	movs	r2, r3
 8000db6:	2100      	movs	r1, #0
 8000db8:	f004 ff3a 	bl	8005c30 <memset>

  /** Initializes the common peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_HSIKER;
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2280      	movs	r2, #128	@ 0x80
 8000dc0:	0612      	lsls	r2, r2, #24
 8000dc2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.HSIKerClockDivider = RCC_HSIKER_DIV4;
 8000dc4:	1d3b      	adds	r3, r7, #4
 8000dc6:	2260      	movs	r2, #96	@ 0x60
 8000dc8:	605a      	str	r2, [r3, #4]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	0018      	movs	r0, r3
 8000dce:	f002 fe51 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 8000dd2:	1e03      	subs	r3, r0, #0
 8000dd4:	d001      	beq.n	8000dda <PeriphCommonClock_Config+0x32>
  {
    Error_Handler();
 8000dd6:	f000 fa13 	bl	8001200 <Error_Handler>
  }
}
 8000dda:	46c0      	nop			@ (mov r8, r8)
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	b008      	add	sp, #32
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	0018      	movs	r0, r3
 8000dee:	230c      	movs	r3, #12
 8000df0:	001a      	movs	r2, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	f004 ff1c 	bl	8005c30 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000df8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000dfa:	4a3e      	ldr	r2, [pc, #248]	@ (8000ef4 <MX_ADC1_Init+0x110>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000dfe:	4b3c      	ldr	r3, [pc, #240]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e00:	2280      	movs	r2, #128	@ 0x80
 8000e02:	05d2      	lsls	r2, r2, #23
 8000e04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e06:	4b3a      	ldr	r3, [pc, #232]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e0c:	4b38      	ldr	r3, [pc, #224]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e12:	4b37      	ldr	r3, [pc, #220]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e14:	2280      	movs	r2, #128	@ 0x80
 8000e16:	0392      	lsls	r2, r2, #14
 8000e18:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e1a:	4b35      	ldr	r3, [pc, #212]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e20:	4b33      	ldr	r3, [pc, #204]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000e26:	4b32      	ldr	r3, [pc, #200]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e2c:	4b30      	ldr	r3, [pc, #192]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 3;
 8000e32:	4b2f      	ldr	r3, [pc, #188]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e34:	2203      	movs	r2, #3
 8000e36:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e38:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e3a:	2220      	movs	r2, #32
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e40:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e4c:	4b28      	ldr	r3, [pc, #160]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e4e:	222c      	movs	r2, #44	@ 0x2c
 8000e50:	2100      	movs	r1, #0
 8000e52:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e54:	4b26      	ldr	r3, [pc, #152]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_39CYCLES_5;
 8000e5a:	4b25      	ldr	r3, [pc, #148]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e5c:	2205      	movs	r2, #5
 8000e5e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_39CYCLES_5;
 8000e60:	4b23      	ldr	r3, [pc, #140]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e62:	2205      	movs	r2, #5
 8000e64:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000e66:	4b22      	ldr	r3, [pc, #136]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e68:	223c      	movs	r2, #60	@ 0x3c
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000e6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e74:	4b1e      	ldr	r3, [pc, #120]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e76:	0018      	movs	r0, r3
 8000e78:	f000 fdce 	bl	8001a18 <HAL_ADC_Init>
 8000e7c:	1e03      	subs	r3, r0, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_ADC1_Init+0xa0>
  {
    Error_Handler();
 8000e80:	f000 f9be 	bl	8001200 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000e84:	1d3b      	adds	r3, r7, #4
 8000e86:	2201      	movs	r2, #1
 8000e88:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e96:	1d3a      	adds	r2, r7, #4
 8000e98:	4b15      	ldr	r3, [pc, #84]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000e9a:	0011      	movs	r1, r2
 8000e9c:	0018      	movs	r0, r3
 8000e9e:	f001 f807 	bl	8001eb0 <HAL_ADC_ConfigChannel>
 8000ea2:	1e03      	subs	r3, r0, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000ea6:	f000 f9ab 	bl	8001200 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000eaa:	1d3b      	adds	r3, r7, #4
 8000eac:	2204      	movs	r2, #4
 8000eae:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb0:	1d3a      	adds	r2, r7, #4
 8000eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000eb4:	0011      	movs	r1, r2
 8000eb6:	0018      	movs	r0, r3
 8000eb8:	f000 fffa 	bl	8001eb0 <HAL_ADC_ConfigChannel>
 8000ebc:	1e03      	subs	r3, r0, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8000ec0:	f000 f99e 	bl	8001200 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eca:	1d3a      	adds	r2, r7, #4
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000ece:	0011      	movs	r1, r2
 8000ed0:	0018      	movs	r0, r3
 8000ed2:	f000 ffed 	bl	8001eb0 <HAL_ADC_ConfigChannel>
 8000ed6:	1e03      	subs	r3, r0, #0
 8000ed8:	d001      	beq.n	8000ede <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 8000eda:	f000 f991 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* Calibrazione ADC */
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000ede:	4b04      	ldr	r3, [pc, #16]	@ (8000ef0 <MX_ADC1_Init+0x10c>)
 8000ee0:	0018      	movs	r0, r3
 8000ee2:	f001 fbc1 	bl	8002668 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END ADC1_Init 2 */

}
 8000ee6:	46c0      	nop			@ (mov r8, r8)
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	b004      	add	sp, #16
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	46c0      	nop			@ (mov r8, r8)
 8000ef0:	20000078 	.word	0x20000078
 8000ef4:	40012400 	.word	0x40012400

08000ef8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000efc:	4b26      	ldr	r3, [pc, #152]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000efe:	4a27      	ldr	r2, [pc, #156]	@ (8000f9c <MX_USART1_UART_Init+0xa4>)
 8000f00:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19200;
 8000f02:	4b25      	ldr	r3, [pc, #148]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f04:	2296      	movs	r2, #150	@ 0x96
 8000f06:	01d2      	lsls	r2, r2, #7
 8000f08:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f0a:	4b23      	ldr	r3, [pc, #140]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f10:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f16:	4b20      	ldr	r3, [pc, #128]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f1e:	220c      	movs	r2, #12
 8000f20:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f22:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f28:	4b1b      	ldr	r3, [pc, #108]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f2e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f34:	4b18      	ldr	r3, [pc, #96]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 8000f3a:	4b17      	ldr	r3, [pc, #92]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f3c:	2210      	movs	r2, #16
 8000f3e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000f40:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f42:	2280      	movs	r2, #128	@ 0x80
 8000f44:	0152      	lsls	r2, r2, #5
 8000f46:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f48:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f002 fe80 	bl	8003c50 <HAL_UART_Init>
 8000f50:	1e03      	subs	r3, r0, #0
 8000f52:	d001      	beq.n	8000f58 <MX_USART1_UART_Init+0x60>
  {
    Error_Handler();
 8000f54:	f000 f954 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_8_8) != HAL_OK)
 8000f58:	23a0      	movs	r3, #160	@ 0xa0
 8000f5a:	061a      	lsls	r2, r3, #24
 8000f5c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f5e:	0011      	movs	r1, r2
 8000f60:	0018      	movs	r0, r3
 8000f62:	f004 fd66 	bl	8005a32 <HAL_UARTEx_SetTxFifoThreshold>
 8000f66:	1e03      	subs	r3, r0, #0
 8000f68:	d001      	beq.n	8000f6e <MX_USART1_UART_Init+0x76>
  {
    Error_Handler();
 8000f6a:	f000 f949 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f70:	2100      	movs	r1, #0
 8000f72:	0018      	movs	r0, r3
 8000f74:	f004 fd9c 	bl	8005ab0 <HAL_UARTEx_SetRxFifoThreshold>
 8000f78:	1e03      	subs	r3, r0, #0
 8000f7a:	d001      	beq.n	8000f80 <MX_USART1_UART_Init+0x88>
  {
    Error_Handler();
 8000f7c:	f000 f940 	bl	8001200 <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 8000f80:	4b05      	ldr	r3, [pc, #20]	@ (8000f98 <MX_USART1_UART_Init+0xa0>)
 8000f82:	0018      	movs	r0, r3
 8000f84:	f004 fd18 	bl	80059b8 <HAL_UARTEx_EnableFifoMode>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d001      	beq.n	8000f90 <MX_USART1_UART_Init+0x98>
  {
    Error_Handler();
 8000f8c:	f000 f938 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f90:	46c0      	nop			@ (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	46c0      	nop			@ (mov r8, r8)
 8000f98:	20000138 	.word	0x20000138
 8000f9c:	40013800 	.word	0x40013800

08000fa0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000fa6:	4a1b      	ldr	r2, [pc, #108]	@ (8001014 <MX_USART2_UART_Init+0x74>)
 8000fa8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000faa:	4b19      	ldr	r3, [pc, #100]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000fac:	2296      	movs	r2, #150	@ 0x96
 8000fae:	01d2      	lsls	r2, r2, #7
 8000fb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fb2:	4b17      	ldr	r3, [pc, #92]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fbe:	4b14      	ldr	r3, [pc, #80]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fc4:	4b12      	ldr	r3, [pc, #72]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000fc6:	220c      	movs	r2, #12
 8000fc8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fca:	4b11      	ldr	r3, [pc, #68]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fd0:	4b0f      	ldr	r3, [pc, #60]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT|UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000fe4:	2230      	movs	r2, #48	@ 0x30
 8000fe6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart2.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8000fe8:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000fea:	2280      	movs	r2, #128	@ 0x80
 8000fec:	0152      	lsls	r2, r2, #5
 8000fee:	63da      	str	r2, [r3, #60]	@ 0x3c
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000ff0:	4b07      	ldr	r3, [pc, #28]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	0192      	lsls	r2, r2, #6
 8000ff6:	641a      	str	r2, [r3, #64]	@ 0x40
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ff8:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <MX_USART2_UART_Init+0x70>)
 8000ffa:	0018      	movs	r0, r3
 8000ffc:	f002 fe28 	bl	8003c50 <HAL_UART_Init>
 8001000:	1e03      	subs	r3, r0, #0
 8001002:	d001      	beq.n	8001008 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8001004:	f000 f8fc 	bl	8001200 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001008:	46c0      	nop			@ (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			@ (mov r8, r8)
 8001010:	200001cc 	.word	0x200001cc
 8001014:	40004400 	.word	0x40004400

08001018 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800101e:	4b0c      	ldr	r3, [pc, #48]	@ (8001050 <MX_DMA_Init+0x38>)
 8001020:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001022:	4b0b      	ldr	r3, [pc, #44]	@ (8001050 <MX_DMA_Init+0x38>)
 8001024:	2101      	movs	r1, #1
 8001026:	430a      	orrs	r2, r1
 8001028:	639a      	str	r2, [r3, #56]	@ 0x38
 800102a:	4b09      	ldr	r3, [pc, #36]	@ (8001050 <MX_DMA_Init+0x38>)
 800102c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800102e:	2201      	movs	r2, #1
 8001030:	4013      	ands	r3, r2
 8001032:	607b      	str	r3, [r7, #4]
 8001034:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	2100      	movs	r1, #0
 800103a:	2009      	movs	r0, #9
 800103c:	f001 fcba 	bl	80029b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001040:	2009      	movs	r0, #9
 8001042:	f001 fccc 	bl	80029de <HAL_NVIC_EnableIRQ>

}
 8001046:	46c0      	nop			@ (mov r8, r8)
 8001048:	46bd      	mov	sp, r7
 800104a:	b002      	add	sp, #8
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			@ (mov r8, r8)
 8001050:	40021000 	.word	0x40021000

08001054 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001054:	b590      	push	{r4, r7, lr}
 8001056:	b089      	sub	sp, #36	@ 0x24
 8001058:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105a:	240c      	movs	r4, #12
 800105c:	193b      	adds	r3, r7, r4
 800105e:	0018      	movs	r0, r3
 8001060:	2314      	movs	r3, #20
 8001062:	001a      	movs	r2, r3
 8001064:	2100      	movs	r1, #0
 8001066:	f004 fde3 	bl	8005c30 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800106a:	4b46      	ldr	r3, [pc, #280]	@ (8001184 <MX_GPIO_Init+0x130>)
 800106c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800106e:	4b45      	ldr	r3, [pc, #276]	@ (8001184 <MX_GPIO_Init+0x130>)
 8001070:	2101      	movs	r1, #1
 8001072:	430a      	orrs	r2, r1
 8001074:	635a      	str	r2, [r3, #52]	@ 0x34
 8001076:	4b43      	ldr	r3, [pc, #268]	@ (8001184 <MX_GPIO_Init+0x130>)
 8001078:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800107a:	2201      	movs	r2, #1
 800107c:	4013      	ands	r3, r2
 800107e:	60bb      	str	r3, [r7, #8]
 8001080:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001082:	4b40      	ldr	r3, [pc, #256]	@ (8001184 <MX_GPIO_Init+0x130>)
 8001084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001086:	4b3f      	ldr	r3, [pc, #252]	@ (8001184 <MX_GPIO_Init+0x130>)
 8001088:	2102      	movs	r1, #2
 800108a:	430a      	orrs	r2, r1
 800108c:	635a      	str	r2, [r3, #52]	@ 0x34
 800108e:	4b3d      	ldr	r3, [pc, #244]	@ (8001184 <MX_GPIO_Init+0x130>)
 8001090:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001092:	2202      	movs	r2, #2
 8001094:	4013      	ands	r3, r2
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	4b3a      	ldr	r3, [pc, #232]	@ (8001184 <MX_GPIO_Init+0x130>)
 800109c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800109e:	4b39      	ldr	r3, [pc, #228]	@ (8001184 <MX_GPIO_Init+0x130>)
 80010a0:	2104      	movs	r1, #4
 80010a2:	430a      	orrs	r2, r1
 80010a4:	635a      	str	r2, [r3, #52]	@ 0x34
 80010a6:	4b37      	ldr	r3, [pc, #220]	@ (8001184 <MX_GPIO_Init+0x130>)
 80010a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80010aa:	2204      	movs	r2, #4
 80010ac:	4013      	ands	r3, r2
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A4988_nEN_Pin|A4988_MS1_Pin|A4988_MS2_Pin|A4988_MS3_Pin, GPIO_PIN_RESET);
 80010b2:	23a0      	movs	r3, #160	@ 0xa0
 80010b4:	05db      	lsls	r3, r3, #23
 80010b6:	2200      	movs	r2, #0
 80010b8:	21f0      	movs	r1, #240	@ 0xf0
 80010ba:	0018      	movs	r0, r3
 80010bc:	f002 f96b 	bl	8003396 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A4988_nRST_Pin|A4988_nSLEEP_Pin|A4988_STEP_Pin|A4988_DIR_Pin
 80010c0:	4931      	ldr	r1, [pc, #196]	@ (8001188 <MX_GPIO_Init+0x134>)
 80010c2:	4b32      	ldr	r3, [pc, #200]	@ (800118c <MX_GPIO_Init+0x138>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	0018      	movs	r0, r3
 80010c8:	f002 f965 	bl	8003396 <HAL_GPIO_WritePin>
                          |U1_TXEN_485_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : A4988_nEN_Pin A4988_MS1_Pin A4988_MS2_Pin A4988_MS3_Pin */
  GPIO_InitStruct.Pin = A4988_nEN_Pin|A4988_MS1_Pin|A4988_MS2_Pin|A4988_MS3_Pin;
 80010cc:	193b      	adds	r3, r7, r4
 80010ce:	22f0      	movs	r2, #240	@ 0xf0
 80010d0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	193b      	adds	r3, r7, r4
 80010d4:	2201      	movs	r2, #1
 80010d6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	193b      	adds	r3, r7, r4
 80010da:	2200      	movs	r2, #0
 80010dc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e4:	193a      	adds	r2, r7, r4
 80010e6:	23a0      	movs	r3, #160	@ 0xa0
 80010e8:	05db      	lsls	r3, r3, #23
 80010ea:	0011      	movs	r1, r2
 80010ec:	0018      	movs	r0, r3
 80010ee:	f001 ffc3 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : A4988_nRST_Pin A4988_nSLEEP_Pin A4988_STEP_Pin A4988_DIR_Pin
                           U1_TXEN_485_Pin */
  GPIO_InitStruct.Pin = A4988_nRST_Pin|A4988_nSLEEP_Pin|A4988_STEP_Pin|A4988_DIR_Pin
 80010f2:	193b      	adds	r3, r7, r4
 80010f4:	4a24      	ldr	r2, [pc, #144]	@ (8001188 <MX_GPIO_Init+0x134>)
 80010f6:	601a      	str	r2, [r3, #0]
                          |U1_TXEN_485_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010f8:	193b      	adds	r3, r7, r4
 80010fa:	2201      	movs	r2, #1
 80010fc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2200      	movs	r2, #0
 8001108:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800110a:	193b      	adds	r3, r7, r4
 800110c:	4a1f      	ldr	r2, [pc, #124]	@ (800118c <MX_GPIO_Init+0x138>)
 800110e:	0019      	movs	r1, r3
 8001110:	0010      	movs	r0, r2
 8001112:	f001 ffb1 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADD0_Pin ADD1_Pin ADD2_Pin */
  GPIO_InitStruct.Pin = ADD0_Pin|ADD1_Pin|ADD2_Pin;
 8001116:	0021      	movs	r1, r4
 8001118:	187b      	adds	r3, r7, r1
 800111a:	22e0      	movs	r2, #224	@ 0xe0
 800111c:	0212      	lsls	r2, r2, #8
 800111e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001120:	000c      	movs	r4, r1
 8001122:	193b      	adds	r3, r7, r4
 8001124:	2200      	movs	r2, #0
 8001126:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001128:	193b      	adds	r3, r7, r4
 800112a:	2202      	movs	r2, #2
 800112c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800112e:	193b      	adds	r3, r7, r4
 8001130:	4a16      	ldr	r2, [pc, #88]	@ (800118c <MX_GPIO_Init+0x138>)
 8001132:	0019      	movs	r1, r3
 8001134:	0010      	movs	r0, r2
 8001136:	f001 ff9f 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADD3_Pin ADD4_Pin ADD7_Pin */
  GPIO_InitStruct.Pin = ADD3_Pin|ADD4_Pin|ADD7_Pin;
 800113a:	193b      	adds	r3, r7, r4
 800113c:	22e0      	movs	r2, #224	@ 0xe0
 800113e:	00d2      	lsls	r2, r2, #3
 8001140:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001142:	193b      	adds	r3, r7, r4
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001148:	193b      	adds	r3, r7, r4
 800114a:	2202      	movs	r2, #2
 800114c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	193a      	adds	r2, r7, r4
 8001150:	23a0      	movs	r3, #160	@ 0xa0
 8001152:	05db      	lsls	r3, r3, #23
 8001154:	0011      	movs	r1, r2
 8001156:	0018      	movs	r0, r3
 8001158:	f001 ff8e 	bl	8003078 <HAL_GPIO_Init>

  /*Configure GPIO pins : ADD5_Pin ADD6_Pin */
  GPIO_InitStruct.Pin = ADD5_Pin|ADD6_Pin;
 800115c:	193b      	adds	r3, r7, r4
 800115e:	22c0      	movs	r2, #192	@ 0xc0
 8001160:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001162:	193b      	adds	r3, r7, r4
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001168:	193b      	adds	r3, r7, r4
 800116a:	2202      	movs	r2, #2
 800116c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800116e:	193b      	adds	r3, r7, r4
 8001170:	4a07      	ldr	r2, [pc, #28]	@ (8001190 <MX_GPIO_Init+0x13c>)
 8001172:	0019      	movs	r1, r3
 8001174:	0010      	movs	r0, r2
 8001176:	f001 ff7f 	bl	8003078 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800117a:	46c0      	nop			@ (mov r8, r8)
 800117c:	46bd      	mov	sp, r7
 800117e:	b009      	add	sp, #36	@ 0x24
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	40021000 	.word	0x40021000
 8001188:	0000040f 	.word	0x0000040f
 800118c:	50000400 	.word	0x50000400
 8001190:	50000800 	.word	0x50000800

08001194 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
    if (huart == &huart1)
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4b14      	ldr	r3, [pc, #80]	@ (80011f0 <HAL_UART_RxCpltCallback+0x5c>)
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d120      	bne.n	80011e6 <HAL_UART_RxCpltCallback+0x52>
    {
    	rxBuffer[rxIndex] = rxRcvd;
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <HAL_UART_RxCpltCallback+0x60>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	001a      	movs	r2, r3
 80011aa:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <HAL_UART_RxCpltCallback+0x64>)
 80011ac:	7819      	ldrb	r1, [r3, #0]
 80011ae:	4b13      	ldr	r3, [pc, #76]	@ (80011fc <HAL_UART_RxCpltCallback+0x68>)
 80011b0:	5499      	strb	r1, [r3, r2]

        // il carattere dovrebbe essere già stato letto da HAL in rxBuffer[rxIndex]
    	if (rxBuffer[0] == '{') {
 80011b2:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_UART_RxCpltCallback+0x68>)
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b7b      	cmp	r3, #123	@ 0x7b
 80011b8:	d10c      	bne.n	80011d4 <HAL_UART_RxCpltCallback+0x40>

    		/* è partito un JSON */
    		rxIndex ++;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <HAL_UART_RxCpltCallback+0x60>)
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	3301      	adds	r3, #1
 80011c0:	b2da      	uxtb	r2, r3
 80011c2:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <HAL_UART_RxCpltCallback+0x60>)
 80011c4:	701a      	strb	r2, [r3, #0]
    		if (rxIndex < RX_BUFFER_SIZE) {
    			/* termino sempre la stringa  per sicurezza */
    			rxBuffer[rxIndex] = '\0';
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <HAL_UART_RxCpltCallback+0x60>)
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	001a      	movs	r2, r3
 80011cc:	4b0b      	ldr	r3, [pc, #44]	@ (80011fc <HAL_UART_RxCpltCallback+0x68>)
 80011ce:	2100      	movs	r1, #0
 80011d0:	5499      	strb	r1, [r3, r2]
 80011d2:	e002      	b.n	80011da <HAL_UART_RxCpltCallback+0x46>
    			memset(rxBuffer, 0, RX_BUFFER_SIZE);
    			rxIndex = 0;
    		}
    	}
    	else {
    	    rxIndex = 0;
 80011d4:	4b07      	ldr	r3, [pc, #28]	@ (80011f4 <HAL_UART_RxCpltCallback+0x60>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
    	}

        // riattivo la ricezione
    	HAL_UART_Receive_IT(&huart1, &rxRcvd, 1);
 80011da:	4907      	ldr	r1, [pc, #28]	@ (80011f8 <HAL_UART_RxCpltCallback+0x64>)
 80011dc:	4b04      	ldr	r3, [pc, #16]	@ (80011f0 <HAL_UART_RxCpltCallback+0x5c>)
 80011de:	2201      	movs	r2, #1
 80011e0:	0018      	movs	r0, r3
 80011e2:	f002 fe2f 	bl	8003e44 <HAL_UART_Receive_IT>
    }
}
 80011e6:	46c0      	nop			@ (mov r8, r8)
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	46c0      	nop			@ (mov r8, r8)
 80011f0:	20000138 	.word	0x20000138
 80011f4:	20000460 	.word	0x20000460
 80011f8:	20000461 	.word	0x20000461
 80011fc:	20000464 	.word	0x20000464

08001200 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
}
 8001206:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  sprintf((char *)txBuffer, "Error! %s %d\n\r", __FILE__,__LINE__);
 8001208:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <Error_Handler+0x30>)
 800120a:	4a0a      	ldr	r2, [pc, #40]	@ (8001234 <Error_Handler+0x34>)
 800120c:	490a      	ldr	r1, [pc, #40]	@ (8001238 <Error_Handler+0x38>)
 800120e:	480b      	ldr	r0, [pc, #44]	@ (800123c <Error_Handler+0x3c>)
 8001210:	f004 fcee 	bl	8005bf0 <siprintf>
  HAL_UART_Transmit(&huart2,  txBuffer, strlen((char *)txBuffer), 100);
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <Error_Handler+0x3c>)
 8001216:	0018      	movs	r0, r3
 8001218:	f7fe ff76 	bl	8000108 <strlen>
 800121c:	0003      	movs	r3, r0
 800121e:	b29a      	uxth	r2, r3
 8001220:	4906      	ldr	r1, [pc, #24]	@ (800123c <Error_Handler+0x3c>)
 8001222:	4807      	ldr	r0, [pc, #28]	@ (8001240 <Error_Handler+0x40>)
 8001224:	2364      	movs	r3, #100	@ 0x64
 8001226:	f002 fd69 	bl	8003cfc <HAL_UART_Transmit>


  while (1)
 800122a:	46c0      	nop			@ (mov r8, r8)
 800122c:	e7fd      	b.n	800122a <Error_Handler+0x2a>
 800122e:	46c0      	nop			@ (mov r8, r8)
 8001230:	00000335 	.word	0x00000335
 8001234:	08006628 	.word	0x08006628
 8001238:	0800663c 	.word	0x0800663c
 800123c:	20000260 	.word	0x20000260
 8001240:	200001cc 	.word	0x200001cc

08001244 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800124a:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_MspInit+0x44>)
 800124c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800124e:	4b0e      	ldr	r3, [pc, #56]	@ (8001288 <HAL_MspInit+0x44>)
 8001250:	2101      	movs	r1, #1
 8001252:	430a      	orrs	r2, r1
 8001254:	641a      	str	r2, [r3, #64]	@ 0x40
 8001256:	4b0c      	ldr	r3, [pc, #48]	@ (8001288 <HAL_MspInit+0x44>)
 8001258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800125a:	2201      	movs	r2, #1
 800125c:	4013      	ands	r3, r2
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001262:	4b09      	ldr	r3, [pc, #36]	@ (8001288 <HAL_MspInit+0x44>)
 8001264:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001266:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <HAL_MspInit+0x44>)
 8001268:	2180      	movs	r1, #128	@ 0x80
 800126a:	0549      	lsls	r1, r1, #21
 800126c:	430a      	orrs	r2, r1
 800126e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <HAL_MspInit+0x44>)
 8001272:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001274:	2380      	movs	r3, #128	@ 0x80
 8001276:	055b      	lsls	r3, r3, #21
 8001278:	4013      	ands	r3, r2
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800127e:	46c0      	nop			@ (mov r8, r8)
 8001280:	46bd      	mov	sp, r7
 8001282:	b002      	add	sp, #8
 8001284:	bd80      	pop	{r7, pc}
 8001286:	46c0      	nop			@ (mov r8, r8)
 8001288:	40021000 	.word	0x40021000

0800128c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800128c:	b590      	push	{r4, r7, lr}
 800128e:	b091      	sub	sp, #68	@ 0x44
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	232c      	movs	r3, #44	@ 0x2c
 8001296:	18fb      	adds	r3, r7, r3
 8001298:	0018      	movs	r0, r3
 800129a:	2314      	movs	r3, #20
 800129c:	001a      	movs	r2, r3
 800129e:	2100      	movs	r1, #0
 80012a0:	f004 fcc6 	bl	8005c30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012a4:	2410      	movs	r4, #16
 80012a6:	193b      	adds	r3, r7, r4
 80012a8:	0018      	movs	r0, r3
 80012aa:	231c      	movs	r3, #28
 80012ac:	001a      	movs	r2, r3
 80012ae:	2100      	movs	r1, #0
 80012b0:	f004 fcbe 	bl	8005c30 <memset>
  if(hadc->Instance==ADC1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a36      	ldr	r2, [pc, #216]	@ (8001394 <HAL_ADC_MspInit+0x108>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d165      	bne.n	800138a <HAL_ADC_MspInit+0xfe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80012be:	193b      	adds	r3, r7, r4
 80012c0:	2280      	movs	r2, #128	@ 0x80
 80012c2:	01d2      	lsls	r2, r2, #7
 80012c4:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_HSIKER;
 80012c6:	193b      	adds	r3, r7, r4
 80012c8:	2280      	movs	r2, #128	@ 0x80
 80012ca:	0612      	lsls	r2, r2, #24
 80012cc:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012ce:	193b      	adds	r3, r7, r4
 80012d0:	0018      	movs	r0, r3
 80012d2:	f002 fbcf 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 80012d6:	1e03      	subs	r3, r0, #0
 80012d8:	d001      	beq.n	80012de <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80012da:	f7ff ff91 	bl	8001200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80012de:	4b2e      	ldr	r3, [pc, #184]	@ (8001398 <HAL_ADC_MspInit+0x10c>)
 80012e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012e2:	4b2d      	ldr	r3, [pc, #180]	@ (8001398 <HAL_ADC_MspInit+0x10c>)
 80012e4:	2180      	movs	r1, #128	@ 0x80
 80012e6:	0349      	lsls	r1, r1, #13
 80012e8:	430a      	orrs	r2, r1
 80012ea:	641a      	str	r2, [r3, #64]	@ 0x40
 80012ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001398 <HAL_ADC_MspInit+0x10c>)
 80012ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80012f0:	2380      	movs	r3, #128	@ 0x80
 80012f2:	035b      	lsls	r3, r3, #13
 80012f4:	4013      	ands	r3, r2
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fa:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <HAL_ADC_MspInit+0x10c>)
 80012fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80012fe:	4b26      	ldr	r3, [pc, #152]	@ (8001398 <HAL_ADC_MspInit+0x10c>)
 8001300:	2101      	movs	r1, #1
 8001302:	430a      	orrs	r2, r1
 8001304:	635a      	str	r2, [r3, #52]	@ 0x34
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <HAL_ADC_MspInit+0x10c>)
 8001308:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800130a:	2201      	movs	r2, #1
 800130c:	4013      	ands	r3, r2
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = AN0_DEG_Pin;
 8001312:	212c      	movs	r1, #44	@ 0x2c
 8001314:	187b      	adds	r3, r7, r1
 8001316:	2201      	movs	r2, #1
 8001318:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800131a:	187b      	adds	r3, r7, r1
 800131c:	2203      	movs	r2, #3
 800131e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	187b      	adds	r3, r7, r1
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(AN0_DEG_GPIO_Port, &GPIO_InitStruct);
 8001326:	187a      	adds	r2, r7, r1
 8001328:	23a0      	movs	r3, #160	@ 0xa0
 800132a:	05db      	lsls	r3, r3, #23
 800132c:	0011      	movs	r1, r2
 800132e:	0018      	movs	r0, r3
 8001330:	f001 fea2 	bl	8003078 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001334:	4b19      	ldr	r3, [pc, #100]	@ (800139c <HAL_ADC_MspInit+0x110>)
 8001336:	4a1a      	ldr	r2, [pc, #104]	@ (80013a0 <HAL_ADC_MspInit+0x114>)
 8001338:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800133a:	4b18      	ldr	r3, [pc, #96]	@ (800139c <HAL_ADC_MspInit+0x110>)
 800133c:	2205      	movs	r2, #5
 800133e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001340:	4b16      	ldr	r3, [pc, #88]	@ (800139c <HAL_ADC_MspInit+0x110>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	@ (800139c <HAL_ADC_MspInit+0x110>)
 8001348:	2200      	movs	r2, #0
 800134a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800134c:	4b13      	ldr	r3, [pc, #76]	@ (800139c <HAL_ADC_MspInit+0x110>)
 800134e:	2280      	movs	r2, #128	@ 0x80
 8001350:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001352:	4b12      	ldr	r3, [pc, #72]	@ (800139c <HAL_ADC_MspInit+0x110>)
 8001354:	2280      	movs	r2, #128	@ 0x80
 8001356:	0052      	lsls	r2, r2, #1
 8001358:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800135a:	4b10      	ldr	r3, [pc, #64]	@ (800139c <HAL_ADC_MspInit+0x110>)
 800135c:	2280      	movs	r2, #128	@ 0x80
 800135e:	00d2      	lsls	r2, r2, #3
 8001360:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <HAL_ADC_MspInit+0x110>)
 8001364:	2200      	movs	r2, #0
 8001366:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001368:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <HAL_ADC_MspInit+0x110>)
 800136a:	2200      	movs	r2, #0
 800136c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800136e:	4b0b      	ldr	r3, [pc, #44]	@ (800139c <HAL_ADC_MspInit+0x110>)
 8001370:	0018      	movs	r0, r3
 8001372:	f001 fb51 	bl	8002a18 <HAL_DMA_Init>
 8001376:	1e03      	subs	r3, r0, #0
 8001378:	d001      	beq.n	800137e <HAL_ADC_MspInit+0xf2>
    {
      Error_Handler();
 800137a:	f7ff ff41 	bl	8001200 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a06      	ldr	r2, [pc, #24]	@ (800139c <HAL_ADC_MspInit+0x110>)
 8001382:	651a      	str	r2, [r3, #80]	@ 0x50
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <HAL_ADC_MspInit+0x110>)
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	629a      	str	r2, [r3, #40]	@ 0x28
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800138a:	46c0      	nop			@ (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b011      	add	sp, #68	@ 0x44
 8001390:	bd90      	pop	{r4, r7, pc}
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	40012400 	.word	0x40012400
 8001398:	40021000 	.word	0x40021000
 800139c:	200000dc 	.word	0x200000dc
 80013a0:	40020008 	.word	0x40020008

080013a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a4:	b590      	push	{r4, r7, lr}
 80013a6:	b093      	sub	sp, #76	@ 0x4c
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ac:	2334      	movs	r3, #52	@ 0x34
 80013ae:	18fb      	adds	r3, r7, r3
 80013b0:	0018      	movs	r0, r3
 80013b2:	2314      	movs	r3, #20
 80013b4:	001a      	movs	r2, r3
 80013b6:	2100      	movs	r1, #0
 80013b8:	f004 fc3a 	bl	8005c30 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013bc:	2418      	movs	r4, #24
 80013be:	193b      	adds	r3, r7, r4
 80013c0:	0018      	movs	r0, r3
 80013c2:	231c      	movs	r3, #28
 80013c4:	001a      	movs	r2, r3
 80013c6:	2100      	movs	r1, #0
 80013c8:	f004 fc32 	bl	8005c30 <memset>
  if(huart->Instance==USART1)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a41      	ldr	r2, [pc, #260]	@ (80014d8 <HAL_UART_MspInit+0x134>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d146      	bne.n	8001464 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80013d6:	193b      	adds	r3, r7, r4
 80013d8:	2201      	movs	r2, #1
 80013da:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80013dc:	193b      	adds	r3, r7, r4
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013e2:	193b      	adds	r3, r7, r4
 80013e4:	0018      	movs	r0, r3
 80013e6:	f002 fb45 	bl	8003a74 <HAL_RCCEx_PeriphCLKConfig>
 80013ea:	1e03      	subs	r3, r0, #0
 80013ec:	d001      	beq.n	80013f2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ee:	f7ff ff07 	bl	8001200 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013f2:	4b3a      	ldr	r3, [pc, #232]	@ (80014dc <HAL_UART_MspInit+0x138>)
 80013f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013f6:	4b39      	ldr	r3, [pc, #228]	@ (80014dc <HAL_UART_MspInit+0x138>)
 80013f8:	2180      	movs	r1, #128	@ 0x80
 80013fa:	01c9      	lsls	r1, r1, #7
 80013fc:	430a      	orrs	r2, r1
 80013fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8001400:	4b36      	ldr	r3, [pc, #216]	@ (80014dc <HAL_UART_MspInit+0x138>)
 8001402:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001404:	2380      	movs	r3, #128	@ 0x80
 8001406:	01db      	lsls	r3, r3, #7
 8001408:	4013      	ands	r3, r2
 800140a:	617b      	str	r3, [r7, #20]
 800140c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800140e:	4b33      	ldr	r3, [pc, #204]	@ (80014dc <HAL_UART_MspInit+0x138>)
 8001410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001412:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <HAL_UART_MspInit+0x138>)
 8001414:	2102      	movs	r1, #2
 8001416:	430a      	orrs	r2, r1
 8001418:	635a      	str	r2, [r3, #52]	@ 0x34
 800141a:	4b30      	ldr	r3, [pc, #192]	@ (80014dc <HAL_UART_MspInit+0x138>)
 800141c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800141e:	2202      	movs	r2, #2
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
 8001424:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = U1_TX_485_Pin|U1_RX_485_Pin;
 8001426:	2134      	movs	r1, #52	@ 0x34
 8001428:	187b      	adds	r3, r7, r1
 800142a:	22c0      	movs	r2, #192	@ 0xc0
 800142c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800142e:	187b      	adds	r3, r7, r1
 8001430:	2202      	movs	r2, #2
 8001432:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	187b      	adds	r3, r7, r1
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	187b      	adds	r3, r7, r1
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001440:	187b      	adds	r3, r7, r1
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001446:	187b      	adds	r3, r7, r1
 8001448:	4a25      	ldr	r2, [pc, #148]	@ (80014e0 <HAL_UART_MspInit+0x13c>)
 800144a:	0019      	movs	r1, r3
 800144c:	0010      	movs	r0, r2
 800144e:	f001 fe13 	bl	8003078 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2100      	movs	r1, #0
 8001456:	201b      	movs	r0, #27
 8001458:	f001 faac 	bl	80029b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800145c:	201b      	movs	r0, #27
 800145e:	f001 fabe 	bl	80029de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001462:	e035      	b.n	80014d0 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a1e      	ldr	r2, [pc, #120]	@ (80014e4 <HAL_UART_MspInit+0x140>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d130      	bne.n	80014d0 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800146e:	4b1b      	ldr	r3, [pc, #108]	@ (80014dc <HAL_UART_MspInit+0x138>)
 8001470:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001472:	4b1a      	ldr	r3, [pc, #104]	@ (80014dc <HAL_UART_MspInit+0x138>)
 8001474:	2180      	movs	r1, #128	@ 0x80
 8001476:	0289      	lsls	r1, r1, #10
 8001478:	430a      	orrs	r2, r1
 800147a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800147c:	4b17      	ldr	r3, [pc, #92]	@ (80014dc <HAL_UART_MspInit+0x138>)
 800147e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001480:	2380      	movs	r3, #128	@ 0x80
 8001482:	029b      	lsls	r3, r3, #10
 8001484:	4013      	ands	r3, r2
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	4b14      	ldr	r3, [pc, #80]	@ (80014dc <HAL_UART_MspInit+0x138>)
 800148c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800148e:	4b13      	ldr	r3, [pc, #76]	@ (80014dc <HAL_UART_MspInit+0x138>)
 8001490:	2101      	movs	r1, #1
 8001492:	430a      	orrs	r2, r1
 8001494:	635a      	str	r2, [r3, #52]	@ 0x34
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_UART_MspInit+0x138>)
 8001498:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800149a:	2201      	movs	r2, #1
 800149c:	4013      	ands	r3, r2
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = U2_TX_Pin|U2_RX_Pin;
 80014a2:	2134      	movs	r1, #52	@ 0x34
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	220c      	movs	r2, #12
 80014a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	2202      	movs	r2, #2
 80014ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	2201      	movs	r2, #1
 80014c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	187a      	adds	r2, r7, r1
 80014c4:	23a0      	movs	r3, #160	@ 0xa0
 80014c6:	05db      	lsls	r3, r3, #23
 80014c8:	0011      	movs	r1, r2
 80014ca:	0018      	movs	r0, r3
 80014cc:	f001 fdd4 	bl	8003078 <HAL_GPIO_Init>
}
 80014d0:	46c0      	nop			@ (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b013      	add	sp, #76	@ 0x4c
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	40013800 	.word	0x40013800
 80014dc:	40021000 	.word	0x40021000
 80014e0:	50000400 	.word	0x50000400
 80014e4:	40004400 	.word	0x40004400

080014e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014ec:	46c0      	nop			@ (mov r8, r8)
 80014ee:	e7fd      	b.n	80014ec <NMI_Handler+0x4>

080014f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014f4:	46c0      	nop			@ (mov r8, r8)
 80014f6:	e7fd      	b.n	80014f4 <HardFault_Handler+0x4>

080014f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80014fc:	46c0      	nop			@ (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001506:	46c0      	nop			@ (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001510:	f000 f8ea 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  // raddoppio l'incremento perchè sembra che vada alla metà della velocità
  HAL_IncTick();
 8001514:	f000 f8e8 	bl	80016e8 <HAL_IncTick>

  /* USER CODE END SysTick_IRQn 1 */
}
 8001518:	46c0      	nop			@ (mov r8, r8)
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
	...

08001520 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001524:	4b03      	ldr	r3, [pc, #12]	@ (8001534 <DMA1_Channel1_IRQHandler+0x14>)
 8001526:	0018      	movs	r0, r3
 8001528:	f001 fc64 	bl	8002df4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800152c:	46c0      	nop			@ (mov r8, r8)
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	46c0      	nop			@ (mov r8, r8)
 8001534:	200000dc 	.word	0x200000dc

08001538 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 interrupt.
  */
void USART1_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800153c:	4b03      	ldr	r3, [pc, #12]	@ (800154c <USART1_IRQHandler+0x14>)
 800153e:	0018      	movs	r0, r3
 8001540:	f002 fcd8 	bl	8003ef4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001544:	46c0      	nop			@ (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	46c0      	nop			@ (mov r8, r8)
 800154c:	20000138 	.word	0x20000138

08001550 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b086      	sub	sp, #24
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001558:	4a14      	ldr	r2, [pc, #80]	@ (80015ac <_sbrk+0x5c>)
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <_sbrk+0x60>)
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001564:	4b13      	ldr	r3, [pc, #76]	@ (80015b4 <_sbrk+0x64>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d102      	bne.n	8001572 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800156c:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <_sbrk+0x64>)
 800156e:	4a12      	ldr	r2, [pc, #72]	@ (80015b8 <_sbrk+0x68>)
 8001570:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001572:	4b10      	ldr	r3, [pc, #64]	@ (80015b4 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	18d3      	adds	r3, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d207      	bcs.n	8001590 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001580:	f004 fb5e 	bl	8005c40 <__errno>
 8001584:	0003      	movs	r3, r0
 8001586:	220c      	movs	r2, #12
 8001588:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800158a:	2301      	movs	r3, #1
 800158c:	425b      	negs	r3, r3
 800158e:	e009      	b.n	80015a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001590:	4b08      	ldr	r3, [pc, #32]	@ (80015b4 <_sbrk+0x64>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001596:	4b07      	ldr	r3, [pc, #28]	@ (80015b4 <_sbrk+0x64>)
 8001598:	681a      	ldr	r2, [r3, #0]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	18d2      	adds	r2, r2, r3
 800159e:	4b05      	ldr	r3, [pc, #20]	@ (80015b4 <_sbrk+0x64>)
 80015a0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80015a2:	68fb      	ldr	r3, [r7, #12]
}
 80015a4:	0018      	movs	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	b006      	add	sp, #24
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20003000 	.word	0x20003000
 80015b0:	00000400 	.word	0x00000400
 80015b4:	2000056c 	.word	0x2000056c
 80015b8:	200006c0 	.word	0x200006c0

080015bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80015c0:	4b03      	ldr	r3, [pc, #12]	@ (80015d0 <SystemInit+0x14>)
 80015c2:	2280      	movs	r2, #128	@ 0x80
 80015c4:	0512      	lsls	r2, r2, #20
 80015c6:	609a      	str	r2, [r3, #8]
#endif
}
 80015c8:	46c0      	nop			@ (mov r8, r8)
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	46c0      	nop			@ (mov r8, r8)
 80015d0:	e000ed00 	.word	0xe000ed00

080015d4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015d4:	480d      	ldr	r0, [pc, #52]	@ (800160c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015d6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80015d8:	f7ff fff0 	bl	80015bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80015dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80015de:	e003      	b.n	80015e8 <LoopCopyDataInit>

080015e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80015e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80015e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80015e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80015e6:	3104      	adds	r1, #4

080015e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80015e8:	480a      	ldr	r0, [pc, #40]	@ (8001614 <LoopForever+0xa>)
  ldr r3, =_edata
 80015ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <LoopForever+0xe>)
  adds r2, r0, r1
 80015ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80015ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80015f0:	d3f6      	bcc.n	80015e0 <CopyDataInit>
  ldr r2, =_sbss
 80015f2:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <LoopForever+0x12>)
  b LoopFillZerobss
 80015f4:	e002      	b.n	80015fc <LoopFillZerobss>

080015f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  str  r3, [r2]
 80015f8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015fa:	3204      	adds	r2, #4

080015fc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80015fc:	4b08      	ldr	r3, [pc, #32]	@ (8001620 <LoopForever+0x16>)
  cmp r2, r3
 80015fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001600:	d3f9      	bcc.n	80015f6 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001602:	f004 fb23 	bl	8005c4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001606:	f7fe ffc9 	bl	800059c <main>

0800160a <LoopForever>:

LoopForever:
    b LoopForever
 800160a:	e7fe      	b.n	800160a <LoopForever>
  ldr   r0, =_estack
 800160c:	20003000 	.word	0x20003000
  ldr r3, =_sidata
 8001610:	08006710 	.word	0x08006710
  ldr r0, =_sdata
 8001614:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001618:	2000005c 	.word	0x2000005c
  ldr r2, =_sbss
 800161c:	2000005c 	.word	0x2000005c
  ldr r3, = _ebss
 8001620:	200006bc 	.word	0x200006bc

08001624 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001624:	e7fe      	b.n	8001624 <ADC1_IRQHandler>

08001626 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800162c:	1dfb      	adds	r3, r7, #7
 800162e:	2200      	movs	r2, #0
 8001630:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001632:	2003      	movs	r0, #3
 8001634:	f000 f80e 	bl	8001654 <HAL_InitTick>
 8001638:	1e03      	subs	r3, r0, #0
 800163a:	d003      	beq.n	8001644 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 800163c:	1dfb      	adds	r3, r7, #7
 800163e:	2201      	movs	r2, #1
 8001640:	701a      	strb	r2, [r3, #0]
 8001642:	e001      	b.n	8001648 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001644:	f7ff fdfe 	bl	8001244 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001648:	1dfb      	adds	r3, r7, #7
 800164a:	781b      	ldrb	r3, [r3, #0]
}
 800164c:	0018      	movs	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	b002      	add	sp, #8
 8001652:	bd80      	pop	{r7, pc}

08001654 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001654:	b590      	push	{r4, r7, lr}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800165c:	230f      	movs	r3, #15
 800165e:	18fb      	adds	r3, r7, r3
 8001660:	2200      	movs	r2, #0
 8001662:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8001664:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <HAL_InitTick+0x88>)
 8001666:	781b      	ldrb	r3, [r3, #0]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d02b      	beq.n	80016c4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 800166c:	4b1c      	ldr	r3, [pc, #112]	@ (80016e0 <HAL_InitTick+0x8c>)
 800166e:	681c      	ldr	r4, [r3, #0]
 8001670:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <HAL_InitTick+0x88>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	0019      	movs	r1, r3
 8001676:	23fa      	movs	r3, #250	@ 0xfa
 8001678:	0098      	lsls	r0, r3, #2
 800167a:	f7fe fd57 	bl	800012c <__udivsi3>
 800167e:	0003      	movs	r3, r0
 8001680:	0019      	movs	r1, r3
 8001682:	0020      	movs	r0, r4
 8001684:	f7fe fd52 	bl	800012c <__udivsi3>
 8001688:	0003      	movs	r3, r0
 800168a:	0018      	movs	r0, r3
 800168c:	f001 f9b7 	bl	80029fe <HAL_SYSTICK_Config>
 8001690:	1e03      	subs	r3, r0, #0
 8001692:	d112      	bne.n	80016ba <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d80a      	bhi.n	80016b0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	2301      	movs	r3, #1
 800169e:	425b      	negs	r3, r3
 80016a0:	2200      	movs	r2, #0
 80016a2:	0018      	movs	r0, r3
 80016a4:	f001 f986 	bl	80029b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016a8:	4b0e      	ldr	r3, [pc, #56]	@ (80016e4 <HAL_InitTick+0x90>)
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	e00d      	b.n	80016cc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80016b0:	230f      	movs	r3, #15
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2201      	movs	r2, #1
 80016b6:	701a      	strb	r2, [r3, #0]
 80016b8:	e008      	b.n	80016cc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016ba:	230f      	movs	r3, #15
 80016bc:	18fb      	adds	r3, r7, r3
 80016be:	2201      	movs	r2, #1
 80016c0:	701a      	strb	r2, [r3, #0]
 80016c2:	e003      	b.n	80016cc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016c4:	230f      	movs	r3, #15
 80016c6:	18fb      	adds	r3, r7, r3
 80016c8:	2201      	movs	r2, #1
 80016ca:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80016cc:	230f      	movs	r3, #15
 80016ce:	18fb      	adds	r3, r7, r3
 80016d0:	781b      	ldrb	r3, [r3, #0]
}
 80016d2:	0018      	movs	r0, r3
 80016d4:	46bd      	mov	sp, r7
 80016d6:	b005      	add	sp, #20
 80016d8:	bd90      	pop	{r4, r7, pc}
 80016da:	46c0      	nop			@ (mov r8, r8)
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000004 	.word	0x20000004

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016ec:	4b05      	ldr	r3, [pc, #20]	@ (8001704 <HAL_IncTick+0x1c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	001a      	movs	r2, r3
 80016f2:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_IncTick+0x20>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	18d2      	adds	r2, r2, r3
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <HAL_IncTick+0x20>)
 80016fa:	601a      	str	r2, [r3, #0]
}
 80016fc:	46c0      	nop			@ (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			@ (mov r8, r8)
 8001704:	20000008 	.word	0x20000008
 8001708:	20000570 	.word	0x20000570

0800170c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b02      	ldr	r3, [pc, #8]	@ (800171c <HAL_GetTick+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	0018      	movs	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			@ (mov r8, r8)
 800171c:	20000570 	.word	0x20000570

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff fff0 	bl	800170c <HAL_GetTick>
 800172c:	0003      	movs	r3, r0
 800172e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	3301      	adds	r3, #1
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	@ (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	001a      	movs	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	189b      	adds	r3, r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001746:	46c0      	nop			@ (mov r8, r8)
 8001748:	f7ff ffe0 	bl	800170c <HAL_GetTick>
 800174c:	0002      	movs	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	46c0      	nop			@ (mov r8, r8)
 800175a:	46c0      	nop			@ (mov r8, r8)
 800175c:	46bd      	mov	sp, r7
 800175e:	b004      	add	sp, #16
 8001760:	bd80      	pop	{r7, pc}
 8001762:	46c0      	nop			@ (mov r8, r8)
 8001764:	20000008 	.word	0x20000008

08001768 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
 8001770:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	4a05      	ldr	r2, [pc, #20]	@ (800178c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001778:	401a      	ands	r2, r3
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	431a      	orrs	r2, r3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	601a      	str	r2, [r3, #0]
}
 8001782:	46c0      	nop			@ (mov r8, r8)
 8001784:	46bd      	mov	sp, r7
 8001786:	b002      	add	sp, #8
 8001788:	bd80      	pop	{r7, pc}
 800178a:	46c0      	nop			@ (mov r8, r8)
 800178c:	ff3fffff 	.word	0xff3fffff

08001790 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	23c0      	movs	r3, #192	@ 0xc0
 800179e:	041b      	lsls	r3, r3, #16
 80017a0:	4013      	ands	r3, r2
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b002      	add	sp, #8
 80017a8:	bd80      	pop	{r7, pc}

080017aa <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b084      	sub	sp, #16
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	60f8      	str	r0, [r7, #12]
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	695b      	ldr	r3, [r3, #20]
 80017ba:	68ba      	ldr	r2, [r7, #8]
 80017bc:	2104      	movs	r1, #4
 80017be:	400a      	ands	r2, r1
 80017c0:	2107      	movs	r1, #7
 80017c2:	4091      	lsls	r1, r2
 80017c4:	000a      	movs	r2, r1
 80017c6:	43d2      	mvns	r2, r2
 80017c8:	401a      	ands	r2, r3
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	2104      	movs	r1, #4
 80017ce:	400b      	ands	r3, r1
 80017d0:	6879      	ldr	r1, [r7, #4]
 80017d2:	4099      	lsls	r1, r3
 80017d4:	000b      	movs	r3, r1
 80017d6:	431a      	orrs	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80017dc:	46c0      	nop			@ (mov r8, r8)
 80017de:	46bd      	mov	sp, r7
 80017e0:	b004      	add	sp, #16
 80017e2:	bd80      	pop	{r7, pc}

080017e4 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b082      	sub	sp, #8
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
 80017ec:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	695b      	ldr	r3, [r3, #20]
 80017f2:	683a      	ldr	r2, [r7, #0]
 80017f4:	2104      	movs	r1, #4
 80017f6:	400a      	ands	r2, r1
 80017f8:	2107      	movs	r1, #7
 80017fa:	4091      	lsls	r1, r2
 80017fc:	000a      	movs	r2, r1
 80017fe:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	2104      	movs	r1, #4
 8001804:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001806:	40da      	lsrs	r2, r3
 8001808:	0013      	movs	r3, r2
}
 800180a:	0018      	movs	r0, r3
 800180c:	46bd      	mov	sp, r7
 800180e:	b002      	add	sp, #8
 8001810:	bd80      	pop	{r7, pc}

08001812 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	b082      	sub	sp, #8
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	68da      	ldr	r2, [r3, #12]
 800181e:	23c0      	movs	r3, #192	@ 0xc0
 8001820:	011b      	lsls	r3, r3, #4
 8001822:	4013      	ands	r3, r2
 8001824:	d101      	bne.n	800182a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001826:	2301      	movs	r3, #1
 8001828:	e000      	b.n	800182c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800182a:	2300      	movs	r3, #0
}
 800182c:	0018      	movs	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	b002      	add	sp, #8
 8001832:	bd80      	pop	{r7, pc}

08001834 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	211f      	movs	r1, #31
 8001848:	400a      	ands	r2, r1
 800184a:	210f      	movs	r1, #15
 800184c:	4091      	lsls	r1, r2
 800184e:	000a      	movs	r2, r1
 8001850:	43d2      	mvns	r2, r2
 8001852:	401a      	ands	r2, r3
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	0e9b      	lsrs	r3, r3, #26
 8001858:	210f      	movs	r1, #15
 800185a:	4019      	ands	r1, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	201f      	movs	r0, #31
 8001860:	4003      	ands	r3, r0
 8001862:	4099      	lsls	r1, r3
 8001864:	000b      	movs	r3, r1
 8001866:	431a      	orrs	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800186c:	46c0      	nop			@ (mov r8, r8)
 800186e:	46bd      	mov	sp, r7
 8001870:	b004      	add	sp, #16
 8001872:	bd80      	pop	{r7, pc}

08001874 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
 800187c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	025b      	lsls	r3, r3, #9
 8001886:	0a5b      	lsrs	r3, r3, #9
 8001888:	431a      	orrs	r2, r3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800188e:	46c0      	nop			@ (mov r8, r8)
 8001890:	46bd      	mov	sp, r7
 8001892:	b002      	add	sp, #8
 8001894:	bd80      	pop	{r7, pc}

08001896 <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
 800189e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	0252      	lsls	r2, r2, #9
 80018a8:	0a52      	lsrs	r2, r2, #9
 80018aa:	43d2      	mvns	r2, r2
 80018ac:	401a      	ands	r2, r3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80018b2:	46c0      	nop			@ (mov r8, r8)
 80018b4:	46bd      	mov	sp, r7
 80018b6:	b002      	add	sp, #8
 80018b8:	bd80      	pop	{r7, pc}
	...

080018bc <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	695b      	ldr	r3, [r3, #20]
 80018cc:	68ba      	ldr	r2, [r7, #8]
 80018ce:	0212      	lsls	r2, r2, #8
 80018d0:	43d2      	mvns	r2, r2
 80018d2:	401a      	ands	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	6879      	ldr	r1, [r7, #4]
 80018da:	400b      	ands	r3, r1
 80018dc:	4904      	ldr	r1, [pc, #16]	@ (80018f0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80018de:	400b      	ands	r3, r1
 80018e0:	431a      	orrs	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80018e6:	46c0      	nop			@ (mov r8, r8)
 80018e8:	46bd      	mov	sp, r7
 80018ea:	b004      	add	sp, #16
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	46c0      	nop			@ (mov r8, r8)
 80018f0:	7fffff00 	.word	0x7fffff00

080018f4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	4a05      	ldr	r2, [pc, #20]	@ (8001918 <LL_ADC_EnableInternalRegulator+0x24>)
 8001902:	4013      	ands	r3, r2
 8001904:	2280      	movs	r2, #128	@ 0x80
 8001906:	0552      	lsls	r2, r2, #21
 8001908:	431a      	orrs	r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800190e:	46c0      	nop			@ (mov r8, r8)
 8001910:	46bd      	mov	sp, r7
 8001912:	b002      	add	sp, #8
 8001914:	bd80      	pop	{r7, pc}
 8001916:	46c0      	nop			@ (mov r8, r8)
 8001918:	6fffffe8 	.word	0x6fffffe8

0800191c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689a      	ldr	r2, [r3, #8]
 8001928:	2380      	movs	r3, #128	@ 0x80
 800192a:	055b      	lsls	r3, r3, #21
 800192c:	401a      	ands	r2, r3
 800192e:	2380      	movs	r3, #128	@ 0x80
 8001930:	055b      	lsls	r3, r3, #21
 8001932:	429a      	cmp	r2, r3
 8001934:	d101      	bne.n	800193a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b002      	add	sp, #8
 8001942:	bd80      	pop	{r7, pc}

08001944 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	4a04      	ldr	r2, [pc, #16]	@ (8001964 <LL_ADC_Enable+0x20>)
 8001952:	4013      	ands	r3, r2
 8001954:	2201      	movs	r2, #1
 8001956:	431a      	orrs	r2, r3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800195c:	46c0      	nop			@ (mov r8, r8)
 800195e:	46bd      	mov	sp, r7
 8001960:	b002      	add	sp, #8
 8001962:	bd80      	pop	{r7, pc}
 8001964:	7fffffe8 	.word	0x7fffffe8

08001968 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	4a04      	ldr	r2, [pc, #16]	@ (8001988 <LL_ADC_Disable+0x20>)
 8001976:	4013      	ands	r3, r2
 8001978:	2202      	movs	r2, #2
 800197a:	431a      	orrs	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001980:	46c0      	nop			@ (mov r8, r8)
 8001982:	46bd      	mov	sp, r7
 8001984:	b002      	add	sp, #8
 8001986:	bd80      	pop	{r7, pc}
 8001988:	7fffffe8 	.word	0x7fffffe8

0800198c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2201      	movs	r2, #1
 800199a:	4013      	ands	r3, r2
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <LL_ADC_IsEnabled+0x18>
 80019a0:	2301      	movs	r3, #1
 80019a2:	e000      	b.n	80019a6 <LL_ADC_IsEnabled+0x1a>
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	0018      	movs	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	b002      	add	sp, #8
 80019ac:	bd80      	pop	{r7, pc}

080019ae <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	2202      	movs	r2, #2
 80019bc:	4013      	ands	r3, r2
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d101      	bne.n	80019c6 <LL_ADC_IsDisableOngoing+0x18>
 80019c2:	2301      	movs	r3, #1
 80019c4:	e000      	b.n	80019c8 <LL_ADC_IsDisableOngoing+0x1a>
 80019c6:	2300      	movs	r3, #0
}
 80019c8:	0018      	movs	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	b002      	add	sp, #8
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	4a04      	ldr	r2, [pc, #16]	@ (80019f0 <LL_ADC_REG_StartConversion+0x20>)
 80019de:	4013      	ands	r3, r2
 80019e0:	2204      	movs	r2, #4
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80019e8:	46c0      	nop			@ (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b002      	add	sp, #8
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	7fffffe8 	.word	0x7fffffe8

080019f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b082      	sub	sp, #8
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	2204      	movs	r2, #4
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d101      	bne.n	8001a0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	0018      	movs	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	b002      	add	sp, #8
 8001a14:	bd80      	pop	{r7, pc}
	...

08001a18 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a20:	231f      	movs	r3, #31
 8001a22:	18fb      	adds	r3, r7, r3
 8001a24:	2200      	movs	r2, #0
 8001a26:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001a30:	2300      	movs	r3, #0
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e17e      	b.n	8001d3c <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10a      	bne.n	8001a5c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	0018      	movs	r0, r3
 8001a4a:	f7ff fc1f 	bl	800128c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2254      	movs	r2, #84	@ 0x54
 8001a58:	2100      	movs	r1, #0
 8001a5a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7ff ff5b 	bl	800191c <LL_ADC_IsInternalRegulatorEnabled>
 8001a66:	1e03      	subs	r3, r0, #0
 8001a68:	d114      	bne.n	8001a94 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	0018      	movs	r0, r3
 8001a70:	f7ff ff40 	bl	80018f4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001a74:	4bb3      	ldr	r3, [pc, #716]	@ (8001d44 <HAL_ADC_Init+0x32c>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	49b3      	ldr	r1, [pc, #716]	@ (8001d48 <HAL_ADC_Init+0x330>)
 8001a7a:	0018      	movs	r0, r3
 8001a7c:	f7fe fb56 	bl	800012c <__udivsi3>
 8001a80:	0003      	movs	r3, r0
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a86:	e002      	b.n	8001a8e <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d1f9      	bne.n	8001a88 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	0018      	movs	r0, r3
 8001a9a:	f7ff ff3f 	bl	800191c <LL_ADC_IsInternalRegulatorEnabled>
 8001a9e:	1e03      	subs	r3, r0, #0
 8001aa0:	d10f      	bne.n	8001ac2 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa6:	2210      	movs	r2, #16
 8001aa8:	431a      	orrs	r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8001aba:	231f      	movs	r3, #31
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	2201      	movs	r2, #1
 8001ac0:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	0018      	movs	r0, r3
 8001ac8:	f7ff ff94 	bl	80019f4 <LL_ADC_REG_IsConversionOngoing>
 8001acc:	0003      	movs	r3, r0
 8001ace:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad4:	2210      	movs	r2, #16
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	d000      	beq.n	8001adc <HAL_ADC_Init+0xc4>
 8001ada:	e122      	b.n	8001d22 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d000      	beq.n	8001ae4 <HAL_ADC_Init+0xcc>
 8001ae2:	e11e      	b.n	8001d22 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae8:	4a98      	ldr	r2, [pc, #608]	@ (8001d4c <HAL_ADC_Init+0x334>)
 8001aea:	4013      	ands	r3, r2
 8001aec:	2202      	movs	r2, #2
 8001aee:	431a      	orrs	r2, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	0018      	movs	r0, r3
 8001afa:	f7ff ff47 	bl	800198c <LL_ADC_IsEnabled>
 8001afe:	1e03      	subs	r3, r0, #0
 8001b00:	d000      	beq.n	8001b04 <HAL_ADC_Init+0xec>
 8001b02:	e0ad      	b.n	8001c60 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	7e1b      	ldrb	r3, [r3, #24]
 8001b0c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001b0e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	7e5b      	ldrb	r3, [r3, #25]
 8001b14:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001b16:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	7e9b      	ldrb	r3, [r3, #26]
 8001b1c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001b1e:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d002      	beq.n	8001b2e <HAL_ADC_Init+0x116>
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	015b      	lsls	r3, r3, #5
 8001b2c:	e000      	b.n	8001b30 <HAL_ADC_Init+0x118>
 8001b2e:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001b30:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001b36:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	691b      	ldr	r3, [r3, #16]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	da04      	bge.n	8001b4a <HAL_ADC_Init+0x132>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	e001      	b.n	8001b4e <HAL_ADC_Init+0x136>
 8001b4a:	2380      	movs	r3, #128	@ 0x80
 8001b4c:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001b4e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	212c      	movs	r1, #44	@ 0x2c
 8001b54:	5c5b      	ldrb	r3, [r3, r1]
 8001b56:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001b58:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2220      	movs	r2, #32
 8001b64:	5c9b      	ldrb	r3, [r3, r2]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d115      	bne.n	8001b96 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	7e9b      	ldrb	r3, [r3, #26]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d105      	bne.n	8001b7e <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2280      	movs	r2, #128	@ 0x80
 8001b76:	0252      	lsls	r2, r2, #9
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
 8001b7c:	e00b      	b.n	8001b96 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b82:	2220      	movs	r2, #32
 8001b84:	431a      	orrs	r2, r3
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b8e:	2201      	movs	r2, #1
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d00a      	beq.n	8001bb4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ba2:	23e0      	movs	r3, #224	@ 0xe0
 8001ba4:	005b      	lsls	r3, r3, #1
 8001ba6:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001bac:	4313      	orrs	r3, r2
 8001bae:	69ba      	ldr	r2, [r7, #24]
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	4a65      	ldr	r2, [pc, #404]	@ (8001d50 <HAL_ADC_Init+0x338>)
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	0019      	movs	r1, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	0f9b      	lsrs	r3, r3, #30
 8001bd0:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	223c      	movs	r2, #60	@ 0x3c
 8001be2:	5c9b      	ldrb	r3, [r3, r2]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d111      	bne.n	8001c0c <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	0f9b      	lsrs	r3, r3, #30
 8001bee:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001bf4:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8001bfa:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001c00:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	2201      	movs	r2, #1
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	4a50      	ldr	r2, [pc, #320]	@ (8001d54 <HAL_ADC_Init+0x33c>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685a      	ldr	r2, [r3, #4]
 8001c26:	23c0      	movs	r3, #192	@ 0xc0
 8001c28:	061b      	lsls	r3, r3, #24
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d018      	beq.n	8001c60 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001c32:	2380      	movs	r3, #128	@ 0x80
 8001c34:	05db      	lsls	r3, r3, #23
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d012      	beq.n	8001c60 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001c3e:	2380      	movs	r3, #128	@ 0x80
 8001c40:	061b      	lsls	r3, r3, #24
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d00c      	beq.n	8001c60 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001c46:	4b44      	ldr	r3, [pc, #272]	@ (8001d58 <HAL_ADC_Init+0x340>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a44      	ldr	r2, [pc, #272]	@ (8001d5c <HAL_ADC_Init+0x344>)
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	23f0      	movs	r3, #240	@ 0xf0
 8001c56:	039b      	lsls	r3, r3, #14
 8001c58:	401a      	ands	r2, r3
 8001c5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d58 <HAL_ADC_Init+0x340>)
 8001c5c:	430a      	orrs	r2, r1
 8001c5e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6818      	ldr	r0, [r3, #0]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c68:	001a      	movs	r2, r3
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	f7ff fd9d 	bl	80017aa <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c78:	4939      	ldr	r1, [pc, #228]	@ (8001d60 <HAL_ADC_Init+0x348>)
 8001c7a:	001a      	movs	r2, r3
 8001c7c:	f7ff fd95 	bl	80017aa <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d109      	bne.n	8001c9c <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2110      	movs	r1, #16
 8001c94:	4249      	negs	r1, r1
 8001c96:	430a      	orrs	r2, r1
 8001c98:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c9a:	e018      	b.n	8001cce <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	691a      	ldr	r2, [r3, #16]
 8001ca0:	2380      	movs	r3, #128	@ 0x80
 8001ca2:	039b      	lsls	r3, r3, #14
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d112      	bne.n	8001cce <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	69db      	ldr	r3, [r3, #28]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	221c      	movs	r2, #28
 8001cb8:	4013      	ands	r3, r2
 8001cba:	2210      	movs	r2, #16
 8001cbc:	4252      	negs	r2, r2
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	0011      	movs	r1, r2
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	430a      	orrs	r2, r1
 8001ccc:	629a      	str	r2, [r3, #40]	@ 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	f7ff fd85 	bl	80017e4 <LL_ADC_GetSamplingTimeCommonChannels>
 8001cda:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d10b      	bne.n	8001cfc <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cee:	2203      	movs	r2, #3
 8001cf0:	4393      	bics	r3, r2
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	431a      	orrs	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	659a      	str	r2, [r3, #88]	@ 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001cfa:	e01c      	b.n	8001d36 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d00:	2212      	movs	r2, #18
 8001d02:	4393      	bics	r3, r2
 8001d04:	2210      	movs	r2, #16
 8001d06:	431a      	orrs	r2, r3
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001d10:	2201      	movs	r2, #1
 8001d12:	431a      	orrs	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001d18:	231f      	movs	r3, #31
 8001d1a:	18fb      	adds	r3, r7, r3
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001d20:	e009      	b.n	8001d36 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d26:	2210      	movs	r2, #16
 8001d28:	431a      	orrs	r2, r3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001d2e:	231f      	movs	r3, #31
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	2201      	movs	r2, #1
 8001d34:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001d36:	231f      	movs	r3, #31
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b008      	add	sp, #32
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	20000000 	.word	0x20000000
 8001d48:	00030d40 	.word	0x00030d40
 8001d4c:	fffffefd 	.word	0xfffffefd
 8001d50:	ffde0201 	.word	0xffde0201
 8001d54:	1ffffc02 	.word	0x1ffffc02
 8001d58:	40012708 	.word	0x40012708
 8001d5c:	ffc3ffff 	.word	0xffc3ffff
 8001d60:	7fffff04 	.word	0x7fffff04

08001d64 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001d64:	b5b0      	push	{r4, r5, r7, lr}
 8001d66:	b086      	sub	sp, #24
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	60f8      	str	r0, [r7, #12]
 8001d6c:	60b9      	str	r1, [r7, #8]
 8001d6e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	0018      	movs	r0, r3
 8001d76:	f7ff fe3d 	bl	80019f4 <LL_ADC_REG_IsConversionOngoing>
 8001d7a:	1e03      	subs	r3, r0, #0
 8001d7c:	d16c      	bne.n	8001e58 <HAL_ADC_Start_DMA+0xf4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2254      	movs	r2, #84	@ 0x54
 8001d82:	5c9b      	ldrb	r3, [r3, r2]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d101      	bne.n	8001d8c <HAL_ADC_Start_DMA+0x28>
 8001d88:	2302      	movs	r3, #2
 8001d8a:	e06c      	b.n	8001e66 <HAL_ADC_Start_DMA+0x102>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	2254      	movs	r2, #84	@ 0x54
 8001d90:	2101      	movs	r1, #1
 8001d92:	5499      	strb	r1, [r3, r2]

    /* Specific case for first call occurrence of this function (DMA transfer */
    /* not activated and ADC disabled), DMA transfer must be activated        */
    /* with ADC disabled.                                                     */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d113      	bne.n	8001dc8 <HAL_ADC_Start_DMA+0x64>
    {
      if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	0018      	movs	r0, r3
 8001da6:	f7ff fdf1 	bl	800198c <LL_ADC_IsEnabled>
 8001daa:	1e03      	subs	r3, r0, #0
 8001dac:	d004      	beq.n	8001db8 <HAL_ADC_Start_DMA+0x54>
      {
        /* Disable ADC */
        LL_ADC_Disable(hadc->Instance);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	0018      	movs	r0, r3
 8001db4:	f7ff fdd8 	bl	8001968 <LL_ADC_Disable>
      }

      /* Enable ADC DMA mode */
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	68da      	ldr	r2, [r3, #12]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	60da      	str	r2, [r3, #12]
    }

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001dc8:	2517      	movs	r5, #23
 8001dca:	197c      	adds	r4, r7, r5
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	0018      	movs	r0, r3
 8001dd0:	f000 fa4e 	bl	8002270 <ADC_Enable>
 8001dd4:	0003      	movs	r3, r0
 8001dd6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001dd8:	002c      	movs	r4, r5
 8001dda:	193b      	adds	r3, r7, r4
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d13e      	bne.n	8001e60 <HAL_ADC_Start_DMA+0xfc>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001de6:	4a22      	ldr	r2, [pc, #136]	@ (8001e70 <HAL_ADC_Start_DMA+0x10c>)
 8001de8:	4013      	ands	r3, r2
 8001dea:	2280      	movs	r2, #128	@ 0x80
 8001dec:	0052      	lsls	r2, r2, #1
 8001dee:	431a      	orrs	r2, r3
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8001e74 <HAL_ADC_Start_DMA+0x110>)
 8001e00:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e06:	4a1c      	ldr	r2, [pc, #112]	@ (8001e78 <HAL_ADC_Start_DMA+0x114>)
 8001e08:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001e0e:	4a1b      	ldr	r2, [pc, #108]	@ (8001e7c <HAL_ADC_Start_DMA+0x118>)
 8001e10:	635a      	str	r2, [r3, #52]	@ 0x34
      /* start (in case of SW start):                                         */

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	221c      	movs	r2, #28
 8001e18:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2254      	movs	r2, #84	@ 0x54
 8001e1e:	2100      	movs	r1, #0
 8001e20:	5499      	strb	r1, [r3, r2]

      /* Enable ADC overrun interrupt */
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	685a      	ldr	r2, [r3, #4]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2110      	movs	r1, #16
 8001e2e:	430a      	orrs	r2, r1
 8001e30:	605a      	str	r2, [r3, #4]

      /* Start the DMA channel */
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	6d18      	ldr	r0, [r3, #80]	@ 0x50
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	3340      	adds	r3, #64	@ 0x40
 8001e3c:	0019      	movs	r1, r3
 8001e3e:	68ba      	ldr	r2, [r7, #8]
 8001e40:	193c      	adds	r4, r7, r4
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f000 fe72 	bl	8002b2c <HAL_DMA_Start_IT>
 8001e48:	0003      	movs	r3, r0
 8001e4a:	7023      	strb	r3, [r4, #0]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	0018      	movs	r0, r3
 8001e52:	f7ff fdbd 	bl	80019d0 <LL_ADC_REG_StartConversion>
 8001e56:	e003      	b.n	8001e60 <HAL_ADC_Start_DMA+0xfc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e58:	2317      	movs	r3, #23
 8001e5a:	18fb      	adds	r3, r7, r3
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001e60:	2317      	movs	r3, #23
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	781b      	ldrb	r3, [r3, #0]
}
 8001e66:	0018      	movs	r0, r3
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	b006      	add	sp, #24
 8001e6c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e6e:	46c0      	nop			@ (mov r8, r8)
 8001e70:	fffff0fe 	.word	0xfffff0fe
 8001e74:	0800241d 	.word	0x0800241d
 8001e78:	080024e5 	.word	0x080024e5
 8001e7c:	08002503 	.word	0x08002503

08001e80 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001e88:	46c0      	nop			@ (mov r8, r8)
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	b002      	add	sp, #8
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e98:	46c0      	nop			@ (mov r8, r8)
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	b002      	add	sp, #8
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ea8:	46c0      	nop			@ (mov r8, r8)
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	b002      	add	sp, #8
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001eba:	2317      	movs	r3, #23
 8001ebc:	18fb      	adds	r3, r7, r3
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2254      	movs	r2, #84	@ 0x54
 8001eca:	5c9b      	ldrb	r3, [r3, r2]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d101      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x24>
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	e1be      	b.n	8002252 <HAL_ADC_ConfigChannel+0x3a2>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2254      	movs	r2, #84	@ 0x54
 8001ed8:	2101      	movs	r1, #1
 8001eda:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	f7ff fd87 	bl	80019f4 <LL_ADC_REG_IsConversionOngoing>
 8001ee6:	1e03      	subs	r3, r0, #0
 8001ee8:	d000      	beq.n	8001eec <HAL_ADC_ConfigChannel+0x3c>
 8001eea:	e1a1      	b.n	8002230 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d100      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x46>
 8001ef4:	e152      	b.n	800219c <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691a      	ldr	r2, [r3, #16]
 8001efa:	2380      	movs	r3, #128	@ 0x80
 8001efc:	061b      	lsls	r3, r3, #24
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d004      	beq.n	8001f0c <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001f06:	4ac2      	ldr	r2, [pc, #776]	@ (8002210 <HAL_ADC_ConfigChannel+0x360>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d108      	bne.n	8001f1e <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0019      	movs	r1, r3
 8001f16:	0010      	movs	r0, r2
 8001f18:	f7ff fcac 	bl	8001874 <LL_ADC_REG_SetSequencerChAdd>
 8001f1c:	e0ed      	b.n	80020fa <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	211f      	movs	r1, #31
 8001f28:	400b      	ands	r3, r1
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	4099      	lsls	r1, r3
 8001f2e:	000b      	movs	r3, r1
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4013      	ands	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	025b      	lsls	r3, r3, #9
 8001f3c:	0a5b      	lsrs	r3, r3, #9
 8001f3e:	d105      	bne.n	8001f4c <HAL_ADC_ConfigChannel+0x9c>
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	0e9b      	lsrs	r3, r3, #26
 8001f46:	221f      	movs	r2, #31
 8001f48:	4013      	ands	r3, r2
 8001f4a:	e0bc      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2201      	movs	r2, #1
 8001f52:	4013      	ands	r3, r2
 8001f54:	d000      	beq.n	8001f58 <HAL_ADC_ConfigChannel+0xa8>
 8001f56:	e0b5      	b.n	80020c4 <HAL_ADC_ConfigChannel+0x214>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d000      	beq.n	8001f64 <HAL_ADC_ConfigChannel+0xb4>
 8001f62:	e0ad      	b.n	80020c0 <HAL_ADC_ConfigChannel+0x210>
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2204      	movs	r2, #4
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	d000      	beq.n	8001f70 <HAL_ADC_ConfigChannel+0xc0>
 8001f6e:	e0a5      	b.n	80020bc <HAL_ADC_ConfigChannel+0x20c>
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2208      	movs	r2, #8
 8001f76:	4013      	ands	r3, r2
 8001f78:	d000      	beq.n	8001f7c <HAL_ADC_ConfigChannel+0xcc>
 8001f7a:	e09d      	b.n	80020b8 <HAL_ADC_ConfigChannel+0x208>
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2210      	movs	r2, #16
 8001f82:	4013      	ands	r3, r2
 8001f84:	d000      	beq.n	8001f88 <HAL_ADC_ConfigChannel+0xd8>
 8001f86:	e095      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x204>
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	4013      	ands	r3, r2
 8001f90:	d000      	beq.n	8001f94 <HAL_ADC_ConfigChannel+0xe4>
 8001f92:	e08d      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x200>
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	2240      	movs	r2, #64	@ 0x40
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d000      	beq.n	8001fa0 <HAL_ADC_ConfigChannel+0xf0>
 8001f9e:	e085      	b.n	80020ac <HAL_ADC_ConfigChannel+0x1fc>
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2280      	movs	r2, #128	@ 0x80
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	d000      	beq.n	8001fac <HAL_ADC_ConfigChannel+0xfc>
 8001faa:	e07d      	b.n	80020a8 <HAL_ADC_ConfigChannel+0x1f8>
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	@ 0x80
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d000      	beq.n	8001fba <HAL_ADC_ConfigChannel+0x10a>
 8001fb8:	e074      	b.n	80020a4 <HAL_ADC_ConfigChannel+0x1f4>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	2380      	movs	r3, #128	@ 0x80
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	d000      	beq.n	8001fc8 <HAL_ADC_ConfigChannel+0x118>
 8001fc6:	e06b      	b.n	80020a0 <HAL_ADC_ConfigChannel+0x1f0>
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	2380      	movs	r3, #128	@ 0x80
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d000      	beq.n	8001fd6 <HAL_ADC_ConfigChannel+0x126>
 8001fd4:	e062      	b.n	800209c <HAL_ADC_ConfigChannel+0x1ec>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	2380      	movs	r3, #128	@ 0x80
 8001fdc:	011b      	lsls	r3, r3, #4
 8001fde:	4013      	ands	r3, r2
 8001fe0:	d000      	beq.n	8001fe4 <HAL_ADC_ConfigChannel+0x134>
 8001fe2:	e059      	b.n	8002098 <HAL_ADC_ConfigChannel+0x1e8>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	2380      	movs	r3, #128	@ 0x80
 8001fea:	015b      	lsls	r3, r3, #5
 8001fec:	4013      	ands	r3, r2
 8001fee:	d151      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1e4>
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2380      	movs	r3, #128	@ 0x80
 8001ff6:	019b      	lsls	r3, r3, #6
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d149      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x1e0>
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	2380      	movs	r3, #128	@ 0x80
 8002002:	01db      	lsls	r3, r3, #7
 8002004:	4013      	ands	r3, r2
 8002006:	d141      	bne.n	800208c <HAL_ADC_ConfigChannel+0x1dc>
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	2380      	movs	r3, #128	@ 0x80
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	4013      	ands	r3, r2
 8002012:	d139      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x1d8>
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2380      	movs	r3, #128	@ 0x80
 800201a:	025b      	lsls	r3, r3, #9
 800201c:	4013      	ands	r3, r2
 800201e:	d131      	bne.n	8002084 <HAL_ADC_ConfigChannel+0x1d4>
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	2380      	movs	r3, #128	@ 0x80
 8002026:	029b      	lsls	r3, r3, #10
 8002028:	4013      	ands	r3, r2
 800202a:	d129      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x1d0>
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	@ 0x80
 8002032:	02db      	lsls	r3, r3, #11
 8002034:	4013      	ands	r3, r2
 8002036:	d121      	bne.n	800207c <HAL_ADC_ConfigChannel+0x1cc>
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681a      	ldr	r2, [r3, #0]
 800203c:	2380      	movs	r3, #128	@ 0x80
 800203e:	031b      	lsls	r3, r3, #12
 8002040:	4013      	ands	r3, r2
 8002042:	d119      	bne.n	8002078 <HAL_ADC_ConfigChannel+0x1c8>
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681a      	ldr	r2, [r3, #0]
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	035b      	lsls	r3, r3, #13
 800204c:	4013      	ands	r3, r2
 800204e:	d111      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x1c4>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	2380      	movs	r3, #128	@ 0x80
 8002056:	039b      	lsls	r3, r3, #14
 8002058:	4013      	ands	r3, r2
 800205a:	d109      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1c0>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	2380      	movs	r3, #128	@ 0x80
 8002062:	03db      	lsls	r3, r3, #15
 8002064:	4013      	ands	r3, r2
 8002066:	d001      	beq.n	800206c <HAL_ADC_ConfigChannel+0x1bc>
 8002068:	2316      	movs	r3, #22
 800206a:	e02c      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 800206c:	2300      	movs	r3, #0
 800206e:	e02a      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 8002070:	2315      	movs	r3, #21
 8002072:	e028      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 8002074:	2314      	movs	r3, #20
 8002076:	e026      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 8002078:	2313      	movs	r3, #19
 800207a:	e024      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 800207c:	2312      	movs	r3, #18
 800207e:	e022      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 8002080:	2311      	movs	r3, #17
 8002082:	e020      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 8002084:	2310      	movs	r3, #16
 8002086:	e01e      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 8002088:	230f      	movs	r3, #15
 800208a:	e01c      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 800208c:	230e      	movs	r3, #14
 800208e:	e01a      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 8002090:	230d      	movs	r3, #13
 8002092:	e018      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 8002094:	230c      	movs	r3, #12
 8002096:	e016      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 8002098:	230b      	movs	r3, #11
 800209a:	e014      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 800209c:	230a      	movs	r3, #10
 800209e:	e012      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 80020a0:	2309      	movs	r3, #9
 80020a2:	e010      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 80020a4:	2308      	movs	r3, #8
 80020a6:	e00e      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 80020a8:	2307      	movs	r3, #7
 80020aa:	e00c      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 80020ac:	2306      	movs	r3, #6
 80020ae:	e00a      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 80020b0:	2305      	movs	r3, #5
 80020b2:	e008      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 80020b4:	2304      	movs	r3, #4
 80020b6:	e006      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 80020b8:	2303      	movs	r3, #3
 80020ba:	e004      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 80020bc:	2302      	movs	r3, #2
 80020be:	e002      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <HAL_ADC_ConfigChannel+0x216>
 80020c4:	2300      	movs	r3, #0
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	6852      	ldr	r2, [r2, #4]
 80020ca:	201f      	movs	r0, #31
 80020cc:	4002      	ands	r2, r0
 80020ce:	4093      	lsls	r3, r2
 80020d0:	000a      	movs	r2, r1
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	1c5a      	adds	r2, r3, #1
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	69db      	ldr	r3, [r3, #28]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d808      	bhi.n	80020fa <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6818      	ldr	r0, [r3, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	001a      	movs	r2, r3
 80020f6:	f7ff fb9d 	bl	8001834 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6819      	ldr	r1, [r3, #0]
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	001a      	movs	r2, r3
 8002108:	f7ff fbd8 	bl	80018bc <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	db00      	blt.n	8002116 <HAL_ADC_ConfigChannel+0x266>
 8002114:	e096      	b.n	8002244 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002116:	4b3f      	ldr	r3, [pc, #252]	@ (8002214 <HAL_ADC_ConfigChannel+0x364>)
 8002118:	0018      	movs	r0, r3
 800211a:	f7ff fb39 	bl	8001790 <LL_ADC_GetCommonPathInternalCh>
 800211e:	0003      	movs	r3, r0
 8002120:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a3c      	ldr	r2, [pc, #240]	@ (8002218 <HAL_ADC_ConfigChannel+0x368>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d123      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	2380      	movs	r3, #128	@ 0x80
 8002130:	041b      	lsls	r3, r3, #16
 8002132:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002134:	d11e      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	2280      	movs	r2, #128	@ 0x80
 800213a:	0412      	lsls	r2, r2, #16
 800213c:	4313      	orrs	r3, r2
 800213e:	4a35      	ldr	r2, [pc, #212]	@ (8002214 <HAL_ADC_ConfigChannel+0x364>)
 8002140:	0019      	movs	r1, r3
 8002142:	0010      	movs	r0, r2
 8002144:	f7ff fb10 	bl	8001768 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8002148:	4b34      	ldr	r3, [pc, #208]	@ (800221c <HAL_ADC_ConfigChannel+0x36c>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4934      	ldr	r1, [pc, #208]	@ (8002220 <HAL_ADC_ConfigChannel+0x370>)
 800214e:	0018      	movs	r0, r3
 8002150:	f7fd ffec 	bl	800012c <__udivsi3>
 8002154:	0003      	movs	r3, r0
 8002156:	001a      	movs	r2, r3
 8002158:	0013      	movs	r3, r2
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	189b      	adds	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	3301      	adds	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002164:	e002      	b.n	800216c <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3b01      	subs	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f9      	bne.n	8002166 <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002172:	e067      	b.n	8002244 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2a      	ldr	r2, [pc, #168]	@ (8002224 <HAL_ADC_ConfigChannel+0x374>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d162      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800217e:	693a      	ldr	r2, [r7, #16]
 8002180:	2380      	movs	r3, #128	@ 0x80
 8002182:	03db      	lsls	r3, r3, #15
 8002184:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002186:	d15d      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2280      	movs	r2, #128	@ 0x80
 800218c:	03d2      	lsls	r2, r2, #15
 800218e:	4313      	orrs	r3, r2
 8002190:	4a20      	ldr	r2, [pc, #128]	@ (8002214 <HAL_ADC_ConfigChannel+0x364>)
 8002192:	0019      	movs	r1, r3
 8002194:	0010      	movs	r0, r2
 8002196:	f7ff fae7 	bl	8001768 <LL_ADC_SetCommonPathInternalCh>
 800219a:	e053      	b.n	8002244 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	691a      	ldr	r2, [r3, #16]
 80021a0:	2380      	movs	r3, #128	@ 0x80
 80021a2:	061b      	lsls	r3, r3, #24
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d004      	beq.n	80021b2 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80021ac:	4a18      	ldr	r2, [pc, #96]	@ (8002210 <HAL_ADC_ConfigChannel+0x360>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d107      	bne.n	80021c2 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	0019      	movs	r1, r3
 80021bc:	0010      	movs	r0, r2
 80021be:	f7ff fb6a 	bl	8001896 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	da3c      	bge.n	8002244 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021ca:	4b12      	ldr	r3, [pc, #72]	@ (8002214 <HAL_ADC_ConfigChannel+0x364>)
 80021cc:	0018      	movs	r0, r3
 80021ce:	f7ff fadf 	bl	8001790 <LL_ADC_GetCommonPathInternalCh>
 80021d2:	0003      	movs	r3, r0
 80021d4:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a0f      	ldr	r2, [pc, #60]	@ (8002218 <HAL_ADC_ConfigChannel+0x368>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d108      	bne.n	80021f2 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4a11      	ldr	r2, [pc, #68]	@ (8002228 <HAL_ADC_ConfigChannel+0x378>)
 80021e4:	4013      	ands	r3, r2
 80021e6:	4a0b      	ldr	r2, [pc, #44]	@ (8002214 <HAL_ADC_ConfigChannel+0x364>)
 80021e8:	0019      	movs	r1, r3
 80021ea:	0010      	movs	r0, r2
 80021ec:	f7ff fabc 	bl	8001768 <LL_ADC_SetCommonPathInternalCh>
 80021f0:	e028      	b.n	8002244 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a0b      	ldr	r2, [pc, #44]	@ (8002224 <HAL_ADC_ConfigChannel+0x374>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d123      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	4a0b      	ldr	r2, [pc, #44]	@ (800222c <HAL_ADC_ConfigChannel+0x37c>)
 8002200:	4013      	ands	r3, r2
 8002202:	4a04      	ldr	r2, [pc, #16]	@ (8002214 <HAL_ADC_ConfigChannel+0x364>)
 8002204:	0019      	movs	r1, r3
 8002206:	0010      	movs	r0, r2
 8002208:	f7ff faae 	bl	8001768 <LL_ADC_SetCommonPathInternalCh>
 800220c:	e01a      	b.n	8002244 <HAL_ADC_ConfigChannel+0x394>
 800220e:	46c0      	nop			@ (mov r8, r8)
 8002210:	80000004 	.word	0x80000004
 8002214:	40012708 	.word	0x40012708
 8002218:	a4000200 	.word	0xa4000200
 800221c:	20000000 	.word	0x20000000
 8002220:	00030d40 	.word	0x00030d40
 8002224:	a8000400 	.word	0xa8000400
 8002228:	ff7fffff 	.word	0xff7fffff
 800222c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002234:	2220      	movs	r2, #32
 8002236:	431a      	orrs	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800223c:	2317      	movs	r3, #23
 800223e:	18fb      	adds	r3, r7, r3
 8002240:	2201      	movs	r2, #1
 8002242:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2254      	movs	r2, #84	@ 0x54
 8002248:	2100      	movs	r1, #0
 800224a:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800224c:	2317      	movs	r3, #23
 800224e:	18fb      	adds	r3, r7, r3
 8002250:	781b      	ldrb	r3, [r3, #0]
}
 8002252:	0018      	movs	r0, r3
 8002254:	46bd      	mov	sp, r7
 8002256:	b006      	add	sp, #24
 8002258:	bd80      	pop	{r7, pc}
 800225a:	46c0      	nop			@ (mov r8, r8)

0800225c <HAL_ADC_GetState>:
  *           " if ((HAL_ADC_GetState(hadc1) & HAL_ADC_STATE_AWD1) != 0UL) "
  * @param hadc ADC handle
  * @retval ADC handle state (bitfield on 32 bits)
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef *hadc)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Return ADC handle state */
  return hadc->State;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002268:	0018      	movs	r0, r3
 800226a:	46bd      	mov	sp, r7
 800226c:	b002      	add	sp, #8
 800226e:	bd80      	pop	{r7, pc}

08002270 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	0018      	movs	r0, r3
 8002282:	f7ff fb83 	bl	800198c <LL_ADC_IsEnabled>
 8002286:	1e03      	subs	r3, r0, #0
 8002288:	d162      	bne.n	8002350 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	689b      	ldr	r3, [r3, #8]
 8002290:	4a32      	ldr	r2, [pc, #200]	@ (800235c <ADC_Enable+0xec>)
 8002292:	4013      	ands	r3, r2
 8002294:	d00d      	beq.n	80022b2 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229a:	2210      	movs	r2, #16
 800229c:	431a      	orrs	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a6:	2201      	movs	r2, #1
 80022a8:	431a      	orrs	r2, r3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e04f      	b.n	8002352 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	0018      	movs	r0, r3
 80022b8:	f7ff fb44 	bl	8001944 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80022bc:	4b28      	ldr	r3, [pc, #160]	@ (8002360 <ADC_Enable+0xf0>)
 80022be:	0018      	movs	r0, r3
 80022c0:	f7ff fa66 	bl	8001790 <LL_ADC_GetCommonPathInternalCh>
 80022c4:	0002      	movs	r2, r0
 80022c6:	2380      	movs	r3, #128	@ 0x80
 80022c8:	041b      	lsls	r3, r3, #16
 80022ca:	4013      	ands	r3, r2
 80022cc:	d00f      	beq.n	80022ee <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80022ce:	4b25      	ldr	r3, [pc, #148]	@ (8002364 <ADC_Enable+0xf4>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4925      	ldr	r1, [pc, #148]	@ (8002368 <ADC_Enable+0xf8>)
 80022d4:	0018      	movs	r0, r3
 80022d6:	f7fd ff29 	bl	800012c <__udivsi3>
 80022da:	0003      	movs	r3, r0
 80022dc:	3301      	adds	r3, #1
 80022de:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022e0:	e002      	b.n	80022e8 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f9      	bne.n	80022e2 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	7e5b      	ldrb	r3, [r3, #25]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d02c      	beq.n	8002350 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80022f6:	f7ff fa09 	bl	800170c <HAL_GetTick>
 80022fa:	0003      	movs	r3, r0
 80022fc:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022fe:	e020      	b.n	8002342 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	0018      	movs	r0, r3
 8002306:	f7ff fb41 	bl	800198c <LL_ADC_IsEnabled>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d104      	bne.n	8002318 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	0018      	movs	r0, r3
 8002314:	f7ff fb16 	bl	8001944 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002318:	f7ff f9f8 	bl	800170c <HAL_GetTick>
 800231c:	0002      	movs	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d90d      	bls.n	8002342 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232a:	2210      	movs	r2, #16
 800232c:	431a      	orrs	r2, r3
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002336:	2201      	movs	r2, #1
 8002338:	431a      	orrs	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e007      	b.n	8002352 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2201      	movs	r2, #1
 800234a:	4013      	ands	r3, r2
 800234c:	2b01      	cmp	r3, #1
 800234e:	d1d7      	bne.n	8002300 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002350:	2300      	movs	r3, #0
}
 8002352:	0018      	movs	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	b004      	add	sp, #16
 8002358:	bd80      	pop	{r7, pc}
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	80000017 	.word	0x80000017
 8002360:	40012708 	.word	0x40012708
 8002364:	20000000 	.word	0x20000000
 8002368:	00030d40 	.word	0x00030d40

0800236c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	0018      	movs	r0, r3
 800237a:	f7ff fb18 	bl	80019ae <LL_ADC_IsDisableOngoing>
 800237e:	0003      	movs	r3, r0
 8002380:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	0018      	movs	r0, r3
 8002388:	f7ff fb00 	bl	800198c <LL_ADC_IsEnabled>
 800238c:	1e03      	subs	r3, r0, #0
 800238e:	d040      	beq.n	8002412 <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d13d      	bne.n	8002412 <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	2205      	movs	r2, #5
 800239e:	4013      	ands	r3, r2
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d10d      	bne.n	80023c0 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	0018      	movs	r0, r3
 80023aa:	f7ff fadd 	bl	8001968 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2203      	movs	r2, #3
 80023b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80023b6:	f7ff f9a9 	bl	800170c <HAL_GetTick>
 80023ba:	0003      	movs	r3, r0
 80023bc:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80023be:	e022      	b.n	8002406 <ADC_Disable+0x9a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023c4:	2210      	movs	r2, #16
 80023c6:	431a      	orrs	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023d0:	2201      	movs	r2, #1
 80023d2:	431a      	orrs	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e01b      	b.n	8002414 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80023dc:	f7ff f996 	bl	800170c <HAL_GetTick>
 80023e0:	0002      	movs	r2, r0
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b02      	cmp	r3, #2
 80023e8:	d90d      	bls.n	8002406 <ADC_Disable+0x9a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	2210      	movs	r2, #16
 80023f0:	431a      	orrs	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023fa:	2201      	movs	r2, #1
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	65da      	str	r2, [r3, #92]	@ 0x5c

        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e006      	b.n	8002414 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	2201      	movs	r2, #1
 800240e:	4013      	ands	r3, r2
 8002410:	d1e4      	bne.n	80023dc <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	0018      	movs	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	b004      	add	sp, #16
 800241a:	bd80      	pop	{r7, pc}

0800241c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002428:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800242e:	2250      	movs	r2, #80	@ 0x50
 8002430:	4013      	ands	r3, r2
 8002432:	d141      	bne.n	80024b8 <ADC_DMAConvCplt+0x9c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002438:	2280      	movs	r2, #128	@ 0x80
 800243a:	0092      	lsls	r2, r2, #2
 800243c:	431a      	orrs	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	0018      	movs	r0, r3
 8002448:	f7ff f9e3 	bl	8001812 <LL_ADC_REG_IsTriggerSourceSWStart>
 800244c:	1e03      	subs	r3, r0, #0
 800244e:	d02e      	beq.n	80024ae <ADC_DMAConvCplt+0x92>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	7e9b      	ldrb	r3, [r3, #26]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d12a      	bne.n	80024ae <ADC_DMAConvCplt+0x92>
       )
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2208      	movs	r2, #8
 8002460:	4013      	ands	r3, r2
 8002462:	2b08      	cmp	r3, #8
 8002464:	d123      	bne.n	80024ae <ADC_DMAConvCplt+0x92>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0018      	movs	r0, r3
 800246c:	f7ff fac2 	bl	80019f4 <LL_ADC_REG_IsConversionOngoing>
 8002470:	1e03      	subs	r3, r0, #0
 8002472:	d110      	bne.n	8002496 <ADC_DMAConvCplt+0x7a>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	210c      	movs	r1, #12
 8002480:	438a      	bics	r2, r1
 8002482:	605a      	str	r2, [r3, #4]

          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	4a15      	ldr	r2, [pc, #84]	@ (80024e0 <ADC_DMAConvCplt+0xc4>)
 800248a:	4013      	ands	r3, r2
 800248c:	2201      	movs	r2, #1
 800248e:	431a      	orrs	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	659a      	str	r2, [r3, #88]	@ 0x58
 8002494:	e00b      	b.n	80024ae <ADC_DMAConvCplt+0x92>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249a:	2220      	movs	r2, #32
 800249c:	431a      	orrs	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024a6:	2201      	movs	r2, #1
 80024a8:	431a      	orrs	r2, r3
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7ff fce5 	bl	8001e80 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80024b6:	e00f      	b.n	80024d8 <ADC_DMAConvCplt+0xbc>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024bc:	2210      	movs	r2, #16
 80024be:	4013      	ands	r3, r2
 80024c0:	d004      	beq.n	80024cc <ADC_DMAConvCplt+0xb0>
      HAL_ADC_ErrorCallback(hadc);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	0018      	movs	r0, r3
 80024c6:	f7ff fceb 	bl	8001ea0 <HAL_ADC_ErrorCallback>
}
 80024ca:	e005      	b.n	80024d8 <ADC_DMAConvCplt+0xbc>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80024d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	0010      	movs	r0, r2
 80024d6:	4798      	blx	r3
}
 80024d8:	46c0      	nop			@ (mov r8, r8)
 80024da:	46bd      	mov	sp, r7
 80024dc:	b004      	add	sp, #16
 80024de:	bd80      	pop	{r7, pc}
 80024e0:	fffffefe 	.word	0xfffffefe

080024e4 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	0018      	movs	r0, r3
 80024f6:	f7ff fccb 	bl	8001e90 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80024fa:	46c0      	nop			@ (mov r8, r8)
 80024fc:	46bd      	mov	sp, r7
 80024fe:	b004      	add	sp, #16
 8002500:	bd80      	pop	{r7, pc}

08002502 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002502:	b580      	push	{r7, lr}
 8002504:	b084      	sub	sp, #16
 8002506:	af00      	add	r7, sp, #0
 8002508:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	2240      	movs	r2, #64	@ 0x40
 8002516:	431a      	orrs	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002520:	2204      	movs	r2, #4
 8002522:	431a      	orrs	r2, r3
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	0018      	movs	r0, r3
 800252c:	f7ff fcb8 	bl	8001ea0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002530:	46c0      	nop			@ (mov r8, r8)
 8002532:	46bd      	mov	sp, r7
 8002534:	b004      	add	sp, #16
 8002536:	bd80      	pop	{r7, pc}

08002538 <LL_ADC_GetCommonClock>:
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_PRESC));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	23f0      	movs	r3, #240	@ 0xf0
 8002546:	039b      	lsls	r3, r3, #14
 8002548:	4013      	ands	r3, r2
}
 800254a:	0018      	movs	r0, r3
 800254c:	46bd      	mov	sp, r7
 800254e:	b002      	add	sp, #8
 8002550:	bd80      	pop	{r7, pc}

08002552 <LL_ADC_GetClock>:
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR2, ADC_CFGR2_CKMODE));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	0f9b      	lsrs	r3, r3, #30
 8002560:	079b      	lsls	r3, r3, #30
}
 8002562:	0018      	movs	r0, r3
 8002564:	46bd      	mov	sp, r7
 8002566:	b002      	add	sp, #8
 8002568:	bd80      	pop	{r7, pc}

0800256a <LL_ADC_SetCalibrationFactor>:
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
 8002572:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	22b4      	movs	r2, #180	@ 0xb4
 8002578:	589b      	ldr	r3, [r3, r2]
 800257a:	227f      	movs	r2, #127	@ 0x7f
 800257c:	4393      	bics	r3, r2
 800257e:	001a      	movs	r2, r3
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	431a      	orrs	r2, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	21b4      	movs	r1, #180	@ 0xb4
 8002588:	505a      	str	r2, [r3, r1]
}
 800258a:	46c0      	nop			@ (mov r8, r8)
 800258c:	46bd      	mov	sp, r7
 800258e:	b002      	add	sp, #8
 8002590:	bd80      	pop	{r7, pc}

08002592 <LL_ADC_GetCalibrationFactor>:
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	22b4      	movs	r2, #180	@ 0xb4
 800259e:	589b      	ldr	r3, [r3, r2]
 80025a0:	227f      	movs	r2, #127	@ 0x7f
 80025a2:	4013      	ands	r3, r2
}
 80025a4:	0018      	movs	r0, r3
 80025a6:	46bd      	mov	sp, r7
 80025a8:	b002      	add	sp, #8
 80025aa:	bd80      	pop	{r7, pc}

080025ac <LL_ADC_Enable>:
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b082      	sub	sp, #8
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	4a04      	ldr	r2, [pc, #16]	@ (80025cc <LL_ADC_Enable+0x20>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	2201      	movs	r2, #1
 80025be:	431a      	orrs	r2, r3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	609a      	str	r2, [r3, #8]
}
 80025c4:	46c0      	nop			@ (mov r8, r8)
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b002      	add	sp, #8
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	7fffffe8 	.word	0x7fffffe8

080025d0 <LL_ADC_Disable>:
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	4a04      	ldr	r2, [pc, #16]	@ (80025f0 <LL_ADC_Disable+0x20>)
 80025de:	4013      	ands	r3, r2
 80025e0:	2202      	movs	r2, #2
 80025e2:	431a      	orrs	r2, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	609a      	str	r2, [r3, #8]
}
 80025e8:	46c0      	nop			@ (mov r8, r8)
 80025ea:	46bd      	mov	sp, r7
 80025ec:	b002      	add	sp, #8
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	7fffffe8 	.word	0x7fffffe8

080025f4 <LL_ADC_IsEnabled>:
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	2201      	movs	r2, #1
 8002602:	4013      	ands	r3, r2
 8002604:	2b01      	cmp	r3, #1
 8002606:	d101      	bne.n	800260c <LL_ADC_IsEnabled+0x18>
 8002608:	2301      	movs	r3, #1
 800260a:	e000      	b.n	800260e <LL_ADC_IsEnabled+0x1a>
 800260c:	2300      	movs	r3, #0
}
 800260e:	0018      	movs	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	b002      	add	sp, #8
 8002614:	bd80      	pop	{r7, pc}
	...

08002618 <LL_ADC_StartCalibration>:
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	4a05      	ldr	r2, [pc, #20]	@ (800263c <LL_ADC_StartCalibration+0x24>)
 8002626:	4013      	ands	r3, r2
 8002628:	2280      	movs	r2, #128	@ 0x80
 800262a:	0612      	lsls	r2, r2, #24
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	609a      	str	r2, [r3, #8]
}
 8002632:	46c0      	nop			@ (mov r8, r8)
 8002634:	46bd      	mov	sp, r7
 8002636:	b002      	add	sp, #8
 8002638:	bd80      	pop	{r7, pc}
 800263a:	46c0      	nop			@ (mov r8, r8)
 800263c:	7fffffe8 	.word	0x7fffffe8

08002640 <LL_ADC_IsCalibrationOnGoing>:
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	0fdb      	lsrs	r3, r3, #31
 800264e:	07da      	lsls	r2, r3, #31
 8002650:	2380      	movs	r3, #128	@ 0x80
 8002652:	061b      	lsls	r3, r3, #24
 8002654:	429a      	cmp	r2, r3
 8002656:	d101      	bne.n	800265c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002658:	2301      	movs	r3, #1
 800265a:	e000      	b.n	800265e <LL_ADC_IsCalibrationOnGoing+0x1e>
 800265c:	2300      	movs	r3, #0
}
 800265e:	0018      	movs	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	b002      	add	sp, #8
 8002664:	bd80      	pop	{r7, pc}
	...

08002668 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8002668:	b590      	push	{r4, r7, lr}
 800266a:	b08b      	sub	sp, #44	@ 0x2c
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002670:	2300      	movs	r3, #0
 8002672:	60fb      	str	r3, [r7, #12]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 8002674:	2300      	movs	r3, #0
 8002676:	623b      	str	r3, [r7, #32]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2254      	movs	r2, #84	@ 0x54
 800267c:	5c9b      	ldrb	r3, [r3, r2]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d101      	bne.n	8002686 <HAL_ADCEx_Calibration_Start+0x1e>
 8002682:	2302      	movs	r3, #2
 8002684:	e0de      	b.n	8002844 <HAL_ADCEx_Calibration_Start+0x1dc>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	2254      	movs	r2, #84	@ 0x54
 800268a:	2101      	movs	r1, #1
 800268c:	5499      	strb	r1, [r3, r2]

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800268e:	231f      	movs	r3, #31
 8002690:	18fc      	adds	r4, r7, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	0018      	movs	r0, r3
 8002696:	f7ff fe69 	bl	800236c <ADC_Disable>
 800269a:	0003      	movs	r3, r0
 800269c:	7023      	strb	r3, [r4, #0]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	0018      	movs	r0, r3
 80026a4:	f7ff ffa6 	bl	80025f4 <LL_ADC_IsEnabled>
 80026a8:	1e03      	subs	r3, r0, #0
 80026aa:	d000      	beq.n	80026ae <HAL_ADCEx_Calibration_Start+0x46>
 80026ac:	e0bd      	b.n	800282a <HAL_ADCEx_Calibration_Start+0x1c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b2:	4a66      	ldr	r2, [pc, #408]	@ (800284c <HAL_ADCEx_Calibration_Start+0x1e4>)
 80026b4:	4013      	ands	r3, r2
 80026b6:	2202      	movs	r2, #2
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a62      	ldr	r2, [pc, #392]	@ (8002850 <HAL_ADCEx_Calibration_Start+0x1e8>)
 80026c6:	4013      	ands	r3, r2
 80026c8:	61bb      	str	r3, [r7, #24]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	495f      	ldr	r1, [pc, #380]	@ (8002854 <HAL_ADCEx_Calibration_Start+0x1ec>)
 80026d6:	400a      	ands	r2, r1
 80026d8:	60da      	str	r2, [r3, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 80026da:	2300      	movs	r3, #0
 80026dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80026de:	e02e      	b.n	800273e <HAL_ADCEx_Calibration_Start+0xd6>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	0018      	movs	r0, r3
 80026e6:	f7ff ff97 	bl	8002618 <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80026ea:	e015      	b.n	8002718 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	3301      	adds	r3, #1
 80026f0:	60fb      	str	r3, [r7, #12]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80026f2:	68fa      	ldr	r2, [r7, #12]
 80026f4:	23ae      	movs	r3, #174	@ 0xae
 80026f6:	029b      	lsls	r3, r3, #10
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d30d      	bcc.n	8002718 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002700:	2212      	movs	r2, #18
 8002702:	4393      	bics	r3, r2
 8002704:	2210      	movs	r2, #16
 8002706:	431a      	orrs	r2, r3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2254      	movs	r2, #84	@ 0x54
 8002710:	2100      	movs	r1, #0
 8002712:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e095      	b.n	8002844 <HAL_ADCEx_Calibration_Start+0x1dc>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	0018      	movs	r0, r3
 800271e:	f7ff ff8f 	bl	8002640 <LL_ADC_IsCalibrationOnGoing>
 8002722:	1e03      	subs	r3, r0, #0
 8002724:	d1e2      	bne.n	80026ec <HAL_ADCEx_Calibration_Start+0x84>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	0018      	movs	r0, r3
 800272c:	f7ff ff31 	bl	8002592 <LL_ADC_GetCalibrationFactor>
 8002730:	0002      	movs	r2, r0
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	189b      	adds	r3, r3, r2
 8002736:	623b      	str	r3, [r7, #32]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8002738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800273a:	3301      	adds	r3, #1
 800273c:	627b      	str	r3, [r7, #36]	@ 0x24
 800273e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002740:	2b07      	cmp	r3, #7
 8002742:	d9cd      	bls.n	80026e0 <HAL_ADCEx_Calibration_Start+0x78>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8002744:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002746:	6a38      	ldr	r0, [r7, #32]
 8002748:	f7fd fcf0 	bl	800012c <__udivsi3>
 800274c:	0003      	movs	r3, r0
 800274e:	623b      	str	r3, [r7, #32]
    /* Apply calibration factor (requires ADC enable and disable process) */
    LL_ADC_Enable(hadc->Instance);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	0018      	movs	r0, r3
 8002756:	f7ff ff29 	bl	80025ac <LL_ADC_Enable>

    /* Case of ADC clocked at low frequency: Delay required between ADC enable and disable actions */
    if(LL_ADC_GetClock(hadc->Instance) == LL_ADC_CLOCK_ASYNC)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	0018      	movs	r0, r3
 8002760:	f7ff fef7 	bl	8002552 <LL_ADC_GetClock>
 8002764:	1e03      	subs	r3, r0, #0
 8002766:	d11b      	bne.n	80027a0 <HAL_ADCEx_Calibration_Start+0x138>
    {
      adc_clk_async_presc = LL_ADC_GetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002768:	4b3b      	ldr	r3, [pc, #236]	@ (8002858 <HAL_ADCEx_Calibration_Start+0x1f0>)
 800276a:	0018      	movs	r0, r3
 800276c:	f7ff fee4 	bl	8002538 <LL_ADC_GetCommonClock>
 8002770:	0003      	movs	r3, r0
 8002772:	617b      	str	r3, [r7, #20]

      if(adc_clk_async_presc >= LL_ADC_CLOCK_ASYNC_DIV16)
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	23e0      	movs	r3, #224	@ 0xe0
 8002778:	035b      	lsls	r3, r3, #13
 800277a:	429a      	cmp	r2, r3
 800277c:	d310      	bcc.n	80027a0 <HAL_ADCEx_Calibration_Start+0x138>
      {
        /* Delay loop initialization and execution */
        /* Delay depends on ADC clock prescaler: Compute ADC clock asynchronous prescaler to decimal format */
        delay_cpu_cycles = (1U << ((adc_clk_async_presc >> ADC_CCR_PRESC_Pos) - 3U));
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	0c9b      	lsrs	r3, r3, #18
 8002782:	3b03      	subs	r3, #3
 8002784:	2201      	movs	r2, #1
 8002786:	409a      	lsls	r2, r3
 8002788:	0013      	movs	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
        /* Divide variable by 2 to compensate partially CPU processing cycles */
        delay_cpu_cycles >>= 1U;
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	085b      	lsrs	r3, r3, #1
 8002790:	60bb      	str	r3, [r7, #8]

        while(delay_cpu_cycles != 0)
 8002792:	e002      	b.n	800279a <HAL_ADCEx_Calibration_Start+0x132>
        {
          delay_cpu_cycles--;
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3b01      	subs	r3, #1
 8002798:	60bb      	str	r3, [r7, #8]
        while(delay_cpu_cycles != 0)
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1f9      	bne.n	8002794 <HAL_ADCEx_Calibration_Start+0x12c>
        }
      }
    }

    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	6a3a      	ldr	r2, [r7, #32]
 80027a6:	0011      	movs	r1, r2
 80027a8:	0018      	movs	r0, r3
 80027aa:	f7ff fede 	bl	800256a <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	0018      	movs	r0, r3
 80027b4:	f7ff ff0c 	bl	80025d0 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80027b8:	f7fe ffa8 	bl	800170c <HAL_GetTick>
 80027bc:	0003      	movs	r3, r0
 80027be:	613b      	str	r3, [r7, #16]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027c0:	e01b      	b.n	80027fa <HAL_ADCEx_Calibration_Start+0x192>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80027c2:	f7fe ffa3 	bl	800170c <HAL_GetTick>
 80027c6:	0002      	movs	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d914      	bls.n	80027fa <HAL_ADCEx_Calibration_Start+0x192>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	0018      	movs	r0, r3
 80027d6:	f7ff ff0d 	bl	80025f4 <LL_ADC_IsEnabled>
 80027da:	1e03      	subs	r3, r0, #0
 80027dc:	d00d      	beq.n	80027fa <HAL_ADCEx_Calibration_Start+0x192>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027e2:	2210      	movs	r2, #16
 80027e4:	431a      	orrs	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ee:	2201      	movs	r2, #1
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e024      	b.n	8002844 <HAL_ADCEx_Calibration_Start+0x1dc>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	0018      	movs	r0, r3
 8002800:	f7ff fef8 	bl	80025f4 <LL_ADC_IsEnabled>
 8002804:	1e03      	subs	r3, r0, #0
 8002806:	d1dc      	bne.n	80027c2 <HAL_ADCEx_Calibration_Start+0x15a>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	68d9      	ldr	r1, [r3, #12]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	430a      	orrs	r2, r1
 8002816:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800281c:	2203      	movs	r2, #3
 800281e:	4393      	bics	r3, r2
 8002820:	2201      	movs	r2, #1
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	659a      	str	r2, [r3, #88]	@ 0x58
 8002828:	e005      	b.n	8002836 <HAL_ADCEx_Calibration_Start+0x1ce>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800282e:	2210      	movs	r2, #16
 8002830:	431a      	orrs	r2, r3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2254      	movs	r2, #84	@ 0x54
 800283a:	2100      	movs	r1, #0
 800283c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 800283e:	231f      	movs	r3, #31
 8002840:	18fb      	adds	r3, r7, r3
 8002842:	781b      	ldrb	r3, [r3, #0]
}
 8002844:	0018      	movs	r0, r3
 8002846:	46bd      	mov	sp, r7
 8002848:	b00b      	add	sp, #44	@ 0x2c
 800284a:	bd90      	pop	{r4, r7, pc}
 800284c:	fffffefd 	.word	0xfffffefd
 8002850:	00008003 	.word	0x00008003
 8002854:	ffff7ffc 	.word	0xffff7ffc
 8002858:	40012708 	.word	0x40012708

0800285c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	0002      	movs	r2, r0
 8002864:	1dfb      	adds	r3, r7, #7
 8002866:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002868:	1dfb      	adds	r3, r7, #7
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	2b7f      	cmp	r3, #127	@ 0x7f
 800286e:	d809      	bhi.n	8002884 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002870:	1dfb      	adds	r3, r7, #7
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	001a      	movs	r2, r3
 8002876:	231f      	movs	r3, #31
 8002878:	401a      	ands	r2, r3
 800287a:	4b04      	ldr	r3, [pc, #16]	@ (800288c <__NVIC_EnableIRQ+0x30>)
 800287c:	2101      	movs	r1, #1
 800287e:	4091      	lsls	r1, r2
 8002880:	000a      	movs	r2, r1
 8002882:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002884:	46c0      	nop			@ (mov r8, r8)
 8002886:	46bd      	mov	sp, r7
 8002888:	b002      	add	sp, #8
 800288a:	bd80      	pop	{r7, pc}
 800288c:	e000e100 	.word	0xe000e100

08002890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002890:	b590      	push	{r4, r7, lr}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	0002      	movs	r2, r0
 8002898:	6039      	str	r1, [r7, #0]
 800289a:	1dfb      	adds	r3, r7, #7
 800289c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800289e:	1dfb      	adds	r3, r7, #7
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80028a4:	d828      	bhi.n	80028f8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028a6:	4a2f      	ldr	r2, [pc, #188]	@ (8002964 <__NVIC_SetPriority+0xd4>)
 80028a8:	1dfb      	adds	r3, r7, #7
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	b25b      	sxtb	r3, r3
 80028ae:	089b      	lsrs	r3, r3, #2
 80028b0:	33c0      	adds	r3, #192	@ 0xc0
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	589b      	ldr	r3, [r3, r2]
 80028b6:	1dfa      	adds	r2, r7, #7
 80028b8:	7812      	ldrb	r2, [r2, #0]
 80028ba:	0011      	movs	r1, r2
 80028bc:	2203      	movs	r2, #3
 80028be:	400a      	ands	r2, r1
 80028c0:	00d2      	lsls	r2, r2, #3
 80028c2:	21ff      	movs	r1, #255	@ 0xff
 80028c4:	4091      	lsls	r1, r2
 80028c6:	000a      	movs	r2, r1
 80028c8:	43d2      	mvns	r2, r2
 80028ca:	401a      	ands	r2, r3
 80028cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	019b      	lsls	r3, r3, #6
 80028d2:	22ff      	movs	r2, #255	@ 0xff
 80028d4:	401a      	ands	r2, r3
 80028d6:	1dfb      	adds	r3, r7, #7
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	0018      	movs	r0, r3
 80028dc:	2303      	movs	r3, #3
 80028de:	4003      	ands	r3, r0
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028e4:	481f      	ldr	r0, [pc, #124]	@ (8002964 <__NVIC_SetPriority+0xd4>)
 80028e6:	1dfb      	adds	r3, r7, #7
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	b25b      	sxtb	r3, r3
 80028ec:	089b      	lsrs	r3, r3, #2
 80028ee:	430a      	orrs	r2, r1
 80028f0:	33c0      	adds	r3, #192	@ 0xc0
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80028f6:	e031      	b.n	800295c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80028f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002968 <__NVIC_SetPriority+0xd8>)
 80028fa:	1dfb      	adds	r3, r7, #7
 80028fc:	781b      	ldrb	r3, [r3, #0]
 80028fe:	0019      	movs	r1, r3
 8002900:	230f      	movs	r3, #15
 8002902:	400b      	ands	r3, r1
 8002904:	3b08      	subs	r3, #8
 8002906:	089b      	lsrs	r3, r3, #2
 8002908:	3306      	adds	r3, #6
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	18d3      	adds	r3, r2, r3
 800290e:	3304      	adds	r3, #4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	1dfa      	adds	r2, r7, #7
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	0011      	movs	r1, r2
 8002918:	2203      	movs	r2, #3
 800291a:	400a      	ands	r2, r1
 800291c:	00d2      	lsls	r2, r2, #3
 800291e:	21ff      	movs	r1, #255	@ 0xff
 8002920:	4091      	lsls	r1, r2
 8002922:	000a      	movs	r2, r1
 8002924:	43d2      	mvns	r2, r2
 8002926:	401a      	ands	r2, r3
 8002928:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	019b      	lsls	r3, r3, #6
 800292e:	22ff      	movs	r2, #255	@ 0xff
 8002930:	401a      	ands	r2, r3
 8002932:	1dfb      	adds	r3, r7, #7
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	0018      	movs	r0, r3
 8002938:	2303      	movs	r3, #3
 800293a:	4003      	ands	r3, r0
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002940:	4809      	ldr	r0, [pc, #36]	@ (8002968 <__NVIC_SetPriority+0xd8>)
 8002942:	1dfb      	adds	r3, r7, #7
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	001c      	movs	r4, r3
 8002948:	230f      	movs	r3, #15
 800294a:	4023      	ands	r3, r4
 800294c:	3b08      	subs	r3, #8
 800294e:	089b      	lsrs	r3, r3, #2
 8002950:	430a      	orrs	r2, r1
 8002952:	3306      	adds	r3, #6
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	18c3      	adds	r3, r0, r3
 8002958:	3304      	adds	r3, #4
 800295a:	601a      	str	r2, [r3, #0]
}
 800295c:	46c0      	nop			@ (mov r8, r8)
 800295e:	46bd      	mov	sp, r7
 8002960:	b003      	add	sp, #12
 8002962:	bd90      	pop	{r4, r7, pc}
 8002964:	e000e100 	.word	0xe000e100
 8002968:	e000ed00 	.word	0xe000ed00

0800296c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b082      	sub	sp, #8
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	1e5a      	subs	r2, r3, #1
 8002978:	2380      	movs	r3, #128	@ 0x80
 800297a:	045b      	lsls	r3, r3, #17
 800297c:	429a      	cmp	r2, r3
 800297e:	d301      	bcc.n	8002984 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002980:	2301      	movs	r3, #1
 8002982:	e010      	b.n	80029a6 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002984:	4b0a      	ldr	r3, [pc, #40]	@ (80029b0 <SysTick_Config+0x44>)
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	3a01      	subs	r2, #1
 800298a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800298c:	2301      	movs	r3, #1
 800298e:	425b      	negs	r3, r3
 8002990:	2103      	movs	r1, #3
 8002992:	0018      	movs	r0, r3
 8002994:	f7ff ff7c 	bl	8002890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002998:	4b05      	ldr	r3, [pc, #20]	@ (80029b0 <SysTick_Config+0x44>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800299e:	4b04      	ldr	r3, [pc, #16]	@ (80029b0 <SysTick_Config+0x44>)
 80029a0:	2207      	movs	r2, #7
 80029a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b002      	add	sp, #8
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			@ (mov r8, r8)
 80029b0:	e000e010 	.word	0xe000e010

080029b4 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60b9      	str	r1, [r7, #8]
 80029bc:	607a      	str	r2, [r7, #4]
 80029be:	210f      	movs	r1, #15
 80029c0:	187b      	adds	r3, r7, r1
 80029c2:	1c02      	adds	r2, r0, #0
 80029c4:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80029c6:	68ba      	ldr	r2, [r7, #8]
 80029c8:	187b      	adds	r3, r7, r1
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	0011      	movs	r1, r2
 80029d0:	0018      	movs	r0, r3
 80029d2:	f7ff ff5d 	bl	8002890 <__NVIC_SetPriority>
}
 80029d6:	46c0      	nop			@ (mov r8, r8)
 80029d8:	46bd      	mov	sp, r7
 80029da:	b004      	add	sp, #16
 80029dc:	bd80      	pop	{r7, pc}

080029de <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b082      	sub	sp, #8
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	0002      	movs	r2, r0
 80029e6:	1dfb      	adds	r3, r7, #7
 80029e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80029ea:	1dfb      	adds	r3, r7, #7
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	b25b      	sxtb	r3, r3
 80029f0:	0018      	movs	r0, r3
 80029f2:	f7ff ff33 	bl	800285c <__NVIC_EnableIRQ>
}
 80029f6:	46c0      	nop			@ (mov r8, r8)
 80029f8:	46bd      	mov	sp, r7
 80029fa:	b002      	add	sp, #8
 80029fc:	bd80      	pop	{r7, pc}

080029fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029fe:	b580      	push	{r7, lr}
 8002a00:	b082      	sub	sp, #8
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f7ff ffaf 	bl	800296c <SysTick_Config>
 8002a0e:	0003      	movs	r3, r0
}
 8002a10:	0018      	movs	r0, r3
 8002a12:	46bd      	mov	sp, r7
 8002a14:	b002      	add	sp, #8
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d101      	bne.n	8002a2a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002a26:	2301      	movs	r3, #1
 8002a28:	e077      	b.n	8002b1a <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a3d      	ldr	r2, [pc, #244]	@ (8002b24 <HAL_DMA_Init+0x10c>)
 8002a30:	4694      	mov	ip, r2
 8002a32:	4463      	add	r3, ip
 8002a34:	2114      	movs	r1, #20
 8002a36:	0018      	movs	r0, r3
 8002a38:	f7fd fb78 	bl	800012c <__udivsi3>
 8002a3c:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 8002a3e:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2225      	movs	r2, #37	@ 0x25
 8002a48:	2102      	movs	r1, #2
 8002a4a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4934      	ldr	r1, [pc, #208]	@ (8002b28 <HAL_DMA_Init+0x110>)
 8002a58:	400a      	ands	r2, r1
 8002a5a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	6819      	ldr	r1, [r3, #0]
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	689a      	ldr	r2, [r3, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68db      	ldr	r3, [r3, #12]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	691b      	ldr	r3, [r3, #16]
 8002a70:	431a      	orrs	r2, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	431a      	orrs	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	431a      	orrs	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	431a      	orrs	r2, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	431a      	orrs	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	0018      	movs	r0, r3
 8002a96:	f000 fa9f 	bl	8002fd8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689a      	ldr	r2, [r3, #8]
 8002a9e:	2380      	movs	r3, #128	@ 0x80
 8002aa0:	01db      	lsls	r3, r3, #7
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d102      	bne.n	8002aac <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ab4:	21ff      	movs	r1, #255	@ 0xff
 8002ab6:	400a      	ands	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002ac2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d011      	beq.n	8002af0 <HAL_DMA_Init+0xd8>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	2b04      	cmp	r3, #4
 8002ad2:	d80d      	bhi.n	8002af0 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f000 faaa 	bl	8003030 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	e008      	b.n	8002b02 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2200      	movs	r2, #0
 8002af4:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2225      	movs	r2, #37	@ 0x25
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2224      	movs	r2, #36	@ 0x24
 8002b14:	2100      	movs	r1, #0
 8002b16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	0018      	movs	r0, r3
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	b002      	add	sp, #8
 8002b20:	bd80      	pop	{r7, pc}
 8002b22:	46c0      	nop			@ (mov r8, r8)
 8002b24:	bffdfff8 	.word	0xbffdfff8
 8002b28:	ffff800f 	.word	0xffff800f

08002b2c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b086      	sub	sp, #24
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3a:	2317      	movs	r3, #23
 8002b3c:	18fb      	adds	r3, r7, r3
 8002b3e:	2200      	movs	r2, #0
 8002b40:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2224      	movs	r2, #36	@ 0x24
 8002b46:	5c9b      	ldrb	r3, [r3, r2]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d101      	bne.n	8002b50 <HAL_DMA_Start_IT+0x24>
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	e070      	b.n	8002c32 <HAL_DMA_Start_IT+0x106>
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2224      	movs	r2, #36	@ 0x24
 8002b54:	2101      	movs	r1, #1
 8002b56:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2225      	movs	r2, #37	@ 0x25
 8002b5c:	5c9b      	ldrb	r3, [r3, r2]
 8002b5e:	b2db      	uxtb	r3, r3
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d157      	bne.n	8002c14 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2225      	movs	r2, #37	@ 0x25
 8002b68:	2102      	movs	r1, #2
 8002b6a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	438a      	bics	r2, r1
 8002b80:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	68b9      	ldr	r1, [r7, #8]
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 f9e5 	bl	8002f58 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d008      	beq.n	8002ba8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	210e      	movs	r1, #14
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e00f      	b.n	8002bc8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2104      	movs	r1, #4
 8002bb4:	438a      	bics	r2, r1
 8002bb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681a      	ldr	r2, [r3, #0]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	210a      	movs	r1, #10
 8002bc4:	430a      	orrs	r2, r1
 8002bc6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	2380      	movs	r3, #128	@ 0x80
 8002bd0:	025b      	lsls	r3, r3, #9
 8002bd2:	4013      	ands	r3, r2
 8002bd4:	d008      	beq.n	8002be8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002be0:	2180      	movs	r1, #128	@ 0x80
 8002be2:	0049      	lsls	r1, r1, #1
 8002be4:	430a      	orrs	r2, r1
 8002be6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d008      	beq.n	8002c02 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bfa:	2180      	movs	r1, #128	@ 0x80
 8002bfc:	0049      	lsls	r1, r1, #1
 8002bfe:	430a      	orrs	r2, r1
 8002c00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	e007      	b.n	8002c24 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2224      	movs	r2, #36	@ 0x24
 8002c18:	2100      	movs	r1, #0
 8002c1a:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002c1c:	2317      	movs	r3, #23
 8002c1e:	18fb      	adds	r3, r7, r3
 8002c20:	2202      	movs	r2, #2
 8002c22:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2224      	movs	r2, #36	@ 0x24
 8002c28:	2100      	movs	r1, #0
 8002c2a:	5499      	strb	r1, [r3, r2]

  return status;
 8002c2c:	2317      	movs	r3, #23
 8002c2e:	18fb      	adds	r3, r7, r3
 8002c30:	781b      	ldrb	r3, [r3, #0]
}
 8002c32:	0018      	movs	r0, r3
 8002c34:	46bd      	mov	sp, r7
 8002c36:	b006      	add	sp, #24
 8002c38:	bd80      	pop	{r7, pc}
	...

08002c3c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e050      	b.n	8002cf0 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2225      	movs	r2, #37	@ 0x25
 8002c52:	5c9b      	ldrb	r3, [r3, r2]
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d008      	beq.n	8002c6c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2204      	movs	r2, #4
 8002c5e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2224      	movs	r2, #36	@ 0x24
 8002c64:	2100      	movs	r1, #0
 8002c66:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e041      	b.n	8002cf0 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	210e      	movs	r1, #14
 8002c78:	438a      	bics	r2, r1
 8002c7a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c80:	681a      	ldr	r2, [r3, #0]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c86:	491c      	ldr	r1, [pc, #112]	@ (8002cf8 <HAL_DMA_Abort+0xbc>)
 8002c88:	400a      	ands	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	2101      	movs	r1, #1
 8002c98:	438a      	bics	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1cU)));
 8002c9c:	4b17      	ldr	r3, [pc, #92]	@ (8002cfc <HAL_DMA_Abort+0xc0>)
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca4:	221c      	movs	r2, #28
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	2201      	movs	r2, #1
 8002caa:	409a      	lsls	r2, r3
 8002cac:	4b13      	ldr	r3, [pc, #76]	@ (8002cfc <HAL_DMA_Abort+0xc0>)
 8002cae:	430a      	orrs	r2, r1
 8002cb0:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cb6:	687a      	ldr	r2, [r7, #4]
 8002cb8:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002cba:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00c      	beq.n	8002cde <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cce:	490a      	ldr	r1, [pc, #40]	@ (8002cf8 <HAL_DMA_Abort+0xbc>)
 8002cd0:	400a      	ands	r2, r1
 8002cd2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002cdc:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2225      	movs	r2, #37	@ 0x25
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2224      	movs	r2, #36	@ 0x24
 8002cea:	2100      	movs	r1, #0
 8002cec:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	0018      	movs	r0, r3
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	b002      	add	sp, #8
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	fffffeff 	.word	0xfffffeff
 8002cfc:	40020000 	.word	0x40020000

08002d00 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d08:	230f      	movs	r3, #15
 8002d0a:	18fb      	adds	r3, r7, r3
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2224      	movs	r2, #36	@ 0x24
 8002d14:	2100      	movs	r1, #0
 8002d16:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2224      	movs	r2, #36	@ 0x24
 8002d1c:	5c9b      	ldrb	r3, [r3, r2]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_DMA_Abort_IT+0x26>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e05e      	b.n	8002de4 <HAL_DMA_Abort_IT+0xe4>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2224      	movs	r2, #36	@ 0x24
 8002d2a:	2101      	movs	r1, #1
 8002d2c:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2225      	movs	r2, #37	@ 0x25
 8002d32:	5c9b      	ldrb	r3, [r3, r2]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d007      	beq.n	8002d4a <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2204      	movs	r2, #4
 8002d3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002d40:	230f      	movs	r3, #15
 8002d42:	18fb      	adds	r3, r7, r3
 8002d44:	2201      	movs	r2, #1
 8002d46:	701a      	strb	r2, [r3, #0]
 8002d48:	e049      	b.n	8002dde <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	681a      	ldr	r2, [r3, #0]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	210e      	movs	r1, #14
 8002d56:	438a      	bics	r2, r1
 8002d58:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2101      	movs	r1, #1
 8002d66:	438a      	bics	r2, r1
 8002d68:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d74:	491d      	ldr	r1, [pc, #116]	@ (8002dec <HAL_DMA_Abort_IT+0xec>)
 8002d76:	400a      	ands	r2, r1
 8002d78:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8002d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8002df0 <HAL_DMA_Abort_IT+0xf0>)
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d82:	221c      	movs	r2, #28
 8002d84:	4013      	ands	r3, r2
 8002d86:	2201      	movs	r2, #1
 8002d88:	409a      	lsls	r2, r3
 8002d8a:	4b19      	ldr	r3, [pc, #100]	@ (8002df0 <HAL_DMA_Abort_IT+0xf0>)
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d94:	687a      	ldr	r2, [r7, #4]
 8002d96:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002d98:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00c      	beq.n	8002dbc <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002dac:	490f      	ldr	r1, [pc, #60]	@ (8002dec <HAL_DMA_Abort_IT+0xec>)
 8002dae:	400a      	ands	r2, r1
 8002db0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002dba:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2225      	movs	r2, #37	@ 0x25
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2224      	movs	r2, #36	@ 0x24
 8002dc8:	2100      	movs	r1, #0
 8002dca:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d004      	beq.n	8002dde <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	0010      	movs	r0, r2
 8002ddc:	4798      	blx	r3
    }
  }
  return status;
 8002dde:	230f      	movs	r3, #15
 8002de0:	18fb      	adds	r3, r7, r3
 8002de2:	781b      	ldrb	r3, [r3, #0]
}
 8002de4:	0018      	movs	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	b004      	add	sp, #16
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	fffffeff 	.word	0xfffffeff
 8002df0:	40020000 	.word	0x40020000

08002df4 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 8002dfc:	4b55      	ldr	r3, [pc, #340]	@ (8002f54 <HAL_DMA_IRQHandler+0x160>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e0e:	221c      	movs	r2, #28
 8002e10:	4013      	ands	r3, r2
 8002e12:	2204      	movs	r2, #4
 8002e14:	409a      	lsls	r2, r3
 8002e16:	0013      	movs	r3, r2
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d027      	beq.n	8002e6e <HAL_DMA_IRQHandler+0x7a>
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	2204      	movs	r2, #4
 8002e22:	4013      	ands	r3, r2
 8002e24:	d023      	beq.n	8002e6e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2220      	movs	r2, #32
 8002e2e:	4013      	ands	r3, r2
 8002e30:	d107      	bne.n	8002e42 <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2104      	movs	r1, #4
 8002e3e:	438a      	bics	r2, r1
 8002e40:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 8002e42:	4b44      	ldr	r3, [pc, #272]	@ (8002f54 <HAL_DMA_IRQHandler+0x160>)
 8002e44:	6859      	ldr	r1, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4a:	221c      	movs	r2, #28
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2204      	movs	r2, #4
 8002e50:	409a      	lsls	r2, r3
 8002e52:	4b40      	ldr	r3, [pc, #256]	@ (8002f54 <HAL_DMA_IRQHandler+0x160>)
 8002e54:	430a      	orrs	r2, r1
 8002e56:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d100      	bne.n	8002e62 <HAL_DMA_IRQHandler+0x6e>
 8002e60:	e073      	b.n	8002f4a <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	0010      	movs	r0, r2
 8002e6a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002e6c:	e06d      	b.n	8002f4a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e72:	221c      	movs	r2, #28
 8002e74:	4013      	ands	r3, r2
 8002e76:	2202      	movs	r2, #2
 8002e78:	409a      	lsls	r2, r3
 8002e7a:	0013      	movs	r3, r2
 8002e7c:	68fa      	ldr	r2, [r7, #12]
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d02e      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0xec>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2202      	movs	r2, #2
 8002e86:	4013      	ands	r3, r2
 8002e88:	d02a      	beq.n	8002ee0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2220      	movs	r2, #32
 8002e92:	4013      	ands	r3, r2
 8002e94:	d10b      	bne.n	8002eae <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	681a      	ldr	r2, [r3, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	210a      	movs	r1, #10
 8002ea2:	438a      	bics	r2, r1
 8002ea4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2225      	movs	r2, #37	@ 0x25
 8002eaa:	2101      	movs	r1, #1
 8002eac:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8002eae:	4b29      	ldr	r3, [pc, #164]	@ (8002f54 <HAL_DMA_IRQHandler+0x160>)
 8002eb0:	6859      	ldr	r1, [r3, #4]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	221c      	movs	r2, #28
 8002eb8:	4013      	ands	r3, r2
 8002eba:	2202      	movs	r2, #2
 8002ebc:	409a      	lsls	r2, r3
 8002ebe:	4b25      	ldr	r3, [pc, #148]	@ (8002f54 <HAL_DMA_IRQHandler+0x160>)
 8002ec0:	430a      	orrs	r2, r1
 8002ec2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2224      	movs	r2, #36	@ 0x24
 8002ec8:	2100      	movs	r1, #0
 8002eca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d03a      	beq.n	8002f4a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	0010      	movs	r0, r2
 8002edc:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002ede:	e034      	b.n	8002f4a <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee4:	221c      	movs	r2, #28
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	2208      	movs	r2, #8
 8002eea:	409a      	lsls	r2, r3
 8002eec:	0013      	movs	r3, r2
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d02b      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x158>
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	2208      	movs	r2, #8
 8002ef8:	4013      	ands	r3, r2
 8002efa:	d027      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	210e      	movs	r1, #14
 8002f08:	438a      	bics	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002f0c:	4b11      	ldr	r3, [pc, #68]	@ (8002f54 <HAL_DMA_IRQHandler+0x160>)
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f14:	221c      	movs	r2, #28
 8002f16:	4013      	ands	r3, r2
 8002f18:	2201      	movs	r2, #1
 8002f1a:	409a      	lsls	r2, r3
 8002f1c:	4b0d      	ldr	r3, [pc, #52]	@ (8002f54 <HAL_DMA_IRQHandler+0x160>)
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2201      	movs	r2, #1
 8002f26:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2225      	movs	r2, #37	@ 0x25
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	@ 0x24
 8002f34:	2100      	movs	r1, #0
 8002f36:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d005      	beq.n	8002f4c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	0010      	movs	r0, r2
 8002f48:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002f4a:	46c0      	nop			@ (mov r8, r8)
 8002f4c:	46c0      	nop			@ (mov r8, r8)
}
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	b004      	add	sp, #16
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	40020000 	.word	0x40020000

08002f58 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f6e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d004      	beq.n	8002f82 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002f80:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 8002f82:	4b14      	ldr	r3, [pc, #80]	@ (8002fd4 <DMA_SetConfig+0x7c>)
 8002f84:	6859      	ldr	r1, [r3, #4]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	221c      	movs	r2, #28
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	2201      	movs	r2, #1
 8002f90:	409a      	lsls	r2, r3
 8002f92:	4b10      	ldr	r3, [pc, #64]	@ (8002fd4 <DMA_SetConfig+0x7c>)
 8002f94:	430a      	orrs	r2, r1
 8002f96:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	683a      	ldr	r2, [r7, #0]
 8002f9e:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	2b10      	cmp	r3, #16
 8002fa6:	d108      	bne.n	8002fba <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68ba      	ldr	r2, [r7, #8]
 8002fb6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002fb8:	e007      	b.n	8002fca <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68ba      	ldr	r2, [r7, #8]
 8002fc0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	60da      	str	r2, [r3, #12]
}
 8002fca:	46c0      	nop			@ (mov r8, r8)
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	b004      	add	sp, #16
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	46c0      	nop			@ (mov r8, r8)
 8002fd4:	40020000 	.word	0x40020000

08002fd8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	001a      	movs	r2, r3
 8002fe6:	23ff      	movs	r3, #255	@ 0xff
 8002fe8:	4013      	ands	r3, r2
 8002fea:	3b08      	subs	r3, #8
 8002fec:	2114      	movs	r1, #20
 8002fee:	0018      	movs	r0, r3
 8002ff0:	f7fd f89c 	bl	800012c <__udivsi3>
 8002ff4:	0003      	movs	r3, r0
 8002ff6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffc:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 8002ffe:	4a0a      	ldr	r2, [pc, #40]	@ (8003028 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003000:	4694      	mov	ip, r2
 8003002:	4463      	add	r3, ip
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	001a      	movs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a07      	ldr	r2, [pc, #28]	@ (800302c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003010:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	221c      	movs	r2, #28
 8003016:	4013      	ands	r3, r2
 8003018:	2201      	movs	r2, #1
 800301a:	409a      	lsls	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8003020:	46c0      	nop			@ (mov r8, r8)
 8003022:	46bd      	mov	sp, r7
 8003024:	b004      	add	sp, #16
 8003026:	bd80      	pop	{r7, pc}
 8003028:	10008200 	.word	0x10008200
 800302c:	40020880 	.word	0x40020880

08003030 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	22ff      	movs	r2, #255	@ 0xff
 800303e:	4013      	ands	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	4a0a      	ldr	r2, [pc, #40]	@ (8003070 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003046:	4694      	mov	ip, r2
 8003048:	4463      	add	r3, ip
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	001a      	movs	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a07      	ldr	r2, [pc, #28]	@ (8003074 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003056:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	3b01      	subs	r3, #1
 800305c:	2203      	movs	r2, #3
 800305e:	4013      	ands	r3, r2
 8003060:	2201      	movs	r2, #1
 8003062:	409a      	lsls	r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8003068:	46c0      	nop			@ (mov r8, r8)
 800306a:	46bd      	mov	sp, r7
 800306c:	b004      	add	sp, #16
 800306e:	bd80      	pop	{r7, pc}
 8003070:	1000823f 	.word	0x1000823f
 8003074:	40020940 	.word	0x40020940

08003078 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b086      	sub	sp, #24
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003086:	e153      	b.n	8003330 <HAL_GPIO_Init+0x2b8>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2101      	movs	r1, #1
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	4091      	lsls	r1, r2
 8003092:	000a      	movs	r2, r1
 8003094:	4013      	ands	r3, r2
 8003096:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d100      	bne.n	80030a0 <HAL_GPIO_Init+0x28>
 800309e:	e144      	b.n	800332a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d003      	beq.n	80030b0 <HAL_GPIO_Init+0x38>
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b12      	cmp	r3, #18
 80030ae:	d125      	bne.n	80030fc <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	08da      	lsrs	r2, r3, #3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	3208      	adds	r2, #8
 80030b8:	0092      	lsls	r2, r2, #2
 80030ba:	58d3      	ldr	r3, [r2, r3]
 80030bc:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	2207      	movs	r2, #7
 80030c2:	4013      	ands	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	220f      	movs	r2, #15
 80030c8:	409a      	lsls	r2, r3
 80030ca:	0013      	movs	r3, r2
 80030cc:	43da      	mvns	r2, r3
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	4013      	ands	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	691b      	ldr	r3, [r3, #16]
 80030d8:	220f      	movs	r2, #15
 80030da:	401a      	ands	r2, r3
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2107      	movs	r1, #7
 80030e0:	400b      	ands	r3, r1
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	409a      	lsls	r2, r3
 80030e6:	0013      	movs	r3, r2
 80030e8:	697a      	ldr	r2, [r7, #20]
 80030ea:	4313      	orrs	r3, r2
 80030ec:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	08da      	lsrs	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3208      	adds	r2, #8
 80030f6:	0092      	lsls	r2, r2, #2
 80030f8:	6979      	ldr	r1, [r7, #20]
 80030fa:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	2203      	movs	r2, #3
 8003108:	409a      	lsls	r2, r3
 800310a:	0013      	movs	r3, r2
 800310c:	43da      	mvns	r2, r3
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	4013      	ands	r3, r2
 8003112:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2203      	movs	r2, #3
 800311a:	401a      	ands	r2, r3
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	409a      	lsls	r2, r3
 8003122:	0013      	movs	r3, r2
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	697a      	ldr	r2, [r7, #20]
 800312e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d00b      	beq.n	8003150 <HAL_GPIO_Init+0xd8>
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	2b02      	cmp	r3, #2
 800313e:	d007      	beq.n	8003150 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003144:	2b11      	cmp	r3, #17
 8003146:	d003      	beq.n	8003150 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b12      	cmp	r3, #18
 800314e:	d130      	bne.n	80031b2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	2203      	movs	r2, #3
 800315c:	409a      	lsls	r2, r3
 800315e:	0013      	movs	r3, r2
 8003160:	43da      	mvns	r2, r3
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	4013      	ands	r3, r2
 8003166:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	68da      	ldr	r2, [r3, #12]
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	409a      	lsls	r2, r3
 8003172:	0013      	movs	r3, r2
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	4313      	orrs	r3, r2
 8003178:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003186:	2201      	movs	r2, #1
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	409a      	lsls	r2, r3
 800318c:	0013      	movs	r3, r2
 800318e:	43da      	mvns	r2, r3
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	4013      	ands	r3, r2
 8003194:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	091b      	lsrs	r3, r3, #4
 800319c:	2201      	movs	r2, #1
 800319e:	401a      	ands	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	409a      	lsls	r2, r3
 80031a4:	0013      	movs	r3, r2
 80031a6:	697a      	ldr	r2, [r7, #20]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	697a      	ldr	r2, [r7, #20]
 80031b0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	2b03      	cmp	r3, #3
 80031b8:	d017      	beq.n	80031ea <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	2203      	movs	r2, #3
 80031c6:	409a      	lsls	r2, r3
 80031c8:	0013      	movs	r3, r2
 80031ca:	43da      	mvns	r2, r3
 80031cc:	697b      	ldr	r3, [r7, #20]
 80031ce:	4013      	ands	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	689a      	ldr	r2, [r3, #8]
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	409a      	lsls	r2, r3
 80031dc:	0013      	movs	r3, r2
 80031de:	697a      	ldr	r2, [r7, #20]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	2380      	movs	r3, #128	@ 0x80
 80031f0:	055b      	lsls	r3, r3, #21
 80031f2:	4013      	ands	r3, r2
 80031f4:	d100      	bne.n	80031f8 <HAL_GPIO_Init+0x180>
 80031f6:	e098      	b.n	800332a <HAL_GPIO_Init+0x2b2>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80031f8:	4a53      	ldr	r2, [pc, #332]	@ (8003348 <HAL_GPIO_Init+0x2d0>)
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	089b      	lsrs	r3, r3, #2
 80031fe:	3318      	adds	r3, #24
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	589b      	ldr	r3, [r3, r2]
 8003204:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	2203      	movs	r2, #3
 800320a:	4013      	ands	r3, r2
 800320c:	00db      	lsls	r3, r3, #3
 800320e:	220f      	movs	r2, #15
 8003210:	409a      	lsls	r2, r3
 8003212:	0013      	movs	r3, r2
 8003214:	43da      	mvns	r2, r3
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	4013      	ands	r3, r2
 800321a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	23a0      	movs	r3, #160	@ 0xa0
 8003220:	05db      	lsls	r3, r3, #23
 8003222:	429a      	cmp	r2, r3
 8003224:	d019      	beq.n	800325a <HAL_GPIO_Init+0x1e2>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	4a48      	ldr	r2, [pc, #288]	@ (800334c <HAL_GPIO_Init+0x2d4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d013      	beq.n	8003256 <HAL_GPIO_Init+0x1de>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4a47      	ldr	r2, [pc, #284]	@ (8003350 <HAL_GPIO_Init+0x2d8>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00d      	beq.n	8003252 <HAL_GPIO_Init+0x1da>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	4a46      	ldr	r2, [pc, #280]	@ (8003354 <HAL_GPIO_Init+0x2dc>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d007      	beq.n	800324e <HAL_GPIO_Init+0x1d6>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	4a45      	ldr	r2, [pc, #276]	@ (8003358 <HAL_GPIO_Init+0x2e0>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d101      	bne.n	800324a <HAL_GPIO_Init+0x1d2>
 8003246:	2305      	movs	r3, #5
 8003248:	e008      	b.n	800325c <HAL_GPIO_Init+0x1e4>
 800324a:	2306      	movs	r3, #6
 800324c:	e006      	b.n	800325c <HAL_GPIO_Init+0x1e4>
 800324e:	2303      	movs	r3, #3
 8003250:	e004      	b.n	800325c <HAL_GPIO_Init+0x1e4>
 8003252:	2302      	movs	r3, #2
 8003254:	e002      	b.n	800325c <HAL_GPIO_Init+0x1e4>
 8003256:	2301      	movs	r3, #1
 8003258:	e000      	b.n	800325c <HAL_GPIO_Init+0x1e4>
 800325a:	2300      	movs	r3, #0
 800325c:	693a      	ldr	r2, [r7, #16]
 800325e:	2103      	movs	r1, #3
 8003260:	400a      	ands	r2, r1
 8003262:	00d2      	lsls	r2, r2, #3
 8003264:	4093      	lsls	r3, r2
 8003266:	697a      	ldr	r2, [r7, #20]
 8003268:	4313      	orrs	r3, r2
 800326a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800326c:	4936      	ldr	r1, [pc, #216]	@ (8003348 <HAL_GPIO_Init+0x2d0>)
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	089b      	lsrs	r3, r3, #2
 8003272:	3318      	adds	r3, #24
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	697a      	ldr	r2, [r7, #20]
 8003278:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800327a:	4a33      	ldr	r2, [pc, #204]	@ (8003348 <HAL_GPIO_Init+0x2d0>)
 800327c:	2380      	movs	r3, #128	@ 0x80
 800327e:	58d3      	ldr	r3, [r2, r3]
 8003280:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	43da      	mvns	r2, r3
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	4013      	ands	r3, r2
 800328a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	2380      	movs	r3, #128	@ 0x80
 8003292:	025b      	lsls	r3, r3, #9
 8003294:	4013      	ands	r3, r2
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x228>
        {
          tmp |= iocurrent;
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	4313      	orrs	r3, r2
 800329e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 80032a0:	4929      	ldr	r1, [pc, #164]	@ (8003348 <HAL_GPIO_Init+0x2d0>)
 80032a2:	2280      	movs	r2, #128	@ 0x80
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80032a8:	4a27      	ldr	r2, [pc, #156]	@ (8003348 <HAL_GPIO_Init+0x2d0>)
 80032aa:	2384      	movs	r3, #132	@ 0x84
 80032ac:	58d3      	ldr	r3, [r2, r3]
 80032ae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	43da      	mvns	r2, r3
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	4013      	ands	r3, r2
 80032b8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	2380      	movs	r3, #128	@ 0x80
 80032c0:	029b      	lsls	r3, r3, #10
 80032c2:	4013      	ands	r3, r2
 80032c4:	d003      	beq.n	80032ce <HAL_GPIO_Init+0x256>
        {
          tmp |= iocurrent;
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80032ce:	491e      	ldr	r1, [pc, #120]	@ (8003348 <HAL_GPIO_Init+0x2d0>)
 80032d0:	2284      	movs	r2, #132	@ 0x84
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80032d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003348 <HAL_GPIO_Init+0x2d0>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	43da      	mvns	r2, r3
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	4013      	ands	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	685a      	ldr	r2, [r3, #4]
 80032ea:	2380      	movs	r3, #128	@ 0x80
 80032ec:	035b      	lsls	r3, r3, #13
 80032ee:	4013      	ands	r3, r2
 80032f0:	d003      	beq.n	80032fa <HAL_GPIO_Init+0x282>
        {
          tmp |= iocurrent;
 80032f2:	697a      	ldr	r2, [r7, #20]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80032fa:	4b13      	ldr	r3, [pc, #76]	@ (8003348 <HAL_GPIO_Init+0x2d0>)
 80032fc:	697a      	ldr	r2, [r7, #20]
 80032fe:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8003300:	4b11      	ldr	r3, [pc, #68]	@ (8003348 <HAL_GPIO_Init+0x2d0>)
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43da      	mvns	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	4013      	ands	r3, r2
 800330e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685a      	ldr	r2, [r3, #4]
 8003314:	2380      	movs	r3, #128	@ 0x80
 8003316:	039b      	lsls	r3, r3, #14
 8003318:	4013      	ands	r3, r2
 800331a:	d003      	beq.n	8003324 <HAL_GPIO_Init+0x2ac>
        {
          tmp |= iocurrent;
 800331c:	697a      	ldr	r2, [r7, #20]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8003324:	4b08      	ldr	r3, [pc, #32]	@ (8003348 <HAL_GPIO_Init+0x2d0>)
 8003326:	697a      	ldr	r2, [r7, #20]
 8003328:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	3301      	adds	r3, #1
 800332e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	40da      	lsrs	r2, r3
 8003338:	1e13      	subs	r3, r2, #0
 800333a:	d000      	beq.n	800333e <HAL_GPIO_Init+0x2c6>
 800333c:	e6a4      	b.n	8003088 <HAL_GPIO_Init+0x10>
  }
}
 800333e:	46c0      	nop			@ (mov r8, r8)
 8003340:	46c0      	nop			@ (mov r8, r8)
 8003342:	46bd      	mov	sp, r7
 8003344:	b006      	add	sp, #24
 8003346:	bd80      	pop	{r7, pc}
 8003348:	40021800 	.word	0x40021800
 800334c:	50000400 	.word	0x50000400
 8003350:	50000800 	.word	0x50000800
 8003354:	50000c00 	.word	0x50000c00
 8003358:	50001400 	.word	0x50001400

0800335c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	000a      	movs	r2, r1
 8003366:	1cbb      	adds	r3, r7, #2
 8003368:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	1cba      	adds	r2, r7, #2
 8003370:	8812      	ldrh	r2, [r2, #0]
 8003372:	4013      	ands	r3, r2
 8003374:	d004      	beq.n	8003380 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003376:	230f      	movs	r3, #15
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	2201      	movs	r2, #1
 800337c:	701a      	strb	r2, [r3, #0]
 800337e:	e003      	b.n	8003388 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003380:	230f      	movs	r3, #15
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003388:	230f      	movs	r3, #15
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	781b      	ldrb	r3, [r3, #0]
}
 800338e:	0018      	movs	r0, r3
 8003390:	46bd      	mov	sp, r7
 8003392:	b004      	add	sp, #16
 8003394:	bd80      	pop	{r7, pc}

08003396 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b082      	sub	sp, #8
 800339a:	af00      	add	r7, sp, #0
 800339c:	6078      	str	r0, [r7, #4]
 800339e:	0008      	movs	r0, r1
 80033a0:	0011      	movs	r1, r2
 80033a2:	1cbb      	adds	r3, r7, #2
 80033a4:	1c02      	adds	r2, r0, #0
 80033a6:	801a      	strh	r2, [r3, #0]
 80033a8:	1c7b      	adds	r3, r7, #1
 80033aa:	1c0a      	adds	r2, r1, #0
 80033ac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80033ae:	1c7b      	adds	r3, r7, #1
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d004      	beq.n	80033c0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80033b6:	1cbb      	adds	r3, r7, #2
 80033b8:	881a      	ldrh	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80033be:	e003      	b.n	80033c8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80033c0:	1cbb      	adds	r3, r7, #2
 80033c2:	881a      	ldrh	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80033c8:	46c0      	nop			@ (mov r8, r8)
 80033ca:	46bd      	mov	sp, r7
 80033cc:	b002      	add	sp, #8
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e1d0      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2201      	movs	r2, #1
 80033e8:	4013      	ands	r3, r2
 80033ea:	d100      	bne.n	80033ee <HAL_RCC_OscConfig+0x1e>
 80033ec:	e069      	b.n	80034c2 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80033ee:	4bc8      	ldr	r3, [pc, #800]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2238      	movs	r2, #56	@ 0x38
 80033f4:	4013      	ands	r3, r2
 80033f6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	2b08      	cmp	r3, #8
 80033fc:	d105      	bne.n	800340a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d15d      	bne.n	80034c2 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e1bc      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	2380      	movs	r3, #128	@ 0x80
 8003410:	025b      	lsls	r3, r3, #9
 8003412:	429a      	cmp	r2, r3
 8003414:	d107      	bne.n	8003426 <HAL_RCC_OscConfig+0x56>
 8003416:	4bbe      	ldr	r3, [pc, #760]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	4bbd      	ldr	r3, [pc, #756]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 800341c:	2180      	movs	r1, #128	@ 0x80
 800341e:	0249      	lsls	r1, r1, #9
 8003420:	430a      	orrs	r2, r1
 8003422:	601a      	str	r2, [r3, #0]
 8003424:	e020      	b.n	8003468 <HAL_RCC_OscConfig+0x98>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	23a0      	movs	r3, #160	@ 0xa0
 800342c:	02db      	lsls	r3, r3, #11
 800342e:	429a      	cmp	r2, r3
 8003430:	d10e      	bne.n	8003450 <HAL_RCC_OscConfig+0x80>
 8003432:	4bb7      	ldr	r3, [pc, #732]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	4bb6      	ldr	r3, [pc, #728]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003438:	2180      	movs	r1, #128	@ 0x80
 800343a:	02c9      	lsls	r1, r1, #11
 800343c:	430a      	orrs	r2, r1
 800343e:	601a      	str	r2, [r3, #0]
 8003440:	4bb3      	ldr	r3, [pc, #716]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	4bb2      	ldr	r3, [pc, #712]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003446:	2180      	movs	r1, #128	@ 0x80
 8003448:	0249      	lsls	r1, r1, #9
 800344a:	430a      	orrs	r2, r1
 800344c:	601a      	str	r2, [r3, #0]
 800344e:	e00b      	b.n	8003468 <HAL_RCC_OscConfig+0x98>
 8003450:	4baf      	ldr	r3, [pc, #700]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	4bae      	ldr	r3, [pc, #696]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003456:	49af      	ldr	r1, [pc, #700]	@ (8003714 <HAL_RCC_OscConfig+0x344>)
 8003458:	400a      	ands	r2, r1
 800345a:	601a      	str	r2, [r3, #0]
 800345c:	4bac      	ldr	r3, [pc, #688]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	4bab      	ldr	r3, [pc, #684]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003462:	49ad      	ldr	r1, [pc, #692]	@ (8003718 <HAL_RCC_OscConfig+0x348>)
 8003464:	400a      	ands	r2, r1
 8003466:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d014      	beq.n	800349a <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003470:	f7fe f94c 	bl	800170c <HAL_GetTick>
 8003474:	0003      	movs	r3, r0
 8003476:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800347a:	f7fe f947 	bl	800170c <HAL_GetTick>
 800347e:	0002      	movs	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b64      	cmp	r3, #100	@ 0x64
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e17b      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800348c:	4ba0      	ldr	r3, [pc, #640]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	2380      	movs	r3, #128	@ 0x80
 8003492:	029b      	lsls	r3, r3, #10
 8003494:	4013      	ands	r3, r2
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0xaa>
 8003498:	e013      	b.n	80034c2 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349a:	f7fe f937 	bl	800170c <HAL_GetTick>
 800349e:	0003      	movs	r3, r0
 80034a0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80034a4:	f7fe f932 	bl	800170c <HAL_GetTick>
 80034a8:	0002      	movs	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	@ 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e166      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034b6:	4b96      	ldr	r3, [pc, #600]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	2380      	movs	r3, #128	@ 0x80
 80034bc:	029b      	lsls	r3, r3, #10
 80034be:	4013      	ands	r3, r2
 80034c0:	d1f0      	bne.n	80034a4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2202      	movs	r2, #2
 80034c8:	4013      	ands	r3, r2
 80034ca:	d100      	bne.n	80034ce <HAL_RCC_OscConfig+0xfe>
 80034cc:	e086      	b.n	80035dc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80034ce:	4b90      	ldr	r3, [pc, #576]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2238      	movs	r2, #56	@ 0x38
 80034d4:	4013      	ands	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d12f      	bne.n	800353e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e14c      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ea:	4b89      	ldr	r3, [pc, #548]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4a8b      	ldr	r2, [pc, #556]	@ (800371c <HAL_RCC_OscConfig+0x34c>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	021a      	lsls	r2, r3, #8
 80034fa:	4b85      	ldr	r3, [pc, #532]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d112      	bne.n	800352c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003506:	4b82      	ldr	r3, [pc, #520]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a85      	ldr	r2, [pc, #532]	@ (8003720 <HAL_RCC_OscConfig+0x350>)
 800350c:	4013      	ands	r3, r2
 800350e:	0019      	movs	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	691a      	ldr	r2, [r3, #16]
 8003514:	4b7e      	ldr	r3, [pc, #504]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003516:	430a      	orrs	r2, r1
 8003518:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800351a:	4b7d      	ldr	r3, [pc, #500]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	0adb      	lsrs	r3, r3, #11
 8003520:	2207      	movs	r2, #7
 8003522:	4013      	ands	r3, r2
 8003524:	4a7f      	ldr	r2, [pc, #508]	@ (8003724 <HAL_RCC_OscConfig+0x354>)
 8003526:	40da      	lsrs	r2, r3
 8003528:	4b7f      	ldr	r3, [pc, #508]	@ (8003728 <HAL_RCC_OscConfig+0x358>)
 800352a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800352c:	4b7f      	ldr	r3, [pc, #508]	@ (800372c <HAL_RCC_OscConfig+0x35c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	0018      	movs	r0, r3
 8003532:	f7fe f88f 	bl	8001654 <HAL_InitTick>
 8003536:	1e03      	subs	r3, r0, #0
 8003538:	d050      	beq.n	80035dc <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e122      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d030      	beq.n	80035a8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003546:	4b72      	ldr	r3, [pc, #456]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a75      	ldr	r2, [pc, #468]	@ (8003720 <HAL_RCC_OscConfig+0x350>)
 800354c:	4013      	ands	r3, r2
 800354e:	0019      	movs	r1, r3
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	4b6e      	ldr	r3, [pc, #440]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003556:	430a      	orrs	r2, r1
 8003558:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800355a:	4b6d      	ldr	r3, [pc, #436]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	4b6c      	ldr	r3, [pc, #432]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003560:	2180      	movs	r1, #128	@ 0x80
 8003562:	0049      	lsls	r1, r1, #1
 8003564:	430a      	orrs	r2, r1
 8003566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fe f8d0 	bl	800170c <HAL_GetTick>
 800356c:	0003      	movs	r3, r0
 800356e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8003572:	f7fe f8cb 	bl	800170c <HAL_GetTick>
 8003576:	0002      	movs	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e0ff      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003584:	4b62      	ldr	r3, [pc, #392]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	2380      	movs	r3, #128	@ 0x80
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	4013      	ands	r3, r2
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4b5f      	ldr	r3, [pc, #380]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	4a61      	ldr	r2, [pc, #388]	@ (800371c <HAL_RCC_OscConfig+0x34c>)
 8003596:	4013      	ands	r3, r2
 8003598:	0019      	movs	r1, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	021a      	lsls	r2, r3, #8
 80035a0:	4b5b      	ldr	r3, [pc, #364]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80035a2:	430a      	orrs	r2, r1
 80035a4:	605a      	str	r2, [r3, #4]
 80035a6:	e019      	b.n	80035dc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80035a8:	4b59      	ldr	r3, [pc, #356]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b58      	ldr	r3, [pc, #352]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80035ae:	4960      	ldr	r1, [pc, #384]	@ (8003730 <HAL_RCC_OscConfig+0x360>)
 80035b0:	400a      	ands	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b4:	f7fe f8aa 	bl	800170c <HAL_GetTick>
 80035b8:	0003      	movs	r3, r0
 80035ba:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80035be:	f7fe f8a5 	bl	800170c <HAL_GetTick>
 80035c2:	0002      	movs	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e0d9      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	2380      	movs	r3, #128	@ 0x80
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	4013      	ands	r3, r2
 80035da:	d1f0      	bne.n	80035be <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2208      	movs	r2, #8
 80035e2:	4013      	ands	r3, r2
 80035e4:	d042      	beq.n	800366c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80035e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	2238      	movs	r2, #56	@ 0x38
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b18      	cmp	r3, #24
 80035f0:	d105      	bne.n	80035fe <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	699b      	ldr	r3, [r3, #24]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d138      	bne.n	800366c <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e0c2      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d019      	beq.n	800363a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003606:	4b42      	ldr	r3, [pc, #264]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003608:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800360a:	4b41      	ldr	r3, [pc, #260]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 800360c:	2101      	movs	r1, #1
 800360e:	430a      	orrs	r2, r1
 8003610:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003612:	f7fe f87b 	bl	800170c <HAL_GetTick>
 8003616:	0003      	movs	r3, r0
 8003618:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800361c:	f7fe f876 	bl	800170c <HAL_GetTick>
 8003620:	0002      	movs	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e0aa      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800362e:	4b38      	ldr	r3, [pc, #224]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003632:	2202      	movs	r2, #2
 8003634:	4013      	ands	r3, r2
 8003636:	d0f1      	beq.n	800361c <HAL_RCC_OscConfig+0x24c>
 8003638:	e018      	b.n	800366c <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800363a:	4b35      	ldr	r3, [pc, #212]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 800363c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800363e:	4b34      	ldr	r3, [pc, #208]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003640:	2101      	movs	r1, #1
 8003642:	438a      	bics	r2, r1
 8003644:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003646:	f7fe f861 	bl	800170c <HAL_GetTick>
 800364a:	0003      	movs	r3, r0
 800364c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800364e:	e008      	b.n	8003662 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8003650:	f7fe f85c 	bl	800170c <HAL_GetTick>
 8003654:	0002      	movs	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	2b02      	cmp	r3, #2
 800365c:	d901      	bls.n	8003662 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800365e:	2303      	movs	r3, #3
 8003660:	e090      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8003662:	4b2b      	ldr	r3, [pc, #172]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003664:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003666:	2202      	movs	r2, #2
 8003668:	4013      	ands	r3, r2
 800366a:	d1f1      	bne.n	8003650 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2204      	movs	r2, #4
 8003672:	4013      	ands	r3, r2
 8003674:	d100      	bne.n	8003678 <HAL_RCC_OscConfig+0x2a8>
 8003676:	e084      	b.n	8003782 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003678:	230f      	movs	r3, #15
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8003680:	4b23      	ldr	r3, [pc, #140]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	2238      	movs	r2, #56	@ 0x38
 8003686:	4013      	ands	r3, r2
 8003688:	2b20      	cmp	r3, #32
 800368a:	d106      	bne.n	800369a <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d000      	beq.n	8003696 <HAL_RCC_OscConfig+0x2c6>
 8003694:	e075      	b.n	8003782 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e074      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d106      	bne.n	80036b0 <HAL_RCC_OscConfig+0x2e0>
 80036a2:	4b1b      	ldr	r3, [pc, #108]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80036a4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036a6:	4b1a      	ldr	r3, [pc, #104]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80036a8:	2101      	movs	r1, #1
 80036aa:	430a      	orrs	r2, r1
 80036ac:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036ae:	e01c      	b.n	80036ea <HAL_RCC_OscConfig+0x31a>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b05      	cmp	r3, #5
 80036b6:	d10c      	bne.n	80036d2 <HAL_RCC_OscConfig+0x302>
 80036b8:	4b15      	ldr	r3, [pc, #84]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80036ba:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036bc:	4b14      	ldr	r3, [pc, #80]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80036be:	2104      	movs	r1, #4
 80036c0:	430a      	orrs	r2, r1
 80036c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036c4:	4b12      	ldr	r3, [pc, #72]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80036c6:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036c8:	4b11      	ldr	r3, [pc, #68]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80036ca:	2101      	movs	r1, #1
 80036cc:	430a      	orrs	r2, r1
 80036ce:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036d0:	e00b      	b.n	80036ea <HAL_RCC_OscConfig+0x31a>
 80036d2:	4b0f      	ldr	r3, [pc, #60]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80036d4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80036d8:	2101      	movs	r1, #1
 80036da:	438a      	bics	r2, r1
 80036dc:	65da      	str	r2, [r3, #92]	@ 0x5c
 80036de:	4b0c      	ldr	r3, [pc, #48]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80036e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80036e2:	4b0b      	ldr	r3, [pc, #44]	@ (8003710 <HAL_RCC_OscConfig+0x340>)
 80036e4:	2104      	movs	r1, #4
 80036e6:	438a      	bics	r2, r1
 80036e8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d028      	beq.n	8003744 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f2:	f7fe f80b 	bl	800170c <HAL_GetTick>
 80036f6:	0003      	movs	r3, r0
 80036f8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80036fa:	e01d      	b.n	8003738 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fc:	f7fe f806 	bl	800170c <HAL_GetTick>
 8003700:	0002      	movs	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	4a0b      	ldr	r2, [pc, #44]	@ (8003734 <HAL_RCC_OscConfig+0x364>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d915      	bls.n	8003738 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e039      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
 8003710:	40021000 	.word	0x40021000
 8003714:	fffeffff 	.word	0xfffeffff
 8003718:	fffbffff 	.word	0xfffbffff
 800371c:	ffff80ff 	.word	0xffff80ff
 8003720:	ffffc7ff 	.word	0xffffc7ff
 8003724:	02dc6c00 	.word	0x02dc6c00
 8003728:	20000000 	.word	0x20000000
 800372c:	20000004 	.word	0x20000004
 8003730:	fffffeff 	.word	0xfffffeff
 8003734:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003738:	4b14      	ldr	r3, [pc, #80]	@ (800378c <HAL_RCC_OscConfig+0x3bc>)
 800373a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800373c:	2202      	movs	r2, #2
 800373e:	4013      	ands	r3, r2
 8003740:	d0dc      	beq.n	80036fc <HAL_RCC_OscConfig+0x32c>
 8003742:	e013      	b.n	800376c <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003744:	f7fd ffe2 	bl	800170c <HAL_GetTick>
 8003748:	0003      	movs	r3, r0
 800374a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800374c:	e009      	b.n	8003762 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374e:	f7fd ffdd 	bl	800170c <HAL_GetTick>
 8003752:	0002      	movs	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	4a0d      	ldr	r2, [pc, #52]	@ (8003790 <HAL_RCC_OscConfig+0x3c0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e010      	b.n	8003784 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8003762:	4b0a      	ldr	r3, [pc, #40]	@ (800378c <HAL_RCC_OscConfig+0x3bc>)
 8003764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003766:	2202      	movs	r2, #2
 8003768:	4013      	ands	r3, r2
 800376a:	d1f0      	bne.n	800374e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800376c:	230f      	movs	r3, #15
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d105      	bne.n	8003782 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003776:	4b05      	ldr	r3, [pc, #20]	@ (800378c <HAL_RCC_OscConfig+0x3bc>)
 8003778:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800377a:	4b04      	ldr	r3, [pc, #16]	@ (800378c <HAL_RCC_OscConfig+0x3bc>)
 800377c:	4905      	ldr	r1, [pc, #20]	@ (8003794 <HAL_RCC_OscConfig+0x3c4>)
 800377e:	400a      	ands	r2, r1
 8003780:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
    }
  }
  return HAL_OK;
 8003782:	2300      	movs	r3, #0
}
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	b006      	add	sp, #24
 800378a:	bd80      	pop	{r7, pc}
 800378c:	40021000 	.word	0x40021000
 8003790:	00001388 	.word	0x00001388
 8003794:	efffffff 	.word	0xefffffff

08003798 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
 80037a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0e9      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037ac:	4b76      	ldr	r3, [pc, #472]	@ (8003988 <HAL_RCC_ClockConfig+0x1f0>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2207      	movs	r2, #7
 80037b2:	4013      	ands	r3, r2
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d91e      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ba:	4b73      	ldr	r3, [pc, #460]	@ (8003988 <HAL_RCC_ClockConfig+0x1f0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2207      	movs	r2, #7
 80037c0:	4393      	bics	r3, r2
 80037c2:	0019      	movs	r1, r3
 80037c4:	4b70      	ldr	r3, [pc, #448]	@ (8003988 <HAL_RCC_ClockConfig+0x1f0>)
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80037cc:	f7fd ff9e 	bl	800170c <HAL_GetTick>
 80037d0:	0003      	movs	r3, r0
 80037d2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037d4:	e009      	b.n	80037ea <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80037d6:	f7fd ff99 	bl	800170c <HAL_GetTick>
 80037da:	0002      	movs	r2, r0
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	4a6a      	ldr	r2, [pc, #424]	@ (800398c <HAL_RCC_ClockConfig+0x1f4>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e0ca      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80037ea:	4b67      	ldr	r3, [pc, #412]	@ (8003988 <HAL_RCC_ClockConfig+0x1f0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2207      	movs	r2, #7
 80037f0:	4013      	ands	r3, r2
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d1ee      	bne.n	80037d6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2202      	movs	r2, #2
 80037fe:	4013      	ands	r3, r2
 8003800:	d017      	beq.n	8003832 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2204      	movs	r2, #4
 8003808:	4013      	ands	r3, r2
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800380c:	4b60      	ldr	r3, [pc, #384]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	4a60      	ldr	r2, [pc, #384]	@ (8003994 <HAL_RCC_ClockConfig+0x1fc>)
 8003812:	401a      	ands	r2, r3
 8003814:	4b5e      	ldr	r3, [pc, #376]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 8003816:	21b0      	movs	r1, #176	@ 0xb0
 8003818:	0109      	lsls	r1, r1, #4
 800381a:	430a      	orrs	r2, r1
 800381c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800381e:	4b5c      	ldr	r3, [pc, #368]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	4a5d      	ldr	r2, [pc, #372]	@ (8003998 <HAL_RCC_ClockConfig+0x200>)
 8003824:	4013      	ands	r3, r2
 8003826:	0019      	movs	r1, r3
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68da      	ldr	r2, [r3, #12]
 800382c:	4b58      	ldr	r3, [pc, #352]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 800382e:	430a      	orrs	r2, r1
 8003830:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2201      	movs	r2, #1
 8003838:	4013      	ands	r3, r2
 800383a:	d055      	beq.n	80038e8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800383c:	4b54      	ldr	r3, [pc, #336]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	221c      	movs	r2, #28
 8003842:	4393      	bics	r3, r2
 8003844:	0019      	movs	r1, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689a      	ldr	r2, [r3, #8]
 800384a:	4b51      	ldr	r3, [pc, #324]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 800384c:	430a      	orrs	r2, r1
 800384e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	685b      	ldr	r3, [r3, #4]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d107      	bne.n	8003868 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003858:	4b4d      	ldr	r3, [pc, #308]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 800385a:	681a      	ldr	r2, [r3, #0]
 800385c:	2380      	movs	r3, #128	@ 0x80
 800385e:	029b      	lsls	r3, r3, #10
 8003860:	4013      	ands	r3, r2
 8003862:	d11f      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e08b      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d107      	bne.n	8003880 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003870:	4b47      	ldr	r3, [pc, #284]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	2380      	movs	r3, #128	@ 0x80
 8003876:	00db      	lsls	r3, r3, #3
 8003878:	4013      	ands	r3, r2
 800387a:	d113      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e07f      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d106      	bne.n	8003896 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8003888:	4b41      	ldr	r3, [pc, #260]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 800388a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800388c:	2202      	movs	r2, #2
 800388e:	4013      	ands	r3, r2
 8003890:	d108      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e074      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003896:	4b3e      	ldr	r3, [pc, #248]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 8003898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389a:	2202      	movs	r2, #2
 800389c:	4013      	ands	r3, r2
 800389e:	d101      	bne.n	80038a4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038a0:	2301      	movs	r3, #1
 80038a2:	e06d      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80038a4:	4b3a      	ldr	r3, [pc, #232]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2207      	movs	r2, #7
 80038aa:	4393      	bics	r3, r2
 80038ac:	0019      	movs	r1, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	4b37      	ldr	r3, [pc, #220]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 80038b4:	430a      	orrs	r2, r1
 80038b6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b8:	f7fd ff28 	bl	800170c <HAL_GetTick>
 80038bc:	0003      	movs	r3, r0
 80038be:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038c0:	e009      	b.n	80038d6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80038c2:	f7fd ff23 	bl	800170c <HAL_GetTick>
 80038c6:	0002      	movs	r2, r0
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	1ad3      	subs	r3, r2, r3
 80038cc:	4a2f      	ldr	r2, [pc, #188]	@ (800398c <HAL_RCC_ClockConfig+0x1f4>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d901      	bls.n	80038d6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e054      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038d6:	4b2e      	ldr	r3, [pc, #184]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	2238      	movs	r2, #56	@ 0x38
 80038dc:	401a      	ands	r2, r3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	00db      	lsls	r3, r3, #3
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d1ec      	bne.n	80038c2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038e8:	4b27      	ldr	r3, [pc, #156]	@ (8003988 <HAL_RCC_ClockConfig+0x1f0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	2207      	movs	r2, #7
 80038ee:	4013      	ands	r3, r2
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d21e      	bcs.n	8003934 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f6:	4b24      	ldr	r3, [pc, #144]	@ (8003988 <HAL_RCC_ClockConfig+0x1f0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2207      	movs	r2, #7
 80038fc:	4393      	bics	r3, r2
 80038fe:	0019      	movs	r1, r3
 8003900:	4b21      	ldr	r3, [pc, #132]	@ (8003988 <HAL_RCC_ClockConfig+0x1f0>)
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003908:	f7fd ff00 	bl	800170c <HAL_GetTick>
 800390c:	0003      	movs	r3, r0
 800390e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003910:	e009      	b.n	8003926 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8003912:	f7fd fefb 	bl	800170c <HAL_GetTick>
 8003916:	0002      	movs	r2, r0
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	4a1b      	ldr	r2, [pc, #108]	@ (800398c <HAL_RCC_ClockConfig+0x1f4>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e02c      	b.n	8003980 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003926:	4b18      	ldr	r3, [pc, #96]	@ (8003988 <HAL_RCC_ClockConfig+0x1f0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	2207      	movs	r2, #7
 800392c:	4013      	ands	r3, r2
 800392e:	683a      	ldr	r2, [r7, #0]
 8003930:	429a      	cmp	r2, r3
 8003932:	d1ee      	bne.n	8003912 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2204      	movs	r2, #4
 800393a:	4013      	ands	r3, r2
 800393c:	d009      	beq.n	8003952 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800393e:	4b14      	ldr	r3, [pc, #80]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	4a16      	ldr	r2, [pc, #88]	@ (800399c <HAL_RCC_ClockConfig+0x204>)
 8003944:	4013      	ands	r3, r2
 8003946:	0019      	movs	r1, r3
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	4b10      	ldr	r3, [pc, #64]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 800394e:	430a      	orrs	r2, r1
 8003950:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8003952:	f000 f82b 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 8003956:	0001      	movs	r1, r0
 8003958:	4b0d      	ldr	r3, [pc, #52]	@ (8003990 <HAL_RCC_ClockConfig+0x1f8>)
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	0a1b      	lsrs	r3, r3, #8
 800395e:	220f      	movs	r2, #15
 8003960:	401a      	ands	r2, r3
 8003962:	4b0f      	ldr	r3, [pc, #60]	@ (80039a0 <HAL_RCC_ClockConfig+0x208>)
 8003964:	0092      	lsls	r2, r2, #2
 8003966:	58d3      	ldr	r3, [r2, r3]
 8003968:	221f      	movs	r2, #31
 800396a:	4013      	ands	r3, r2
 800396c:	000a      	movs	r2, r1
 800396e:	40da      	lsrs	r2, r3
 8003970:	4b0c      	ldr	r3, [pc, #48]	@ (80039a4 <HAL_RCC_ClockConfig+0x20c>)
 8003972:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003974:	4b0c      	ldr	r3, [pc, #48]	@ (80039a8 <HAL_RCC_ClockConfig+0x210>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	0018      	movs	r0, r3
 800397a:	f7fd fe6b 	bl	8001654 <HAL_InitTick>
 800397e:	0003      	movs	r3, r0
}
 8003980:	0018      	movs	r0, r3
 8003982:	46bd      	mov	sp, r7
 8003984:	b004      	add	sp, #16
 8003986:	bd80      	pop	{r7, pc}
 8003988:	40022000 	.word	0x40022000
 800398c:	00001388 	.word	0x00001388
 8003990:	40021000 	.word	0x40021000
 8003994:	ffff84ff 	.word	0xffff84ff
 8003998:	fffff0ff 	.word	0xfffff0ff
 800399c:	ffff8fff 	.word	0xffff8fff
 80039a0:	0800664c 	.word	0x0800664c
 80039a4:	20000000 	.word	0x20000000
 80039a8:	20000004 	.word	0x20000004

080039ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80039b2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x78>)
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	2238      	movs	r2, #56	@ 0x38
 80039b8:	4013      	ands	r3, r2
 80039ba:	d10f      	bne.n	80039dc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80039bc:	4b19      	ldr	r3, [pc, #100]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x78>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	0adb      	lsrs	r3, r3, #11
 80039c2:	2207      	movs	r2, #7
 80039c4:	4013      	ands	r3, r2
 80039c6:	2201      	movs	r2, #1
 80039c8:	409a      	lsls	r2, r3
 80039ca:	0013      	movs	r3, r2
 80039cc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80039ce:	6839      	ldr	r1, [r7, #0]
 80039d0:	4815      	ldr	r0, [pc, #84]	@ (8003a28 <HAL_RCC_GetSysClockFreq+0x7c>)
 80039d2:	f7fc fbab 	bl	800012c <__udivsi3>
 80039d6:	0003      	movs	r3, r0
 80039d8:	607b      	str	r3, [r7, #4]
 80039da:	e01e      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80039dc:	4b11      	ldr	r3, [pc, #68]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x78>)
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	2238      	movs	r2, #56	@ 0x38
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b08      	cmp	r3, #8
 80039e6:	d102      	bne.n	80039ee <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80039e8:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <HAL_RCC_GetSysClockFreq+0x80>)
 80039ea:	607b      	str	r3, [r7, #4]
 80039ec:	e015      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80039ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x78>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	2238      	movs	r2, #56	@ 0x38
 80039f4:	4013      	ands	r3, r2
 80039f6:	2b20      	cmp	r3, #32
 80039f8:	d103      	bne.n	8003a02 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80039fa:	2380      	movs	r3, #128	@ 0x80
 80039fc:	021b      	lsls	r3, r3, #8
 80039fe:	607b      	str	r3, [r7, #4]
 8003a00:	e00b      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8003a02:	4b08      	ldr	r3, [pc, #32]	@ (8003a24 <HAL_RCC_GetSysClockFreq+0x78>)
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2238      	movs	r2, #56	@ 0x38
 8003a08:	4013      	ands	r3, r2
 8003a0a:	2b18      	cmp	r3, #24
 8003a0c:	d103      	bne.n	8003a16 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003a0e:	23fa      	movs	r3, #250	@ 0xfa
 8003a10:	01db      	lsls	r3, r3, #7
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	e001      	b.n	8003a1a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8003a1a:	687b      	ldr	r3, [r7, #4]
}
 8003a1c:	0018      	movs	r0, r3
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b002      	add	sp, #8
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40021000 	.word	0x40021000
 8003a28:	02dc6c00 	.word	0x02dc6c00
 8003a2c:	007a1200 	.word	0x007a1200

08003a30 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a34:	4b02      	ldr	r3, [pc, #8]	@ (8003a40 <HAL_RCC_GetHCLKFreq+0x10>)
 8003a36:	681b      	ldr	r3, [r3, #0]
}
 8003a38:	0018      	movs	r0, r3
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	46c0      	nop			@ (mov r8, r8)
 8003a40:	20000000 	.word	0x20000000

08003a44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 8003a48:	f7ff fff2 	bl	8003a30 <HAL_RCC_GetHCLKFreq>
 8003a4c:	0001      	movs	r1, r0
 8003a4e:	4b07      	ldr	r3, [pc, #28]	@ (8003a6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	0b1b      	lsrs	r3, r3, #12
 8003a54:	2207      	movs	r2, #7
 8003a56:	401a      	ands	r2, r3
 8003a58:	4b05      	ldr	r3, [pc, #20]	@ (8003a70 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8003a5a:	0092      	lsls	r2, r2, #2
 8003a5c:	58d3      	ldr	r3, [r2, r3]
 8003a5e:	221f      	movs	r2, #31
 8003a60:	4013      	ands	r3, r2
 8003a62:	40d9      	lsrs	r1, r3
 8003a64:	000b      	movs	r3, r1
}
 8003a66:	0018      	movs	r0, r3
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}
 8003a6c:	40021000 	.word	0x40021000
 8003a70:	0800668c 	.word	0x0800668c

08003a74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003a7c:	2313      	movs	r3, #19
 8003a7e:	18fb      	adds	r3, r7, r3
 8003a80:	2200      	movs	r2, #0
 8003a82:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a84:	2312      	movs	r3, #18
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	2200      	movs	r2, #0
 8003a8a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681a      	ldr	r2, [r3, #0]
 8003a90:	2380      	movs	r3, #128	@ 0x80
 8003a92:	029b      	lsls	r3, r3, #10
 8003a94:	4013      	ands	r3, r2
 8003a96:	d100      	bne.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003a98:	e079      	b.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	2011      	movs	r0, #17
 8003a9c:	183b      	adds	r3, r7, r0
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003aa2:	4b64      	ldr	r3, [pc, #400]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003aa4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003aa6:	2380      	movs	r3, #128	@ 0x80
 8003aa8:	055b      	lsls	r3, r3, #21
 8003aaa:	4013      	ands	r3, r2
 8003aac:	d110      	bne.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aae:	4b61      	ldr	r3, [pc, #388]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ab0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ab2:	4b60      	ldr	r3, [pc, #384]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ab4:	2180      	movs	r1, #128	@ 0x80
 8003ab6:	0549      	lsls	r1, r1, #21
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003abc:	4b5d      	ldr	r3, [pc, #372]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003abe:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ac0:	2380      	movs	r3, #128	@ 0x80
 8003ac2:	055b      	lsls	r3, r3, #21
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003aca:	183b      	adds	r3, r7, r0
 8003acc:	2201      	movs	r2, #1
 8003ace:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8003ad0:	4b58      	ldr	r3, [pc, #352]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ad2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003ad4:	23c0      	movs	r3, #192	@ 0xc0
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	4013      	ands	r3, r2
 8003ada:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d019      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	699b      	ldr	r3, [r3, #24]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d014      	beq.n	8003b16 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8003aec:	4b51      	ldr	r3, [pc, #324]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003aee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af0:	4a51      	ldr	r2, [pc, #324]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003af2:	4013      	ands	r3, r2
 8003af4:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003af6:	4b4f      	ldr	r3, [pc, #316]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003af8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003afa:	4b4e      	ldr	r3, [pc, #312]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003afc:	2180      	movs	r1, #128	@ 0x80
 8003afe:	0249      	lsls	r1, r1, #9
 8003b00:	430a      	orrs	r2, r1
 8003b02:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003b04:	4b4b      	ldr	r3, [pc, #300]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b06:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8003b08:	4b4a      	ldr	r3, [pc, #296]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b0a:	494c      	ldr	r1, [pc, #304]	@ (8003c3c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8003b0c:	400a      	ands	r2, r1
 8003b0e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8003b10:	4b48      	ldr	r3, [pc, #288]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b12:	697a      	ldr	r2, [r7, #20]
 8003b14:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	d016      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b1e:	f7fd fdf5 	bl	800170c <HAL_GetTick>
 8003b22:	0003      	movs	r3, r0
 8003b24:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003b26:	e00c      	b.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7fd fdf0 	bl	800170c <HAL_GetTick>
 8003b2c:	0002      	movs	r2, r0
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	4a43      	ldr	r2, [pc, #268]	@ (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d904      	bls.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8003b38:	2313      	movs	r3, #19
 8003b3a:	18fb      	adds	r3, r7, r3
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	701a      	strb	r2, [r3, #0]
          break;
 8003b40:	e004      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8003b42:	4b3c      	ldr	r3, [pc, #240]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b46:	2202      	movs	r2, #2
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d0ed      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8003b4c:	2313      	movs	r3, #19
 8003b4e:	18fb      	adds	r3, r7, r3
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d10a      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b56:	4b37      	ldr	r3, [pc, #220]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b5a:	4a37      	ldr	r2, [pc, #220]	@ (8003c38 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	0019      	movs	r1, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	4b33      	ldr	r3, [pc, #204]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b66:	430a      	orrs	r2, r1
 8003b68:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003b6a:	e005      	b.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6c:	2312      	movs	r3, #18
 8003b6e:	18fb      	adds	r3, r7, r3
 8003b70:	2213      	movs	r2, #19
 8003b72:	18ba      	adds	r2, r7, r2
 8003b74:	7812      	ldrb	r2, [r2, #0]
 8003b76:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003b78:	2311      	movs	r3, #17
 8003b7a:	18fb      	adds	r3, r7, r3
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d105      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b82:	4b2c      	ldr	r3, [pc, #176]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b86:	4b2b      	ldr	r3, [pc, #172]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b88:	492e      	ldr	r1, [pc, #184]	@ (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b8a:	400a      	ands	r2, r1
 8003b8c:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2201      	movs	r2, #1
 8003b94:	4013      	ands	r3, r2
 8003b96:	d009      	beq.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003b98:	4b26      	ldr	r3, [pc, #152]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003b9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9c:	2203      	movs	r2, #3
 8003b9e:	4393      	bics	r3, r2
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	689a      	ldr	r2, [r3, #8]
 8003ba6:	4b23      	ldr	r3, [pc, #140]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2240      	movs	r2, #64	@ 0x40
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	d009      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bb6:	4b1f      	ldr	r3, [pc, #124]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bba:	4a23      	ldr	r2, [pc, #140]	@ (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	2380      	movs	r3, #128	@ 0x80
 8003bd0:	01db      	lsls	r3, r3, #7
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d008      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bd6:	4b17      	ldr	r3, [pc, #92]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	0899      	lsrs	r1, r3, #2
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	4b14      	ldr	r3, [pc, #80]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003be4:	430a      	orrs	r2, r1
 8003be6:	655a      	str	r2, [r3, #84]	@ 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	2380      	movs	r3, #128	@ 0x80
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	4013      	ands	r3, r2
 8003bf2:	d009      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bf8:	4a14      	ldr	r2, [pc, #80]	@ (8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003bfa:	4013      	ands	r3, r2
 8003bfc:	0019      	movs	r1, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	691a      	ldr	r2, [r3, #16]
 8003c02:	4b0c      	ldr	r3, [pc, #48]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c04:	430a      	orrs	r2, r1
 8003c06:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	da09      	bge.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8003c10:	4b08      	ldr	r3, [pc, #32]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	22e0      	movs	r2, #224	@ 0xe0
 8003c16:	4393      	bics	r3, r2
 8003c18:	0019      	movs	r1, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685a      	ldr	r2, [r3, #4]
 8003c1e:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c20:	430a      	orrs	r2, r1
 8003c22:	601a      	str	r2, [r3, #0]
  }
  return status;
 8003c24:	2312      	movs	r3, #18
 8003c26:	18fb      	adds	r3, r7, r3
 8003c28:	781b      	ldrb	r3, [r3, #0]
}
 8003c2a:	0018      	movs	r0, r3
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	b006      	add	sp, #24
 8003c30:	bd80      	pop	{r7, pc}
 8003c32:	46c0      	nop			@ (mov r8, r8)
 8003c34:	40021000 	.word	0x40021000
 8003c38:	fffffcff 	.word	0xfffffcff
 8003c3c:	fffeffff 	.word	0xfffeffff
 8003c40:	00001388 	.word	0x00001388
 8003c44:	efffffff 	.word	0xefffffff
 8003c48:	ffffcfff 	.word	0xffffcfff
 8003c4c:	ffff3fff 	.word	0xffff3fff

08003c50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b082      	sub	sp, #8
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d101      	bne.n	8003c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e046      	b.n	8003cf0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2288      	movs	r2, #136	@ 0x88
 8003c66:	589b      	ldr	r3, [r3, r2]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d107      	bne.n	8003c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2284      	movs	r2, #132	@ 0x84
 8003c70:	2100      	movs	r1, #0
 8003c72:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7fd fb94 	bl	80013a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2288      	movs	r2, #136	@ 0x88
 8003c80:	2124      	movs	r1, #36	@ 0x24
 8003c82:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2101      	movs	r1, #1
 8003c90:	438a      	bics	r2, r1
 8003c92:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f000 fde8 	bl	8004874 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	0018      	movs	r0, r3
 8003ca8:	f000 fc66 	bl	8004578 <UART_SetConfig>
 8003cac:	0003      	movs	r3, r0
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e01c      	b.n	8003cf0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	685a      	ldr	r2, [r3, #4]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	490d      	ldr	r1, [pc, #52]	@ (8003cf8 <HAL_UART_Init+0xa8>)
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	212a      	movs	r1, #42	@ 0x2a
 8003cd2:	438a      	bics	r2, r1
 8003cd4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f000 fe77 	bl	80049dc <UART_CheckIdleState>
 8003cee:	0003      	movs	r3, r0
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	b002      	add	sp, #8
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	ffffb7ff 	.word	0xffffb7ff

08003cfc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b08a      	sub	sp, #40	@ 0x28
 8003d00:	af02      	add	r7, sp, #8
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	603b      	str	r3, [r7, #0]
 8003d08:	1dbb      	adds	r3, r7, #6
 8003d0a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2288      	movs	r2, #136	@ 0x88
 8003d10:	589b      	ldr	r3, [r3, r2]
 8003d12:	2b20      	cmp	r3, #32
 8003d14:	d000      	beq.n	8003d18 <HAL_UART_Transmit+0x1c>
 8003d16:	e090      	b.n	8003e3a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_UART_Transmit+0x2a>
 8003d1e:	1dbb      	adds	r3, r7, #6
 8003d20:	881b      	ldrh	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e088      	b.n	8003e3c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	2380      	movs	r3, #128	@ 0x80
 8003d30:	015b      	lsls	r3, r3, #5
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d109      	bne.n	8003d4a <HAL_UART_Transmit+0x4e>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d105      	bne.n	8003d4a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	2201      	movs	r2, #1
 8003d42:	4013      	ands	r3, r2
 8003d44:	d001      	beq.n	8003d4a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e078      	b.n	8003e3c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2290      	movs	r2, #144	@ 0x90
 8003d4e:	2100      	movs	r1, #0
 8003d50:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2288      	movs	r2, #136	@ 0x88
 8003d56:	2121      	movs	r1, #33	@ 0x21
 8003d58:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d5a:	f7fd fcd7 	bl	800170c <HAL_GetTick>
 8003d5e:	0003      	movs	r3, r0
 8003d60:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	1dba      	adds	r2, r7, #6
 8003d66:	2154      	movs	r1, #84	@ 0x54
 8003d68:	8812      	ldrh	r2, [r2, #0]
 8003d6a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1dba      	adds	r2, r7, #6
 8003d70:	2156      	movs	r1, #86	@ 0x56
 8003d72:	8812      	ldrh	r2, [r2, #0]
 8003d74:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	2380      	movs	r3, #128	@ 0x80
 8003d7c:	015b      	lsls	r3, r3, #5
 8003d7e:	429a      	cmp	r2, r3
 8003d80:	d108      	bne.n	8003d94 <HAL_UART_Transmit+0x98>
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d104      	bne.n	8003d94 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d8e:	68bb      	ldr	r3, [r7, #8]
 8003d90:	61bb      	str	r3, [r7, #24]
 8003d92:	e003      	b.n	8003d9c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d9c:	e030      	b.n	8003e00 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d9e:	697a      	ldr	r2, [r7, #20]
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	9300      	str	r3, [sp, #0]
 8003da6:	0013      	movs	r3, r2
 8003da8:	2200      	movs	r2, #0
 8003daa:	2180      	movs	r1, #128	@ 0x80
 8003dac:	f000 fec0 	bl	8004b30 <UART_WaitOnFlagUntilTimeout>
 8003db0:	1e03      	subs	r3, r0, #0
 8003db2:	d005      	beq.n	8003dc0 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2288      	movs	r2, #136	@ 0x88
 8003db8:	2120      	movs	r1, #32
 8003dba:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e03d      	b.n	8003e3c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8003dc0:	69fb      	ldr	r3, [r7, #28]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d10b      	bne.n	8003dde <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	881b      	ldrh	r3, [r3, #0]
 8003dca:	001a      	movs	r2, r3
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	05d2      	lsls	r2, r2, #23
 8003dd2:	0dd2      	lsrs	r2, r2, #23
 8003dd4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	3302      	adds	r3, #2
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	e007      	b.n	8003dee <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	781a      	ldrb	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	3301      	adds	r3, #1
 8003dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	2256      	movs	r2, #86	@ 0x56
 8003df2:	5a9b      	ldrh	r3, [r3, r2]
 8003df4:	b29b      	uxth	r3, r3
 8003df6:	3b01      	subs	r3, #1
 8003df8:	b299      	uxth	r1, r3
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2256      	movs	r2, #86	@ 0x56
 8003dfe:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2256      	movs	r2, #86	@ 0x56
 8003e04:	5a9b      	ldrh	r3, [r3, r2]
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d1c8      	bne.n	8003d9e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	68f8      	ldr	r0, [r7, #12]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	9300      	str	r3, [sp, #0]
 8003e14:	0013      	movs	r3, r2
 8003e16:	2200      	movs	r2, #0
 8003e18:	2140      	movs	r1, #64	@ 0x40
 8003e1a:	f000 fe89 	bl	8004b30 <UART_WaitOnFlagUntilTimeout>
 8003e1e:	1e03      	subs	r3, r0, #0
 8003e20:	d005      	beq.n	8003e2e <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2288      	movs	r2, #136	@ 0x88
 8003e26:	2120      	movs	r1, #32
 8003e28:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e006      	b.n	8003e3c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2288      	movs	r2, #136	@ 0x88
 8003e32:	2120      	movs	r1, #32
 8003e34:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8003e36:	2300      	movs	r3, #0
 8003e38:	e000      	b.n	8003e3c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8003e3a:	2302      	movs	r3, #2
  }
}
 8003e3c:	0018      	movs	r0, r3
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b008      	add	sp, #32
 8003e42:	bd80      	pop	{r7, pc}

08003e44 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	1dbb      	adds	r3, r7, #6
 8003e50:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	228c      	movs	r2, #140	@ 0x8c
 8003e56:	589b      	ldr	r3, [r3, r2]
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d145      	bne.n	8003ee8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d003      	beq.n	8003e6a <HAL_UART_Receive_IT+0x26>
 8003e62:	1dbb      	adds	r3, r7, #6
 8003e64:	881b      	ldrh	r3, [r3, #0]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d101      	bne.n	8003e6e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e03d      	b.n	8003eea <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689a      	ldr	r2, [r3, #8]
 8003e72:	2380      	movs	r3, #128	@ 0x80
 8003e74:	015b      	lsls	r3, r3, #5
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d109      	bne.n	8003e8e <HAL_UART_Receive_IT+0x4a>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d105      	bne.n	8003e8e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2201      	movs	r2, #1
 8003e86:	4013      	ands	r3, r2
 8003e88:	d001      	beq.n	8003e8e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e02d      	b.n	8003eea <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	2380      	movs	r3, #128	@ 0x80
 8003e9c:	041b      	lsls	r3, r3, #16
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	d019      	beq.n	8003ed6 <HAL_UART_Receive_IT+0x92>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003ea2:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea6:	613b      	str	r3, [r7, #16]
  return(result);
 8003ea8:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003eaa:	61fb      	str	r3, [r7, #28]
 8003eac:	2301      	movs	r3, #1
 8003eae:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f383 8810 	msr	PRIMASK, r3
}
 8003eb6:	46c0      	nop			@ (mov r8, r8)
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2180      	movs	r1, #128	@ 0x80
 8003ec4:	04c9      	lsls	r1, r1, #19
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	f383 8810 	msr	PRIMASK, r3
}
 8003ed4:	46c0      	nop			@ (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ed6:	1dbb      	adds	r3, r7, #6
 8003ed8:	881a      	ldrh	r2, [r3, #0]
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	0018      	movs	r0, r3
 8003ee0:	f000 fe90 	bl	8004c04 <UART_Start_Receive_IT>
 8003ee4:	0003      	movs	r3, r0
 8003ee6:	e000      	b.n	8003eea <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003ee8:	2302      	movs	r3, #2
  }
}
 8003eea:	0018      	movs	r0, r3
 8003eec:	46bd      	mov	sp, r7
 8003eee:	b008      	add	sp, #32
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ef4:	b5b0      	push	{r4, r5, r7, lr}
 8003ef6:	b0aa      	sub	sp, #168	@ 0xa8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	69db      	ldr	r3, [r3, #28]
 8003f02:	22a4      	movs	r2, #164	@ 0xa4
 8003f04:	18b9      	adds	r1, r7, r2
 8003f06:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	20a0      	movs	r0, #160	@ 0xa0
 8003f10:	1839      	adds	r1, r7, r0
 8003f12:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	249c      	movs	r4, #156	@ 0x9c
 8003f1c:	1939      	adds	r1, r7, r4
 8003f1e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f20:	0011      	movs	r1, r2
 8003f22:	18bb      	adds	r3, r7, r2
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4aa2      	ldr	r2, [pc, #648]	@ (80041b0 <HAL_UART_IRQHandler+0x2bc>)
 8003f28:	4013      	ands	r3, r2
 8003f2a:	2298      	movs	r2, #152	@ 0x98
 8003f2c:	18bd      	adds	r5, r7, r2
 8003f2e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003f30:	18bb      	adds	r3, r7, r2
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11a      	bne.n	8003f6e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f38:	187b      	adds	r3, r7, r1
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	2220      	movs	r2, #32
 8003f3e:	4013      	ands	r3, r2
 8003f40:	d015      	beq.n	8003f6e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f42:	183b      	adds	r3, r7, r0
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	2220      	movs	r2, #32
 8003f48:	4013      	ands	r3, r2
 8003f4a:	d105      	bne.n	8003f58 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f4c:	193b      	adds	r3, r7, r4
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	2380      	movs	r3, #128	@ 0x80
 8003f52:	055b      	lsls	r3, r3, #21
 8003f54:	4013      	ands	r3, r2
 8003f56:	d00a      	beq.n	8003f6e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d100      	bne.n	8003f62 <HAL_UART_IRQHandler+0x6e>
 8003f60:	e2dc      	b.n	800451c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003f66:	687a      	ldr	r2, [r7, #4]
 8003f68:	0010      	movs	r0, r2
 8003f6a:	4798      	blx	r3
      }
      return;
 8003f6c:	e2d6      	b.n	800451c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003f6e:	2398      	movs	r3, #152	@ 0x98
 8003f70:	18fb      	adds	r3, r7, r3
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d100      	bne.n	8003f7a <HAL_UART_IRQHandler+0x86>
 8003f78:	e122      	b.n	80041c0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003f7a:	239c      	movs	r3, #156	@ 0x9c
 8003f7c:	18fb      	adds	r3, r7, r3
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a8c      	ldr	r2, [pc, #560]	@ (80041b4 <HAL_UART_IRQHandler+0x2c0>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	d106      	bne.n	8003f94 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003f86:	23a0      	movs	r3, #160	@ 0xa0
 8003f88:	18fb      	adds	r3, r7, r3
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a8a      	ldr	r2, [pc, #552]	@ (80041b8 <HAL_UART_IRQHandler+0x2c4>)
 8003f8e:	4013      	ands	r3, r2
 8003f90:	d100      	bne.n	8003f94 <HAL_UART_IRQHandler+0xa0>
 8003f92:	e115      	b.n	80041c0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f94:	23a4      	movs	r3, #164	@ 0xa4
 8003f96:	18fb      	adds	r3, r7, r3
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	d012      	beq.n	8003fc6 <HAL_UART_IRQHandler+0xd2>
 8003fa0:	23a0      	movs	r3, #160	@ 0xa0
 8003fa2:	18fb      	adds	r3, r7, r3
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	2380      	movs	r3, #128	@ 0x80
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	4013      	ands	r3, r2
 8003fac:	d00b      	beq.n	8003fc6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2290      	movs	r2, #144	@ 0x90
 8003fba:	589b      	ldr	r3, [r3, r2]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2190      	movs	r1, #144	@ 0x90
 8003fc4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003fc6:	23a4      	movs	r3, #164	@ 0xa4
 8003fc8:	18fb      	adds	r3, r7, r3
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2202      	movs	r2, #2
 8003fce:	4013      	ands	r3, r2
 8003fd0:	d011      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x102>
 8003fd2:	239c      	movs	r3, #156	@ 0x9c
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	4013      	ands	r3, r2
 8003fdc:	d00b      	beq.n	8003ff6 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2290      	movs	r2, #144	@ 0x90
 8003fea:	589b      	ldr	r3, [r3, r2]
 8003fec:	2204      	movs	r2, #4
 8003fee:	431a      	orrs	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2190      	movs	r1, #144	@ 0x90
 8003ff4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ff6:	23a4      	movs	r3, #164	@ 0xa4
 8003ff8:	18fb      	adds	r3, r7, r3
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2204      	movs	r2, #4
 8003ffe:	4013      	ands	r3, r2
 8004000:	d011      	beq.n	8004026 <HAL_UART_IRQHandler+0x132>
 8004002:	239c      	movs	r3, #156	@ 0x9c
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2201      	movs	r2, #1
 800400a:	4013      	ands	r3, r2
 800400c:	d00b      	beq.n	8004026 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2204      	movs	r2, #4
 8004014:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2290      	movs	r2, #144	@ 0x90
 800401a:	589b      	ldr	r3, [r3, r2]
 800401c:	2202      	movs	r2, #2
 800401e:	431a      	orrs	r2, r3
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2190      	movs	r1, #144	@ 0x90
 8004024:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004026:	23a4      	movs	r3, #164	@ 0xa4
 8004028:	18fb      	adds	r3, r7, r3
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2208      	movs	r2, #8
 800402e:	4013      	ands	r3, r2
 8004030:	d017      	beq.n	8004062 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004032:	23a0      	movs	r3, #160	@ 0xa0
 8004034:	18fb      	adds	r3, r7, r3
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	2220      	movs	r2, #32
 800403a:	4013      	ands	r3, r2
 800403c:	d105      	bne.n	800404a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800403e:	239c      	movs	r3, #156	@ 0x9c
 8004040:	18fb      	adds	r3, r7, r3
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a5b      	ldr	r2, [pc, #364]	@ (80041b4 <HAL_UART_IRQHandler+0x2c0>)
 8004046:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004048:	d00b      	beq.n	8004062 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2208      	movs	r2, #8
 8004050:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2290      	movs	r2, #144	@ 0x90
 8004056:	589b      	ldr	r3, [r3, r2]
 8004058:	2208      	movs	r2, #8
 800405a:	431a      	orrs	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2190      	movs	r1, #144	@ 0x90
 8004060:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004062:	23a4      	movs	r3, #164	@ 0xa4
 8004064:	18fb      	adds	r3, r7, r3
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	2380      	movs	r3, #128	@ 0x80
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	4013      	ands	r3, r2
 800406e:	d013      	beq.n	8004098 <HAL_UART_IRQHandler+0x1a4>
 8004070:	23a0      	movs	r3, #160	@ 0xa0
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	2380      	movs	r3, #128	@ 0x80
 8004078:	04db      	lsls	r3, r3, #19
 800407a:	4013      	ands	r3, r2
 800407c:	d00c      	beq.n	8004098 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	2280      	movs	r2, #128	@ 0x80
 8004084:	0112      	lsls	r2, r2, #4
 8004086:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2290      	movs	r2, #144	@ 0x90
 800408c:	589b      	ldr	r3, [r3, r2]
 800408e:	2220      	movs	r2, #32
 8004090:	431a      	orrs	r2, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2190      	movs	r1, #144	@ 0x90
 8004096:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2290      	movs	r2, #144	@ 0x90
 800409c:	589b      	ldr	r3, [r3, r2]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d100      	bne.n	80040a4 <HAL_UART_IRQHandler+0x1b0>
 80040a2:	e23d      	b.n	8004520 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80040a4:	23a4      	movs	r3, #164	@ 0xa4
 80040a6:	18fb      	adds	r3, r7, r3
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2220      	movs	r2, #32
 80040ac:	4013      	ands	r3, r2
 80040ae:	d015      	beq.n	80040dc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80040b0:	23a0      	movs	r3, #160	@ 0xa0
 80040b2:	18fb      	adds	r3, r7, r3
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2220      	movs	r2, #32
 80040b8:	4013      	ands	r3, r2
 80040ba:	d106      	bne.n	80040ca <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80040bc:	239c      	movs	r3, #156	@ 0x9c
 80040be:	18fb      	adds	r3, r7, r3
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	2380      	movs	r3, #128	@ 0x80
 80040c4:	055b      	lsls	r3, r3, #21
 80040c6:	4013      	ands	r3, r2
 80040c8:	d008      	beq.n	80040dc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	0010      	movs	r0, r2
 80040da:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2290      	movs	r2, #144	@ 0x90
 80040e0:	589b      	ldr	r3, [r3, r2]
 80040e2:	2194      	movs	r1, #148	@ 0x94
 80040e4:	187a      	adds	r2, r7, r1
 80040e6:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	2240      	movs	r2, #64	@ 0x40
 80040f0:	4013      	ands	r3, r2
 80040f2:	2b40      	cmp	r3, #64	@ 0x40
 80040f4:	d004      	beq.n	8004100 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2228      	movs	r2, #40	@ 0x28
 80040fc:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040fe:	d04c      	beq.n	800419a <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	0018      	movs	r0, r3
 8004104:	f000 fea2 	bl	8004e4c <UART_EndRxTransfer>

#if defined(HAL_DMA_MODULE_ENABLED)
        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	2240      	movs	r2, #64	@ 0x40
 8004110:	4013      	ands	r3, r2
 8004112:	2b40      	cmp	r3, #64	@ 0x40
 8004114:	d13c      	bne.n	8004190 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004116:	f3ef 8310 	mrs	r3, PRIMASK
 800411a:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800411c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800411e:	2090      	movs	r0, #144	@ 0x90
 8004120:	183a      	adds	r2, r7, r0
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	2301      	movs	r3, #1
 8004126:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004128:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800412a:	f383 8810 	msr	PRIMASK, r3
}
 800412e:	46c0      	nop			@ (mov r8, r8)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	689a      	ldr	r2, [r3, #8]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2140      	movs	r1, #64	@ 0x40
 800413c:	438a      	bics	r2, r1
 800413e:	609a      	str	r2, [r3, #8]
 8004140:	183b      	adds	r3, r7, r0
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004146:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004148:	f383 8810 	msr	PRIMASK, r3
}
 800414c:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2280      	movs	r2, #128	@ 0x80
 8004152:	589b      	ldr	r3, [r3, r2]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d016      	beq.n	8004186 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2280      	movs	r2, #128	@ 0x80
 800415c:	589b      	ldr	r3, [r3, r2]
 800415e:	4a17      	ldr	r2, [pc, #92]	@ (80041bc <HAL_UART_IRQHandler+0x2c8>)
 8004160:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2280      	movs	r2, #128	@ 0x80
 8004166:	589b      	ldr	r3, [r3, r2]
 8004168:	0018      	movs	r0, r3
 800416a:	f7fe fdc9 	bl	8002d00 <HAL_DMA_Abort_IT>
 800416e:	1e03      	subs	r3, r0, #0
 8004170:	d01c      	beq.n	80041ac <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2280      	movs	r2, #128	@ 0x80
 8004176:	589b      	ldr	r3, [r3, r2]
 8004178:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	2180      	movs	r1, #128	@ 0x80
 800417e:	5852      	ldr	r2, [r2, r1]
 8004180:	0010      	movs	r0, r2
 8004182:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004184:	e012      	b.n	80041ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	0018      	movs	r0, r3
 800418a:	f000 f9e1 	bl	8004550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800418e:	e00d      	b.n	80041ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	0018      	movs	r0, r3
 8004194:	f000 f9dc 	bl	8004550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004198:	e008      	b.n	80041ac <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	0018      	movs	r0, r3
 800419e:	f000 f9d7 	bl	8004550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2290      	movs	r2, #144	@ 0x90
 80041a6:	2100      	movs	r1, #0
 80041a8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80041aa:	e1b9      	b.n	8004520 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ac:	46c0      	nop			@ (mov r8, r8)
    return;
 80041ae:	e1b7      	b.n	8004520 <HAL_UART_IRQHandler+0x62c>
 80041b0:	0000080f 	.word	0x0000080f
 80041b4:	10000001 	.word	0x10000001
 80041b8:	04000120 	.word	0x04000120
 80041bc:	08004f19 	.word	0x08004f19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d000      	beq.n	80041ca <HAL_UART_IRQHandler+0x2d6>
 80041c8:	e13e      	b.n	8004448 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041ca:	23a4      	movs	r3, #164	@ 0xa4
 80041cc:	18fb      	adds	r3, r7, r3
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	2210      	movs	r2, #16
 80041d2:	4013      	ands	r3, r2
 80041d4:	d100      	bne.n	80041d8 <HAL_UART_IRQHandler+0x2e4>
 80041d6:	e137      	b.n	8004448 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041d8:	23a0      	movs	r3, #160	@ 0xa0
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	2210      	movs	r2, #16
 80041e0:	4013      	ands	r3, r2
 80041e2:	d100      	bne.n	80041e6 <HAL_UART_IRQHandler+0x2f2>
 80041e4:	e130      	b.n	8004448 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	2210      	movs	r2, #16
 80041ec:	621a      	str	r2, [r3, #32]

#if defined(HAL_DMA_MODULE_ENABLED)
    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2240      	movs	r2, #64	@ 0x40
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b40      	cmp	r3, #64	@ 0x40
 80041fa:	d000      	beq.n	80041fe <HAL_UART_IRQHandler+0x30a>
 80041fc:	e0a4      	b.n	8004348 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2280      	movs	r2, #128	@ 0x80
 8004202:	589b      	ldr	r3, [r3, r2]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	685a      	ldr	r2, [r3, #4]
 8004208:	217e      	movs	r1, #126	@ 0x7e
 800420a:	187b      	adds	r3, r7, r1
 800420c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800420e:	187b      	adds	r3, r7, r1
 8004210:	881b      	ldrh	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d100      	bne.n	8004218 <HAL_UART_IRQHandler+0x324>
 8004216:	e185      	b.n	8004524 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	225c      	movs	r2, #92	@ 0x5c
 800421c:	5a9b      	ldrh	r3, [r3, r2]
 800421e:	187a      	adds	r2, r7, r1
 8004220:	8812      	ldrh	r2, [r2, #0]
 8004222:	429a      	cmp	r2, r3
 8004224:	d300      	bcc.n	8004228 <HAL_UART_IRQHandler+0x334>
 8004226:	e17d      	b.n	8004524 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	187a      	adds	r2, r7, r1
 800422c:	215e      	movs	r1, #94	@ 0x5e
 800422e:	8812      	ldrh	r2, [r2, #0]
 8004230:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2280      	movs	r2, #128	@ 0x80
 8004236:	589b      	ldr	r3, [r3, r2]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	2220      	movs	r2, #32
 800423e:	4013      	ands	r3, r2
 8004240:	d170      	bne.n	8004324 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004242:	f3ef 8310 	mrs	r3, PRIMASK
 8004246:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8004248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800424a:	67bb      	str	r3, [r7, #120]	@ 0x78
 800424c:	2301      	movs	r3, #1
 800424e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004250:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004252:	f383 8810 	msr	PRIMASK, r3
}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	49b4      	ldr	r1, [pc, #720]	@ (8004534 <HAL_UART_IRQHandler+0x640>)
 8004264:	400a      	ands	r2, r1
 8004266:	601a      	str	r2, [r3, #0]
 8004268:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800426a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800426c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800426e:	f383 8810 	msr	PRIMASK, r3
}
 8004272:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004274:	f3ef 8310 	mrs	r3, PRIMASK
 8004278:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800427a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427c:	677b      	str	r3, [r7, #116]	@ 0x74
 800427e:	2301      	movs	r3, #1
 8004280:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004282:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004284:	f383 8810 	msr	PRIMASK, r3
}
 8004288:	46c0      	nop			@ (mov r8, r8)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2101      	movs	r1, #1
 8004296:	438a      	bics	r2, r1
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800429c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80042a0:	f383 8810 	msr	PRIMASK, r3
}
 80042a4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042a6:	f3ef 8310 	mrs	r3, PRIMASK
 80042aa:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80042ac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80042b0:	2301      	movs	r3, #1
 80042b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042b6:	f383 8810 	msr	PRIMASK, r3
}
 80042ba:	46c0      	nop			@ (mov r8, r8)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2140      	movs	r1, #64	@ 0x40
 80042c8:	438a      	bics	r2, r1
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80042ce:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042d2:	f383 8810 	msr	PRIMASK, r3
}
 80042d6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	228c      	movs	r2, #140	@ 0x8c
 80042dc:	2120      	movs	r1, #32
 80042de:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80042e6:	f3ef 8310 	mrs	r3, PRIMASK
 80042ea:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80042ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042f0:	2301      	movs	r3, #1
 80042f2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80042f6:	f383 8810 	msr	PRIMASK, r3
}
 80042fa:	46c0      	nop			@ (mov r8, r8)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2110      	movs	r1, #16
 8004308:	438a      	bics	r2, r1
 800430a:	601a      	str	r2, [r3, #0]
 800430c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800430e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004310:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004312:	f383 8810 	msr	PRIMASK, r3
}
 8004316:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2280      	movs	r2, #128	@ 0x80
 800431c:	589b      	ldr	r3, [r3, r2]
 800431e:	0018      	movs	r0, r3
 8004320:	f7fe fc8c 	bl	8002c3c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	225c      	movs	r2, #92	@ 0x5c
 800432e:	5a9a      	ldrh	r2, [r3, r2]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	215e      	movs	r1, #94	@ 0x5e
 8004334:	5a5b      	ldrh	r3, [r3, r1]
 8004336:	b29b      	uxth	r3, r3
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	b29a      	uxth	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	0011      	movs	r1, r2
 8004340:	0018      	movs	r0, r3
 8004342:	f000 f90d 	bl	8004560 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004346:	e0ed      	b.n	8004524 <HAL_UART_IRQHandler+0x630>
    {
#endif /* HAL_DMA_MODULE_ENABLED */
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	225c      	movs	r2, #92	@ 0x5c
 800434c:	5a99      	ldrh	r1, [r3, r2]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	225e      	movs	r2, #94	@ 0x5e
 8004352:	5a9b      	ldrh	r3, [r3, r2]
 8004354:	b29a      	uxth	r2, r3
 8004356:	208e      	movs	r0, #142	@ 0x8e
 8004358:	183b      	adds	r3, r7, r0
 800435a:	1a8a      	subs	r2, r1, r2
 800435c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	225e      	movs	r2, #94	@ 0x5e
 8004362:	5a9b      	ldrh	r3, [r3, r2]
 8004364:	b29b      	uxth	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d100      	bne.n	800436c <HAL_UART_IRQHandler+0x478>
 800436a:	e0dd      	b.n	8004528 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 800436c:	183b      	adds	r3, r7, r0
 800436e:	881b      	ldrh	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d100      	bne.n	8004376 <HAL_UART_IRQHandler+0x482>
 8004374:	e0d8      	b.n	8004528 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004376:	f3ef 8310 	mrs	r3, PRIMASK
 800437a:	60fb      	str	r3, [r7, #12]
  return(result);
 800437c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800437e:	2488      	movs	r4, #136	@ 0x88
 8004380:	193a      	adds	r2, r7, r4
 8004382:	6013      	str	r3, [r2, #0]
 8004384:	2301      	movs	r3, #1
 8004386:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f383 8810 	msr	PRIMASK, r3
}
 800438e:	46c0      	nop			@ (mov r8, r8)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4967      	ldr	r1, [pc, #412]	@ (8004538 <HAL_UART_IRQHandler+0x644>)
 800439c:	400a      	ands	r2, r1
 800439e:	601a      	str	r2, [r3, #0]
 80043a0:	193b      	adds	r3, r7, r4
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f383 8810 	msr	PRIMASK, r3
}
 80043ac:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043ae:	f3ef 8310 	mrs	r3, PRIMASK
 80043b2:	61bb      	str	r3, [r7, #24]
  return(result);
 80043b4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043b6:	2484      	movs	r4, #132	@ 0x84
 80043b8:	193a      	adds	r2, r7, r4
 80043ba:	6013      	str	r3, [r2, #0]
 80043bc:	2301      	movs	r3, #1
 80043be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	f383 8810 	msr	PRIMASK, r3
}
 80043c6:	46c0      	nop			@ (mov r8, r8)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	495a      	ldr	r1, [pc, #360]	@ (800453c <HAL_UART_IRQHandler+0x648>)
 80043d4:	400a      	ands	r2, r1
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	193b      	adds	r3, r7, r4
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043de:	6a3b      	ldr	r3, [r7, #32]
 80043e0:	f383 8810 	msr	PRIMASK, r3
}
 80043e4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	228c      	movs	r2, #140	@ 0x8c
 80043ea:	2120      	movs	r1, #32
 80043ec:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80043fa:	f3ef 8310 	mrs	r3, PRIMASK
 80043fe:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004402:	2480      	movs	r4, #128	@ 0x80
 8004404:	193a      	adds	r2, r7, r4
 8004406:	6013      	str	r3, [r2, #0]
 8004408:	2301      	movs	r3, #1
 800440a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800440c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800440e:	f383 8810 	msr	PRIMASK, r3
}
 8004412:	46c0      	nop			@ (mov r8, r8)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2110      	movs	r1, #16
 8004420:	438a      	bics	r2, r1
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	193b      	adds	r3, r7, r4
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800442c:	f383 8810 	msr	PRIMASK, r3
}
 8004430:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2202      	movs	r2, #2
 8004436:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004438:	183b      	adds	r3, r7, r0
 800443a:	881a      	ldrh	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	0011      	movs	r1, r2
 8004440:	0018      	movs	r0, r3
 8004442:	f000 f88d 	bl	8004560 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004446:	e06f      	b.n	8004528 <HAL_UART_IRQHandler+0x634>
    }
#endif /* HAL_DMA_MODULE_ENABLED */
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004448:	23a4      	movs	r3, #164	@ 0xa4
 800444a:	18fb      	adds	r3, r7, r3
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	2380      	movs	r3, #128	@ 0x80
 8004450:	035b      	lsls	r3, r3, #13
 8004452:	4013      	ands	r3, r2
 8004454:	d010      	beq.n	8004478 <HAL_UART_IRQHandler+0x584>
 8004456:	239c      	movs	r3, #156	@ 0x9c
 8004458:	18fb      	adds	r3, r7, r3
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	2380      	movs	r3, #128	@ 0x80
 800445e:	03db      	lsls	r3, r3, #15
 8004460:	4013      	ands	r3, r2
 8004462:	d009      	beq.n	8004478 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2280      	movs	r2, #128	@ 0x80
 800446a:	0352      	lsls	r2, r2, #13
 800446c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	0018      	movs	r0, r3
 8004472:	f001 fa89 	bl	8005988 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004476:	e05a      	b.n	800452e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004478:	23a4      	movs	r3, #164	@ 0xa4
 800447a:	18fb      	adds	r3, r7, r3
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2280      	movs	r2, #128	@ 0x80
 8004480:	4013      	ands	r3, r2
 8004482:	d016      	beq.n	80044b2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004484:	23a0      	movs	r3, #160	@ 0xa0
 8004486:	18fb      	adds	r3, r7, r3
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2280      	movs	r2, #128	@ 0x80
 800448c:	4013      	ands	r3, r2
 800448e:	d106      	bne.n	800449e <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004490:	239c      	movs	r3, #156	@ 0x9c
 8004492:	18fb      	adds	r3, r7, r3
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	2380      	movs	r3, #128	@ 0x80
 8004498:	041b      	lsls	r3, r3, #16
 800449a:	4013      	ands	r3, r2
 800449c:	d009      	beq.n	80044b2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d042      	beq.n	800452c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	0010      	movs	r0, r2
 80044ae:	4798      	blx	r3
    }
    return;
 80044b0:	e03c      	b.n	800452c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044b2:	23a4      	movs	r3, #164	@ 0xa4
 80044b4:	18fb      	adds	r3, r7, r3
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	2240      	movs	r2, #64	@ 0x40
 80044ba:	4013      	ands	r3, r2
 80044bc:	d00a      	beq.n	80044d4 <HAL_UART_IRQHandler+0x5e0>
 80044be:	23a0      	movs	r3, #160	@ 0xa0
 80044c0:	18fb      	adds	r3, r7, r3
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2240      	movs	r2, #64	@ 0x40
 80044c6:	4013      	ands	r3, r2
 80044c8:	d004      	beq.n	80044d4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0018      	movs	r0, r3
 80044ce:	f000 fd3a 	bl	8004f46 <UART_EndTransmit_IT>
    return;
 80044d2:	e02c      	b.n	800452e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80044d4:	23a4      	movs	r3, #164	@ 0xa4
 80044d6:	18fb      	adds	r3, r7, r3
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	2380      	movs	r3, #128	@ 0x80
 80044dc:	041b      	lsls	r3, r3, #16
 80044de:	4013      	ands	r3, r2
 80044e0:	d00b      	beq.n	80044fa <HAL_UART_IRQHandler+0x606>
 80044e2:	23a0      	movs	r3, #160	@ 0xa0
 80044e4:	18fb      	adds	r3, r7, r3
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	2380      	movs	r3, #128	@ 0x80
 80044ea:	05db      	lsls	r3, r3, #23
 80044ec:	4013      	ands	r3, r2
 80044ee:	d004      	beq.n	80044fa <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	0018      	movs	r0, r3
 80044f4:	f001 fa58 	bl	80059a8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80044f8:	e019      	b.n	800452e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80044fa:	23a4      	movs	r3, #164	@ 0xa4
 80044fc:	18fb      	adds	r3, r7, r3
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	2380      	movs	r3, #128	@ 0x80
 8004502:	045b      	lsls	r3, r3, #17
 8004504:	4013      	ands	r3, r2
 8004506:	d012      	beq.n	800452e <HAL_UART_IRQHandler+0x63a>
 8004508:	23a0      	movs	r3, #160	@ 0xa0
 800450a:	18fb      	adds	r3, r7, r3
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	da0d      	bge.n	800452e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	0018      	movs	r0, r3
 8004516:	f001 fa3f 	bl	8005998 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800451a:	e008      	b.n	800452e <HAL_UART_IRQHandler+0x63a>
      return;
 800451c:	46c0      	nop			@ (mov r8, r8)
 800451e:	e006      	b.n	800452e <HAL_UART_IRQHandler+0x63a>
    return;
 8004520:	46c0      	nop			@ (mov r8, r8)
 8004522:	e004      	b.n	800452e <HAL_UART_IRQHandler+0x63a>
      return;
 8004524:	46c0      	nop			@ (mov r8, r8)
 8004526:	e002      	b.n	800452e <HAL_UART_IRQHandler+0x63a>
      return;
 8004528:	46c0      	nop			@ (mov r8, r8)
 800452a:	e000      	b.n	800452e <HAL_UART_IRQHandler+0x63a>
    return;
 800452c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800452e:	46bd      	mov	sp, r7
 8004530:	b02a      	add	sp, #168	@ 0xa8
 8004532:	bdb0      	pop	{r4, r5, r7, pc}
 8004534:	fffffeff 	.word	0xfffffeff
 8004538:	fffffedf 	.word	0xfffffedf
 800453c:	effffffe 	.word	0xeffffffe

08004540 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b082      	sub	sp, #8
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004548:	46c0      	nop			@ (mov r8, r8)
 800454a:	46bd      	mov	sp, r7
 800454c:	b002      	add	sp, #8
 800454e:	bd80      	pop	{r7, pc}

08004550 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b082      	sub	sp, #8
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004558:	46c0      	nop			@ (mov r8, r8)
 800455a:	46bd      	mov	sp, r7
 800455c:	b002      	add	sp, #8
 800455e:	bd80      	pop	{r7, pc}

08004560 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b082      	sub	sp, #8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	000a      	movs	r2, r1
 800456a:	1cbb      	adds	r3, r7, #2
 800456c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800456e:	46c0      	nop			@ (mov r8, r8)
 8004570:	46bd      	mov	sp, r7
 8004572:	b002      	add	sp, #8
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b088      	sub	sp, #32
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004580:	231e      	movs	r3, #30
 8004582:	18fb      	adds	r3, r7, r3
 8004584:	2200      	movs	r2, #0
 8004586:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	691b      	ldr	r3, [r3, #16]
 8004590:	431a      	orrs	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	431a      	orrs	r2, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4aab      	ldr	r2, [pc, #684]	@ (8004854 <UART_SetConfig+0x2dc>)
 80045a8:	4013      	ands	r3, r2
 80045aa:	0019      	movs	r1, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	4aa6      	ldr	r2, [pc, #664]	@ (8004858 <UART_SetConfig+0x2e0>)
 80045be:	4013      	ands	r3, r2
 80045c0:	0019      	movs	r1, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	699b      	ldr	r3, [r3, #24]
 80045d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a1b      	ldr	r3, [r3, #32]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	4a9d      	ldr	r2, [pc, #628]	@ (800485c <UART_SetConfig+0x2e4>)
 80045e6:	4013      	ands	r3, r2
 80045e8:	0019      	movs	r1, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fa:	220f      	movs	r2, #15
 80045fc:	4393      	bics	r3, r2
 80045fe:	0019      	movs	r1, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	430a      	orrs	r2, r1
 800460a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a93      	ldr	r2, [pc, #588]	@ (8004860 <UART_SetConfig+0x2e8>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d127      	bne.n	8004666 <UART_SetConfig+0xee>
 8004616:	4b93      	ldr	r3, [pc, #588]	@ (8004864 <UART_SetConfig+0x2ec>)
 8004618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461a:	2203      	movs	r2, #3
 800461c:	4013      	ands	r3, r2
 800461e:	2b03      	cmp	r3, #3
 8004620:	d017      	beq.n	8004652 <UART_SetConfig+0xda>
 8004622:	d81b      	bhi.n	800465c <UART_SetConfig+0xe4>
 8004624:	2b02      	cmp	r3, #2
 8004626:	d00a      	beq.n	800463e <UART_SetConfig+0xc6>
 8004628:	d818      	bhi.n	800465c <UART_SetConfig+0xe4>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <UART_SetConfig+0xbc>
 800462e:	2b01      	cmp	r3, #1
 8004630:	d00a      	beq.n	8004648 <UART_SetConfig+0xd0>
 8004632:	e013      	b.n	800465c <UART_SetConfig+0xe4>
 8004634:	231f      	movs	r3, #31
 8004636:	18fb      	adds	r3, r7, r3
 8004638:	2200      	movs	r2, #0
 800463a:	701a      	strb	r2, [r3, #0]
 800463c:	e021      	b.n	8004682 <UART_SetConfig+0x10a>
 800463e:	231f      	movs	r3, #31
 8004640:	18fb      	adds	r3, r7, r3
 8004642:	2202      	movs	r2, #2
 8004644:	701a      	strb	r2, [r3, #0]
 8004646:	e01c      	b.n	8004682 <UART_SetConfig+0x10a>
 8004648:	231f      	movs	r3, #31
 800464a:	18fb      	adds	r3, r7, r3
 800464c:	2204      	movs	r2, #4
 800464e:	701a      	strb	r2, [r3, #0]
 8004650:	e017      	b.n	8004682 <UART_SetConfig+0x10a>
 8004652:	231f      	movs	r3, #31
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	2208      	movs	r2, #8
 8004658:	701a      	strb	r2, [r3, #0]
 800465a:	e012      	b.n	8004682 <UART_SetConfig+0x10a>
 800465c:	231f      	movs	r3, #31
 800465e:	18fb      	adds	r3, r7, r3
 8004660:	2210      	movs	r2, #16
 8004662:	701a      	strb	r2, [r3, #0]
 8004664:	e00d      	b.n	8004682 <UART_SetConfig+0x10a>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a7f      	ldr	r2, [pc, #508]	@ (8004868 <UART_SetConfig+0x2f0>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d104      	bne.n	800467a <UART_SetConfig+0x102>
 8004670:	231f      	movs	r3, #31
 8004672:	18fb      	adds	r3, r7, r3
 8004674:	2200      	movs	r2, #0
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e003      	b.n	8004682 <UART_SetConfig+0x10a>
 800467a:	231f      	movs	r3, #31
 800467c:	18fb      	adds	r3, r7, r3
 800467e:	2210      	movs	r2, #16
 8004680:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	2380      	movs	r3, #128	@ 0x80
 8004688:	021b      	lsls	r3, r3, #8
 800468a:	429a      	cmp	r2, r3
 800468c:	d000      	beq.n	8004690 <UART_SetConfig+0x118>
 800468e:	e06f      	b.n	8004770 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 8004690:	231f      	movs	r3, #31
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b08      	cmp	r3, #8
 8004698:	d01f      	beq.n	80046da <UART_SetConfig+0x162>
 800469a:	dc22      	bgt.n	80046e2 <UART_SetConfig+0x16a>
 800469c:	2b04      	cmp	r3, #4
 800469e:	d017      	beq.n	80046d0 <UART_SetConfig+0x158>
 80046a0:	dc1f      	bgt.n	80046e2 <UART_SetConfig+0x16a>
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <UART_SetConfig+0x134>
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d005      	beq.n	80046b6 <UART_SetConfig+0x13e>
 80046aa:	e01a      	b.n	80046e2 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ac:	f7ff f9ca 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 80046b0:	0003      	movs	r3, r0
 80046b2:	61bb      	str	r3, [r7, #24]
        break;
 80046b4:	e01c      	b.n	80046f0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80046b6:	4b6b      	ldr	r3, [pc, #428]	@ (8004864 <UART_SetConfig+0x2ec>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	2207      	movs	r2, #7
 80046be:	4013      	ands	r3, r2
 80046c0:	3301      	adds	r3, #1
 80046c2:	0019      	movs	r1, r3
 80046c4:	4869      	ldr	r0, [pc, #420]	@ (800486c <UART_SetConfig+0x2f4>)
 80046c6:	f7fb fd31 	bl	800012c <__udivsi3>
 80046ca:	0003      	movs	r3, r0
 80046cc:	61bb      	str	r3, [r7, #24]
        break;
 80046ce:	e00f      	b.n	80046f0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046d0:	f7ff f96c 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 80046d4:	0003      	movs	r3, r0
 80046d6:	61bb      	str	r3, [r7, #24]
        break;
 80046d8:	e00a      	b.n	80046f0 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046da:	2380      	movs	r3, #128	@ 0x80
 80046dc:	021b      	lsls	r3, r3, #8
 80046de:	61bb      	str	r3, [r7, #24]
        break;
 80046e0:	e006      	b.n	80046f0 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80046e6:	231e      	movs	r3, #30
 80046e8:	18fb      	adds	r3, r7, r3
 80046ea:	2201      	movs	r2, #1
 80046ec:	701a      	strb	r2, [r3, #0]
        break;
 80046ee:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d100      	bne.n	80046f8 <UART_SetConfig+0x180>
 80046f6:	e097      	b.n	8004828 <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80046fc:	4b5c      	ldr	r3, [pc, #368]	@ (8004870 <UART_SetConfig+0x2f8>)
 80046fe:	0052      	lsls	r2, r2, #1
 8004700:	5ad3      	ldrh	r3, [r2, r3]
 8004702:	0019      	movs	r1, r3
 8004704:	69b8      	ldr	r0, [r7, #24]
 8004706:	f7fb fd11 	bl	800012c <__udivsi3>
 800470a:	0003      	movs	r3, r0
 800470c:	005a      	lsls	r2, r3, #1
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	085b      	lsrs	r3, r3, #1
 8004714:	18d2      	adds	r2, r2, r3
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	0019      	movs	r1, r3
 800471c:	0010      	movs	r0, r2
 800471e:	f7fb fd05 	bl	800012c <__udivsi3>
 8004722:	0003      	movs	r3, r0
 8004724:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b0f      	cmp	r3, #15
 800472a:	d91c      	bls.n	8004766 <UART_SetConfig+0x1ee>
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	2380      	movs	r3, #128	@ 0x80
 8004730:	025b      	lsls	r3, r3, #9
 8004732:	429a      	cmp	r2, r3
 8004734:	d217      	bcs.n	8004766 <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	b29a      	uxth	r2, r3
 800473a:	200e      	movs	r0, #14
 800473c:	183b      	adds	r3, r7, r0
 800473e:	210f      	movs	r1, #15
 8004740:	438a      	bics	r2, r1
 8004742:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	085b      	lsrs	r3, r3, #1
 8004748:	b29b      	uxth	r3, r3
 800474a:	2207      	movs	r2, #7
 800474c:	4013      	ands	r3, r2
 800474e:	b299      	uxth	r1, r3
 8004750:	183b      	adds	r3, r7, r0
 8004752:	183a      	adds	r2, r7, r0
 8004754:	8812      	ldrh	r2, [r2, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	183a      	adds	r2, r7, r0
 8004760:	8812      	ldrh	r2, [r2, #0]
 8004762:	60da      	str	r2, [r3, #12]
 8004764:	e060      	b.n	8004828 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004766:	231e      	movs	r3, #30
 8004768:	18fb      	adds	r3, r7, r3
 800476a:	2201      	movs	r2, #1
 800476c:	701a      	strb	r2, [r3, #0]
 800476e:	e05b      	b.n	8004828 <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004770:	231f      	movs	r3, #31
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	781b      	ldrb	r3, [r3, #0]
 8004776:	2b08      	cmp	r3, #8
 8004778:	d01f      	beq.n	80047ba <UART_SetConfig+0x242>
 800477a:	dc22      	bgt.n	80047c2 <UART_SetConfig+0x24a>
 800477c:	2b04      	cmp	r3, #4
 800477e:	d017      	beq.n	80047b0 <UART_SetConfig+0x238>
 8004780:	dc1f      	bgt.n	80047c2 <UART_SetConfig+0x24a>
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <UART_SetConfig+0x214>
 8004786:	2b02      	cmp	r3, #2
 8004788:	d005      	beq.n	8004796 <UART_SetConfig+0x21e>
 800478a:	e01a      	b.n	80047c2 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800478c:	f7ff f95a 	bl	8003a44 <HAL_RCC_GetPCLK1Freq>
 8004790:	0003      	movs	r3, r0
 8004792:	61bb      	str	r3, [r7, #24]
        break;
 8004794:	e01c      	b.n	80047d0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 8004796:	4b33      	ldr	r3, [pc, #204]	@ (8004864 <UART_SetConfig+0x2ec>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	095b      	lsrs	r3, r3, #5
 800479c:	2207      	movs	r2, #7
 800479e:	4013      	ands	r3, r2
 80047a0:	3301      	adds	r3, #1
 80047a2:	0019      	movs	r1, r3
 80047a4:	4831      	ldr	r0, [pc, #196]	@ (800486c <UART_SetConfig+0x2f4>)
 80047a6:	f7fb fcc1 	bl	800012c <__udivsi3>
 80047aa:	0003      	movs	r3, r0
 80047ac:	61bb      	str	r3, [r7, #24]
        break;
 80047ae:	e00f      	b.n	80047d0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047b0:	f7ff f8fc 	bl	80039ac <HAL_RCC_GetSysClockFreq>
 80047b4:	0003      	movs	r3, r0
 80047b6:	61bb      	str	r3, [r7, #24]
        break;
 80047b8:	e00a      	b.n	80047d0 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80047ba:	2380      	movs	r3, #128	@ 0x80
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	61bb      	str	r3, [r7, #24]
        break;
 80047c0:	e006      	b.n	80047d0 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80047c6:	231e      	movs	r3, #30
 80047c8:	18fb      	adds	r3, r7, r3
 80047ca:	2201      	movs	r2, #1
 80047cc:	701a      	strb	r2, [r3, #0]
        break;
 80047ce:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80047d0:	69bb      	ldr	r3, [r7, #24]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d028      	beq.n	8004828 <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047da:	4b25      	ldr	r3, [pc, #148]	@ (8004870 <UART_SetConfig+0x2f8>)
 80047dc:	0052      	lsls	r2, r2, #1
 80047de:	5ad3      	ldrh	r3, [r2, r3]
 80047e0:	0019      	movs	r1, r3
 80047e2:	69b8      	ldr	r0, [r7, #24]
 80047e4:	f7fb fca2 	bl	800012c <__udivsi3>
 80047e8:	0003      	movs	r3, r0
 80047ea:	001a      	movs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	085b      	lsrs	r3, r3, #1
 80047f2:	18d2      	adds	r2, r2, r3
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	0019      	movs	r1, r3
 80047fa:	0010      	movs	r0, r2
 80047fc:	f7fb fc96 	bl	800012c <__udivsi3>
 8004800:	0003      	movs	r3, r0
 8004802:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	2b0f      	cmp	r3, #15
 8004808:	d90a      	bls.n	8004820 <UART_SetConfig+0x2a8>
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	2380      	movs	r3, #128	@ 0x80
 800480e:	025b      	lsls	r3, r3, #9
 8004810:	429a      	cmp	r2, r3
 8004812:	d205      	bcs.n	8004820 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	b29a      	uxth	r2, r3
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60da      	str	r2, [r3, #12]
 800481e:	e003      	b.n	8004828 <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8004820:	231e      	movs	r3, #30
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	2201      	movs	r2, #1
 8004826:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	226a      	movs	r2, #106	@ 0x6a
 800482c:	2101      	movs	r1, #1
 800482e:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2268      	movs	r2, #104	@ 0x68
 8004834:	2101      	movs	r1, #1
 8004836:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2200      	movs	r2, #0
 800483c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004844:	231e      	movs	r3, #30
 8004846:	18fb      	adds	r3, r7, r3
 8004848:	781b      	ldrb	r3, [r3, #0]
}
 800484a:	0018      	movs	r0, r3
 800484c:	46bd      	mov	sp, r7
 800484e:	b008      	add	sp, #32
 8004850:	bd80      	pop	{r7, pc}
 8004852:	46c0      	nop			@ (mov r8, r8)
 8004854:	cfff69f3 	.word	0xcfff69f3
 8004858:	ffffcfff 	.word	0xffffcfff
 800485c:	11fff4ff 	.word	0x11fff4ff
 8004860:	40013800 	.word	0x40013800
 8004864:	40021000 	.word	0x40021000
 8004868:	40004400 	.word	0x40004400
 800486c:	02dc6c00 	.word	0x02dc6c00
 8004870:	080066ac 	.word	0x080066ac

08004874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b082      	sub	sp, #8
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004880:	2208      	movs	r2, #8
 8004882:	4013      	ands	r3, r2
 8004884:	d00b      	beq.n	800489e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	4a4a      	ldr	r2, [pc, #296]	@ (80049b8 <UART_AdvFeatureConfig+0x144>)
 800488e:	4013      	ands	r3, r2
 8004890:	0019      	movs	r1, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	430a      	orrs	r2, r1
 800489c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a2:	2201      	movs	r2, #1
 80048a4:	4013      	ands	r3, r2
 80048a6:	d00b      	beq.n	80048c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	4a43      	ldr	r2, [pc, #268]	@ (80049bc <UART_AdvFeatureConfig+0x148>)
 80048b0:	4013      	ands	r3, r2
 80048b2:	0019      	movs	r1, r3
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	430a      	orrs	r2, r1
 80048be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048c4:	2202      	movs	r2, #2
 80048c6:	4013      	ands	r3, r2
 80048c8:	d00b      	beq.n	80048e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	4a3b      	ldr	r2, [pc, #236]	@ (80049c0 <UART_AdvFeatureConfig+0x14c>)
 80048d2:	4013      	ands	r3, r2
 80048d4:	0019      	movs	r1, r3
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e6:	2204      	movs	r2, #4
 80048e8:	4013      	ands	r3, r2
 80048ea:	d00b      	beq.n	8004904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	4a34      	ldr	r2, [pc, #208]	@ (80049c4 <UART_AdvFeatureConfig+0x150>)
 80048f4:	4013      	ands	r3, r2
 80048f6:	0019      	movs	r1, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	430a      	orrs	r2, r1
 8004902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004908:	2210      	movs	r2, #16
 800490a:	4013      	ands	r3, r2
 800490c:	d00b      	beq.n	8004926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	4a2c      	ldr	r2, [pc, #176]	@ (80049c8 <UART_AdvFeatureConfig+0x154>)
 8004916:	4013      	ands	r3, r2
 8004918:	0019      	movs	r1, r3
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	430a      	orrs	r2, r1
 8004924:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800492a:	2220      	movs	r2, #32
 800492c:	4013      	ands	r3, r2
 800492e:	d00b      	beq.n	8004948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	4a25      	ldr	r2, [pc, #148]	@ (80049cc <UART_AdvFeatureConfig+0x158>)
 8004938:	4013      	ands	r3, r2
 800493a:	0019      	movs	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	430a      	orrs	r2, r1
 8004946:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800494c:	2240      	movs	r2, #64	@ 0x40
 800494e:	4013      	ands	r3, r2
 8004950:	d01d      	beq.n	800498e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	4a1d      	ldr	r2, [pc, #116]	@ (80049d0 <UART_AdvFeatureConfig+0x15c>)
 800495a:	4013      	ands	r3, r2
 800495c:	0019      	movs	r1, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	430a      	orrs	r2, r1
 8004968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800496e:	2380      	movs	r3, #128	@ 0x80
 8004970:	035b      	lsls	r3, r3, #13
 8004972:	429a      	cmp	r2, r3
 8004974:	d10b      	bne.n	800498e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	4a15      	ldr	r2, [pc, #84]	@ (80049d4 <UART_AdvFeatureConfig+0x160>)
 800497e:	4013      	ands	r3, r2
 8004980:	0019      	movs	r1, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004992:	2280      	movs	r2, #128	@ 0x80
 8004994:	4013      	ands	r3, r2
 8004996:	d00b      	beq.n	80049b0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	4a0e      	ldr	r2, [pc, #56]	@ (80049d8 <UART_AdvFeatureConfig+0x164>)
 80049a0:	4013      	ands	r3, r2
 80049a2:	0019      	movs	r1, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	430a      	orrs	r2, r1
 80049ae:	605a      	str	r2, [r3, #4]
  }
}
 80049b0:	46c0      	nop			@ (mov r8, r8)
 80049b2:	46bd      	mov	sp, r7
 80049b4:	b002      	add	sp, #8
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	ffff7fff 	.word	0xffff7fff
 80049bc:	fffdffff 	.word	0xfffdffff
 80049c0:	fffeffff 	.word	0xfffeffff
 80049c4:	fffbffff 	.word	0xfffbffff
 80049c8:	ffffefff 	.word	0xffffefff
 80049cc:	ffffdfff 	.word	0xffffdfff
 80049d0:	ffefffff 	.word	0xffefffff
 80049d4:	ff9fffff 	.word	0xff9fffff
 80049d8:	fff7ffff 	.word	0xfff7ffff

080049dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b092      	sub	sp, #72	@ 0x48
 80049e0:	af02      	add	r7, sp, #8
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2290      	movs	r2, #144	@ 0x90
 80049e8:	2100      	movs	r1, #0
 80049ea:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049ec:	f7fc fe8e 	bl	800170c <HAL_GetTick>
 80049f0:	0003      	movs	r3, r0
 80049f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2208      	movs	r2, #8
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b08      	cmp	r3, #8
 8004a00:	d12d      	bne.n	8004a5e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a04:	2280      	movs	r2, #128	@ 0x80
 8004a06:	0391      	lsls	r1, r2, #14
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4a47      	ldr	r2, [pc, #284]	@ (8004b28 <UART_CheckIdleState+0x14c>)
 8004a0c:	9200      	str	r2, [sp, #0]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f000 f88e 	bl	8004b30 <UART_WaitOnFlagUntilTimeout>
 8004a14:	1e03      	subs	r3, r0, #0
 8004a16:	d022      	beq.n	8004a5e <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a18:	f3ef 8310 	mrs	r3, PRIMASK
 8004a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8004a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004a20:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004a22:	2301      	movs	r3, #1
 8004a24:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a28:	f383 8810 	msr	PRIMASK, r3
}
 8004a2c:	46c0      	nop			@ (mov r8, r8)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	2180      	movs	r1, #128	@ 0x80
 8004a3a:	438a      	bics	r2, r1
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a44:	f383 8810 	msr	PRIMASK, r3
}
 8004a48:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2288      	movs	r2, #136	@ 0x88
 8004a4e:	2120      	movs	r1, #32
 8004a50:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2284      	movs	r2, #132	@ 0x84
 8004a56:	2100      	movs	r1, #0
 8004a58:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e060      	b.n	8004b20 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2204      	movs	r2, #4
 8004a66:	4013      	ands	r3, r2
 8004a68:	2b04      	cmp	r3, #4
 8004a6a:	d146      	bne.n	8004afa <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a6e:	2280      	movs	r2, #128	@ 0x80
 8004a70:	03d1      	lsls	r1, r2, #15
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	4a2c      	ldr	r2, [pc, #176]	@ (8004b28 <UART_CheckIdleState+0x14c>)
 8004a76:	9200      	str	r2, [sp, #0]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f000 f859 	bl	8004b30 <UART_WaitOnFlagUntilTimeout>
 8004a7e:	1e03      	subs	r3, r0, #0
 8004a80:	d03b      	beq.n	8004afa <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004a82:	f3ef 8310 	mrs	r3, PRIMASK
 8004a86:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a88:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	f383 8810 	msr	PRIMASK, r3
}
 8004a96:	46c0      	nop			@ (mov r8, r8)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4922      	ldr	r1, [pc, #136]	@ (8004b2c <UART_CheckIdleState+0x150>)
 8004aa4:	400a      	ands	r2, r1
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aaa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f383 8810 	msr	PRIMASK, r3
}
 8004ab2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004aba:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004abc:	633b      	str	r3, [r7, #48]	@ 0x30
 8004abe:	2301      	movs	r3, #1
 8004ac0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac2:	69fb      	ldr	r3, [r7, #28]
 8004ac4:	f383 8810 	msr	PRIMASK, r3
}
 8004ac8:	46c0      	nop			@ (mov r8, r8)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	689a      	ldr	r2, [r3, #8]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2101      	movs	r1, #1
 8004ad6:	438a      	bics	r2, r1
 8004ad8:	609a      	str	r2, [r3, #8]
 8004ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004adc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ade:	6a3b      	ldr	r3, [r7, #32]
 8004ae0:	f383 8810 	msr	PRIMASK, r3
}
 8004ae4:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	228c      	movs	r2, #140	@ 0x8c
 8004aea:	2120      	movs	r1, #32
 8004aec:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2284      	movs	r2, #132	@ 0x84
 8004af2:	2100      	movs	r1, #0
 8004af4:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e012      	b.n	8004b20 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2288      	movs	r2, #136	@ 0x88
 8004afe:	2120      	movs	r1, #32
 8004b00:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	228c      	movs	r2, #140	@ 0x8c
 8004b06:	2120      	movs	r1, #32
 8004b08:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2284      	movs	r2, #132	@ 0x84
 8004b1a:	2100      	movs	r1, #0
 8004b1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	0018      	movs	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	b010      	add	sp, #64	@ 0x40
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	01ffffff 	.word	0x01ffffff
 8004b2c:	fffffedf 	.word	0xfffffedf

08004b30 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	603b      	str	r3, [r7, #0]
 8004b3c:	1dfb      	adds	r3, r7, #7
 8004b3e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b40:	e04b      	b.n	8004bda <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b42:	69bb      	ldr	r3, [r7, #24]
 8004b44:	3301      	adds	r3, #1
 8004b46:	d048      	beq.n	8004bda <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b48:	f7fc fde0 	bl	800170c <HAL_GetTick>
 8004b4c:	0002      	movs	r2, r0
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	1ad3      	subs	r3, r2, r3
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d302      	bcc.n	8004b5e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004b58:	69bb      	ldr	r3, [r7, #24]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e04b      	b.n	8004bfa <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2204      	movs	r2, #4
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	d035      	beq.n	8004bda <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	2208      	movs	r2, #8
 8004b76:	4013      	ands	r3, r2
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d111      	bne.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	2208      	movs	r2, #8
 8004b82:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	0018      	movs	r0, r3
 8004b88:	f000 f960 	bl	8004e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	2290      	movs	r2, #144	@ 0x90
 8004b90:	2108      	movs	r1, #8
 8004b92:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	2284      	movs	r2, #132	@ 0x84
 8004b98:	2100      	movs	r1, #0
 8004b9a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e02c      	b.n	8004bfa <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	69da      	ldr	r2, [r3, #28]
 8004ba6:	2380      	movs	r3, #128	@ 0x80
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	401a      	ands	r2, r3
 8004bac:	2380      	movs	r3, #128	@ 0x80
 8004bae:	011b      	lsls	r3, r3, #4
 8004bb0:	429a      	cmp	r2, r3
 8004bb2:	d112      	bne.n	8004bda <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	2280      	movs	r2, #128	@ 0x80
 8004bba:	0112      	lsls	r2, r2, #4
 8004bbc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f000 f943 	bl	8004e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	2290      	movs	r2, #144	@ 0x90
 8004bca:	2120      	movs	r1, #32
 8004bcc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	2284      	movs	r2, #132	@ 0x84
 8004bd2:	2100      	movs	r1, #0
 8004bd4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004bd6:	2303      	movs	r3, #3
 8004bd8:	e00f      	b.n	8004bfa <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	68ba      	ldr	r2, [r7, #8]
 8004be2:	4013      	ands	r3, r2
 8004be4:	68ba      	ldr	r2, [r7, #8]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	425a      	negs	r2, r3
 8004bea:	4153      	adcs	r3, r2
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	001a      	movs	r2, r3
 8004bf0:	1dfb      	adds	r3, r7, #7
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d0a4      	beq.n	8004b42 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b004      	add	sp, #16
 8004c00:	bd80      	pop	{r7, pc}
	...

08004c04 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b098      	sub	sp, #96	@ 0x60
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	60f8      	str	r0, [r7, #12]
 8004c0c:	60b9      	str	r1, [r7, #8]
 8004c0e:	1dbb      	adds	r3, r7, #6
 8004c10:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	1dba      	adds	r2, r7, #6
 8004c1c:	215c      	movs	r1, #92	@ 0x5c
 8004c1e:	8812      	ldrh	r2, [r2, #0]
 8004c20:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	1dba      	adds	r2, r7, #6
 8004c26:	215e      	movs	r1, #94	@ 0x5e
 8004c28:	8812      	ldrh	r2, [r2, #0]
 8004c2a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	689a      	ldr	r2, [r3, #8]
 8004c36:	2380      	movs	r3, #128	@ 0x80
 8004c38:	015b      	lsls	r3, r3, #5
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	d10d      	bne.n	8004c5a <UART_Start_Receive_IT+0x56>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	691b      	ldr	r3, [r3, #16]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d104      	bne.n	8004c50 <UART_Start_Receive_IT+0x4c>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2260      	movs	r2, #96	@ 0x60
 8004c4a:	497b      	ldr	r1, [pc, #492]	@ (8004e38 <UART_Start_Receive_IT+0x234>)
 8004c4c:	5299      	strh	r1, [r3, r2]
 8004c4e:	e02e      	b.n	8004cae <UART_Start_Receive_IT+0xaa>
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	2260      	movs	r2, #96	@ 0x60
 8004c54:	21ff      	movs	r1, #255	@ 0xff
 8004c56:	5299      	strh	r1, [r3, r2]
 8004c58:	e029      	b.n	8004cae <UART_Start_Receive_IT+0xaa>
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d10d      	bne.n	8004c7e <UART_Start_Receive_IT+0x7a>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d104      	bne.n	8004c74 <UART_Start_Receive_IT+0x70>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2260      	movs	r2, #96	@ 0x60
 8004c6e:	21ff      	movs	r1, #255	@ 0xff
 8004c70:	5299      	strh	r1, [r3, r2]
 8004c72:	e01c      	b.n	8004cae <UART_Start_Receive_IT+0xaa>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2260      	movs	r2, #96	@ 0x60
 8004c78:	217f      	movs	r1, #127	@ 0x7f
 8004c7a:	5299      	strh	r1, [r3, r2]
 8004c7c:	e017      	b.n	8004cae <UART_Start_Receive_IT+0xaa>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689a      	ldr	r2, [r3, #8]
 8004c82:	2380      	movs	r3, #128	@ 0x80
 8004c84:	055b      	lsls	r3, r3, #21
 8004c86:	429a      	cmp	r2, r3
 8004c88:	d10d      	bne.n	8004ca6 <UART_Start_Receive_IT+0xa2>
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d104      	bne.n	8004c9c <UART_Start_Receive_IT+0x98>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2260      	movs	r2, #96	@ 0x60
 8004c96:	217f      	movs	r1, #127	@ 0x7f
 8004c98:	5299      	strh	r1, [r3, r2]
 8004c9a:	e008      	b.n	8004cae <UART_Start_Receive_IT+0xaa>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	2260      	movs	r2, #96	@ 0x60
 8004ca0:	213f      	movs	r1, #63	@ 0x3f
 8004ca2:	5299      	strh	r1, [r3, r2]
 8004ca4:	e003      	b.n	8004cae <UART_Start_Receive_IT+0xaa>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2260      	movs	r2, #96	@ 0x60
 8004caa:	2100      	movs	r1, #0
 8004cac:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2290      	movs	r2, #144	@ 0x90
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	228c      	movs	r2, #140	@ 0x8c
 8004cba:	2122      	movs	r1, #34	@ 0x22
 8004cbc:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004cbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc2:	643b      	str	r3, [r7, #64]	@ 0x40
  return(result);
 8004cc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004cc8:	2301      	movs	r3, #1
 8004cca:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cce:	f383 8810 	msr	PRIMASK, r3
}
 8004cd2:	46c0      	nop			@ (mov r8, r8)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	689a      	ldr	r2, [r3, #8]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	2101      	movs	r1, #1
 8004ce0:	430a      	orrs	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]
 8004ce4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ce8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004cea:	f383 8810 	msr	PRIMASK, r3
}
 8004cee:	46c0      	nop			@ (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004cf4:	2380      	movs	r3, #128	@ 0x80
 8004cf6:	059b      	lsls	r3, r3, #22
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d150      	bne.n	8004d9e <UART_Start_Receive_IT+0x19a>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2268      	movs	r2, #104	@ 0x68
 8004d00:	5a9b      	ldrh	r3, [r3, r2]
 8004d02:	1dba      	adds	r2, r7, #6
 8004d04:	8812      	ldrh	r2, [r2, #0]
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d349      	bcc.n	8004d9e <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	2380      	movs	r3, #128	@ 0x80
 8004d10:	015b      	lsls	r3, r3, #5
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d107      	bne.n	8004d26 <UART_Start_Receive_IT+0x122>
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d103      	bne.n	8004d26 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	4a46      	ldr	r2, [pc, #280]	@ (8004e3c <UART_Start_Receive_IT+0x238>)
 8004d22:	675a      	str	r2, [r3, #116]	@ 0x74
 8004d24:	e002      	b.n	8004d2c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4a45      	ldr	r2, [pc, #276]	@ (8004e40 <UART_Start_Receive_IT+0x23c>)
 8004d2a:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d019      	beq.n	8004d68 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004d34:	f3ef 8310 	mrs	r3, PRIMASK
 8004d38:	637b      	str	r3, [r7, #52]	@ 0x34
  return(result);
 8004d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d3c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d3e:	2301      	movs	r3, #1
 8004d40:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d44:	f383 8810 	msr	PRIMASK, r3
}
 8004d48:	46c0      	nop			@ (mov r8, r8)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681a      	ldr	r2, [r3, #0]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	2180      	movs	r1, #128	@ 0x80
 8004d56:	0049      	lsls	r1, r1, #1
 8004d58:	430a      	orrs	r2, r1
 8004d5a:	601a      	str	r2, [r3, #0]
 8004d5c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d62:	f383 8810 	msr	PRIMASK, r3
}
 8004d66:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004d68:	f3ef 8310 	mrs	r3, PRIMASK
 8004d6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8004d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004d70:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d72:	2301      	movs	r3, #1
 8004d74:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d78:	f383 8810 	msr	PRIMASK, r3
}
 8004d7c:	46c0      	nop			@ (mov r8, r8)
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689a      	ldr	r2, [r3, #8]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2180      	movs	r1, #128	@ 0x80
 8004d8a:	0549      	lsls	r1, r1, #21
 8004d8c:	430a      	orrs	r2, r1
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004d92:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	f383 8810 	msr	PRIMASK, r3
}
 8004d9a:	46c0      	nop			@ (mov r8, r8)
 8004d9c:	e047      	b.n	8004e2e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	689a      	ldr	r2, [r3, #8]
 8004da2:	2380      	movs	r3, #128	@ 0x80
 8004da4:	015b      	lsls	r3, r3, #5
 8004da6:	429a      	cmp	r2, r3
 8004da8:	d107      	bne.n	8004dba <UART_Start_Receive_IT+0x1b6>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d103      	bne.n	8004dba <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a23      	ldr	r2, [pc, #140]	@ (8004e44 <UART_Start_Receive_IT+0x240>)
 8004db6:	675a      	str	r2, [r3, #116]	@ 0x74
 8004db8:	e002      	b.n	8004dc0 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	4a22      	ldr	r2, [pc, #136]	@ (8004e48 <UART_Start_Receive_IT+0x244>)
 8004dbe:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	691b      	ldr	r3, [r3, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d019      	beq.n	8004dfc <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004dc8:	f3ef 8310 	mrs	r3, PRIMASK
 8004dcc:	61fb      	str	r3, [r7, #28]
  return(result);
 8004dce:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004dd0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	f383 8810 	msr	PRIMASK, r3
}
 8004ddc:	46c0      	nop			@ (mov r8, r8)
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	2190      	movs	r1, #144	@ 0x90
 8004dea:	0049      	lsls	r1, r1, #1
 8004dec:	430a      	orrs	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004df2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004df4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004df6:	f383 8810 	msr	PRIMASK, r3
}
 8004dfa:	e018      	b.n	8004e2e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8004e00:	613b      	str	r3, [r7, #16]
  return(result);
 8004e02:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004e04:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e06:	2301      	movs	r3, #1
 8004e08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f383 8810 	msr	PRIMASK, r3
}
 8004e10:	46c0      	nop			@ (mov r8, r8)
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2120      	movs	r1, #32
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e24:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	f383 8810 	msr	PRIMASK, r3
}
 8004e2c:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return HAL_OK;
 8004e2e:	2300      	movs	r3, #0
}
 8004e30:	0018      	movs	r0, r3
 8004e32:	46bd      	mov	sp, r7
 8004e34:	b018      	add	sp, #96	@ 0x60
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	000001ff 	.word	0x000001ff
 8004e3c:	08005641 	.word	0x08005641
 8004e40:	08005311 	.word	0x08005311
 8004e44:	08005159 	.word	0x08005159
 8004e48:	08004fa1 	.word	0x08004fa1

08004e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08e      	sub	sp, #56	@ 0x38
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e54:	f3ef 8310 	mrs	r3, PRIMASK
 8004e58:	617b      	str	r3, [r7, #20]
  return(result);
 8004e5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e5e:	2301      	movs	r3, #1
 8004e60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f383 8810 	msr	PRIMASK, r3
}
 8004e68:	46c0      	nop			@ (mov r8, r8)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4926      	ldr	r1, [pc, #152]	@ (8004f10 <UART_EndRxTransfer+0xc4>)
 8004e76:	400a      	ands	r2, r1
 8004e78:	601a      	str	r2, [r3, #0]
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	f383 8810 	msr	PRIMASK, r3
}
 8004e84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004e86:	f3ef 8310 	mrs	r3, PRIMASK
 8004e8a:	623b      	str	r3, [r7, #32]
  return(result);
 8004e8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e90:	2301      	movs	r3, #1
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e96:	f383 8810 	msr	PRIMASK, r3
}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	689a      	ldr	r2, [r3, #8]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	491b      	ldr	r1, [pc, #108]	@ (8004f14 <UART_EndRxTransfer+0xc8>)
 8004ea8:	400a      	ands	r2, r1
 8004eaa:	609a      	str	r2, [r3, #8]
 8004eac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004eae:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb2:	f383 8810 	msr	PRIMASK, r3
}
 8004eb6:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d118      	bne.n	8004ef2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004ec0:	f3ef 8310 	mrs	r3, PRIMASK
 8004ec4:	60bb      	str	r3, [r7, #8]
  return(result);
 8004ec6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004eca:	2301      	movs	r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f383 8810 	msr	PRIMASK, r3
}
 8004ed4:	46c0      	nop			@ (mov r8, r8)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2110      	movs	r1, #16
 8004ee2:	438a      	bics	r2, r1
 8004ee4:	601a      	str	r2, [r3, #0]
 8004ee6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ee8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004eea:	693b      	ldr	r3, [r7, #16]
 8004eec:	f383 8810 	msr	PRIMASK, r3
}
 8004ef0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	228c      	movs	r2, #140	@ 0x8c
 8004ef6:	2120      	movs	r1, #32
 8004ef8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004f06:	46c0      	nop			@ (mov r8, r8)
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	b00e      	add	sp, #56	@ 0x38
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	46c0      	nop			@ (mov r8, r8)
 8004f10:	fffffedf 	.word	0xfffffedf
 8004f14:	effffffe 	.word	0xeffffffe

08004f18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	225e      	movs	r2, #94	@ 0x5e
 8004f2a:	2100      	movs	r1, #0
 8004f2c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2256      	movs	r2, #86	@ 0x56
 8004f32:	2100      	movs	r1, #0
 8004f34:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f7ff fb09 	bl	8004550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f3e:	46c0      	nop			@ (mov r8, r8)
 8004f40:	46bd      	mov	sp, r7
 8004f42:	b004      	add	sp, #16
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f46:	b580      	push	{r7, lr}
 8004f48:	b086      	sub	sp, #24
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8004f4e:	f3ef 8310 	mrs	r3, PRIMASK
 8004f52:	60bb      	str	r3, [r7, #8]
  return(result);
 8004f54:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	2301      	movs	r3, #1
 8004f5a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f383 8810 	msr	PRIMASK, r3
}
 8004f62:	46c0      	nop			@ (mov r8, r8)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	681a      	ldr	r2, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	2140      	movs	r1, #64	@ 0x40
 8004f70:	438a      	bics	r2, r1
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f383 8810 	msr	PRIMASK, r3
}
 8004f7e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2288      	movs	r2, #136	@ 0x88
 8004f84:	2120      	movs	r1, #32
 8004f86:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	0018      	movs	r0, r3
 8004f92:	f7ff fad5 	bl	8004540 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f96:	46c0      	nop			@ (mov r8, r8)
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	b006      	add	sp, #24
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b094      	sub	sp, #80	@ 0x50
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004fa8:	204e      	movs	r0, #78	@ 0x4e
 8004faa:	183b      	adds	r3, r7, r0
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	2160      	movs	r1, #96	@ 0x60
 8004fb0:	5a52      	ldrh	r2, [r2, r1]
 8004fb2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	228c      	movs	r2, #140	@ 0x8c
 8004fb8:	589b      	ldr	r3, [r3, r2]
 8004fba:	2b22      	cmp	r3, #34	@ 0x22
 8004fbc:	d000      	beq.n	8004fc0 <UART_RxISR_8BIT+0x20>
 8004fbe:	e0ba      	b.n	8005136 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004fc6:	214c      	movs	r1, #76	@ 0x4c
 8004fc8:	187b      	adds	r3, r7, r1
 8004fca:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004fcc:	187b      	adds	r3, r7, r1
 8004fce:	881b      	ldrh	r3, [r3, #0]
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	183b      	adds	r3, r7, r0
 8004fd4:	881b      	ldrh	r3, [r3, #0]
 8004fd6:	b2d9      	uxtb	r1, r3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fdc:	400a      	ands	r2, r1
 8004fde:	b2d2      	uxtb	r2, r2
 8004fe0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	225e      	movs	r2, #94	@ 0x5e
 8004ff0:	5a9b      	ldrh	r3, [r3, r2]
 8004ff2:	b29b      	uxth	r3, r3
 8004ff4:	3b01      	subs	r3, #1
 8004ff6:	b299      	uxth	r1, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	225e      	movs	r2, #94	@ 0x5e
 8004ffc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	225e      	movs	r2, #94	@ 0x5e
 8005002:	5a9b      	ldrh	r3, [r3, r2]
 8005004:	b29b      	uxth	r3, r3
 8005006:	2b00      	cmp	r3, #0
 8005008:	d000      	beq.n	800500c <UART_RxISR_8BIT+0x6c>
 800500a:	e09c      	b.n	8005146 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800500c:	f3ef 8310 	mrs	r3, PRIMASK
 8005010:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005014:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005016:	2301      	movs	r3, #1
 8005018:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800501a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800501c:	f383 8810 	msr	PRIMASK, r3
}
 8005020:	46c0      	nop			@ (mov r8, r8)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4948      	ldr	r1, [pc, #288]	@ (8005150 <UART_RxISR_8BIT+0x1b0>)
 800502e:	400a      	ands	r2, r1
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005034:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005036:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005038:	f383 8810 	msr	PRIMASK, r3
}
 800503c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800503e:	f3ef 8310 	mrs	r3, PRIMASK
 8005042:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005044:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005046:	647b      	str	r3, [r7, #68]	@ 0x44
 8005048:	2301      	movs	r3, #1
 800504a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800504c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800504e:	f383 8810 	msr	PRIMASK, r3
}
 8005052:	46c0      	nop			@ (mov r8, r8)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689a      	ldr	r2, [r3, #8]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	2101      	movs	r1, #1
 8005060:	438a      	bics	r2, r1
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005066:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005068:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800506a:	f383 8810 	msr	PRIMASK, r3
}
 800506e:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	228c      	movs	r2, #140	@ 0x8c
 8005074:	2120      	movs	r1, #32
 8005076:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2200      	movs	r2, #0
 800507c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	2380      	movs	r3, #128	@ 0x80
 800508c:	041b      	lsls	r3, r3, #16
 800508e:	4013      	ands	r3, r2
 8005090:	d018      	beq.n	80050c4 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005092:	f3ef 8310 	mrs	r3, PRIMASK
 8005096:	61bb      	str	r3, [r7, #24]
  return(result);
 8005098:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800509a:	643b      	str	r3, [r7, #64]	@ 0x40
 800509c:	2301      	movs	r3, #1
 800509e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	f383 8810 	msr	PRIMASK, r3
}
 80050a6:	46c0      	nop			@ (mov r8, r8)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4928      	ldr	r1, [pc, #160]	@ (8005154 <UART_RxISR_8BIT+0x1b4>)
 80050b4:	400a      	ands	r2, r1
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80050ba:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	f383 8810 	msr	PRIMASK, r3
}
 80050c2:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d12f      	bne.n	800512c <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80050d2:	f3ef 8310 	mrs	r3, PRIMASK
 80050d6:	60fb      	str	r3, [r7, #12]
  return(result);
 80050d8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80050dc:	2301      	movs	r3, #1
 80050de:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	f383 8810 	msr	PRIMASK, r3
}
 80050e6:	46c0      	nop			@ (mov r8, r8)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2110      	movs	r1, #16
 80050f4:	438a      	bics	r2, r1
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050fa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f383 8810 	msr	PRIMASK, r3
}
 8005102:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	2210      	movs	r2, #16
 800510c:	4013      	ands	r3, r2
 800510e:	2b10      	cmp	r3, #16
 8005110:	d103      	bne.n	800511a <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2210      	movs	r2, #16
 8005118:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	225c      	movs	r2, #92	@ 0x5c
 800511e:	5a9a      	ldrh	r2, [r3, r2]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	0011      	movs	r1, r2
 8005124:	0018      	movs	r0, r3
 8005126:	f7ff fa1b 	bl	8004560 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800512a:	e00c      	b.n	8005146 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	0018      	movs	r0, r3
 8005130:	f7fc f830 	bl	8001194 <HAL_UART_RxCpltCallback>
}
 8005134:	e007      	b.n	8005146 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	699a      	ldr	r2, [r3, #24]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	2108      	movs	r1, #8
 8005142:	430a      	orrs	r2, r1
 8005144:	619a      	str	r2, [r3, #24]
}
 8005146:	46c0      	nop			@ (mov r8, r8)
 8005148:	46bd      	mov	sp, r7
 800514a:	b014      	add	sp, #80	@ 0x50
 800514c:	bd80      	pop	{r7, pc}
 800514e:	46c0      	nop			@ (mov r8, r8)
 8005150:	fffffedf 	.word	0xfffffedf
 8005154:	fbffffff 	.word	0xfbffffff

08005158 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	b094      	sub	sp, #80	@ 0x50
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005160:	204e      	movs	r0, #78	@ 0x4e
 8005162:	183b      	adds	r3, r7, r0
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	2160      	movs	r1, #96	@ 0x60
 8005168:	5a52      	ldrh	r2, [r2, r1]
 800516a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	228c      	movs	r2, #140	@ 0x8c
 8005170:	589b      	ldr	r3, [r3, r2]
 8005172:	2b22      	cmp	r3, #34	@ 0x22
 8005174:	d000      	beq.n	8005178 <UART_RxISR_16BIT+0x20>
 8005176:	e0ba      	b.n	80052ee <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800517e:	214c      	movs	r1, #76	@ 0x4c
 8005180:	187b      	adds	r3, r7, r1
 8005182:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005188:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800518a:	187b      	adds	r3, r7, r1
 800518c:	183a      	adds	r2, r7, r0
 800518e:	881b      	ldrh	r3, [r3, #0]
 8005190:	8812      	ldrh	r2, [r2, #0]
 8005192:	4013      	ands	r3, r2
 8005194:	b29a      	uxth	r2, r3
 8005196:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005198:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800519e:	1c9a      	adds	r2, r3, #2
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	225e      	movs	r2, #94	@ 0x5e
 80051a8:	5a9b      	ldrh	r3, [r3, r2]
 80051aa:	b29b      	uxth	r3, r3
 80051ac:	3b01      	subs	r3, #1
 80051ae:	b299      	uxth	r1, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	225e      	movs	r2, #94	@ 0x5e
 80051b4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	225e      	movs	r2, #94	@ 0x5e
 80051ba:	5a9b      	ldrh	r3, [r3, r2]
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d000      	beq.n	80051c4 <UART_RxISR_16BIT+0x6c>
 80051c2:	e09c      	b.n	80052fe <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051c4:	f3ef 8310 	mrs	r3, PRIMASK
 80051c8:	623b      	str	r3, [r7, #32]
  return(result);
 80051ca:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80051ce:	2301      	movs	r3, #1
 80051d0:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d4:	f383 8810 	msr	PRIMASK, r3
}
 80051d8:	46c0      	nop			@ (mov r8, r8)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681a      	ldr	r2, [r3, #0]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4948      	ldr	r1, [pc, #288]	@ (8005308 <UART_RxISR_16BIT+0x1b0>)
 80051e6:	400a      	ands	r2, r1
 80051e8:	601a      	str	r2, [r3, #0]
 80051ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f0:	f383 8810 	msr	PRIMASK, r3
}
 80051f4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80051f6:	f3ef 8310 	mrs	r3, PRIMASK
 80051fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80051fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051fe:	643b      	str	r3, [r7, #64]	@ 0x40
 8005200:	2301      	movs	r3, #1
 8005202:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005206:	f383 8810 	msr	PRIMASK, r3
}
 800520a:	46c0      	nop			@ (mov r8, r8)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689a      	ldr	r2, [r3, #8]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	2101      	movs	r1, #1
 8005218:	438a      	bics	r2, r1
 800521a:	609a      	str	r2, [r3, #8]
 800521c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800521e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005222:	f383 8810 	msr	PRIMASK, r3
}
 8005226:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	228c      	movs	r2, #140	@ 0x8c
 800522c:	2120      	movs	r1, #32
 800522e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685a      	ldr	r2, [r3, #4]
 8005242:	2380      	movs	r3, #128	@ 0x80
 8005244:	041b      	lsls	r3, r3, #16
 8005246:	4013      	ands	r3, r2
 8005248:	d018      	beq.n	800527c <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800524a:	f3ef 8310 	mrs	r3, PRIMASK
 800524e:	617b      	str	r3, [r7, #20]
  return(result);
 8005250:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005252:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005254:	2301      	movs	r3, #1
 8005256:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	f383 8810 	msr	PRIMASK, r3
}
 800525e:	46c0      	nop			@ (mov r8, r8)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681a      	ldr	r2, [r3, #0]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4928      	ldr	r1, [pc, #160]	@ (800530c <UART_RxISR_16BIT+0x1b4>)
 800526c:	400a      	ands	r2, r1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005272:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005274:	69fb      	ldr	r3, [r7, #28]
 8005276:	f383 8810 	msr	PRIMASK, r3
}
 800527a:	46c0      	nop			@ (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005280:	2b01      	cmp	r3, #1
 8005282:	d12f      	bne.n	80052e4 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800528a:	f3ef 8310 	mrs	r3, PRIMASK
 800528e:	60bb      	str	r3, [r7, #8]
  return(result);
 8005290:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005292:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005294:	2301      	movs	r3, #1
 8005296:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f383 8810 	msr	PRIMASK, r3
}
 800529e:	46c0      	nop			@ (mov r8, r8)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2110      	movs	r1, #16
 80052ac:	438a      	bics	r2, r1
 80052ae:	601a      	str	r2, [r3, #0]
 80052b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	f383 8810 	msr	PRIMASK, r3
}
 80052ba:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	2210      	movs	r2, #16
 80052c4:	4013      	ands	r3, r2
 80052c6:	2b10      	cmp	r3, #16
 80052c8:	d103      	bne.n	80052d2 <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2210      	movs	r2, #16
 80052d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	225c      	movs	r2, #92	@ 0x5c
 80052d6:	5a9a      	ldrh	r2, [r3, r2]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	0011      	movs	r1, r2
 80052dc:	0018      	movs	r0, r3
 80052de:	f7ff f93f 	bl	8004560 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80052e2:	e00c      	b.n	80052fe <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	0018      	movs	r0, r3
 80052e8:	f7fb ff54 	bl	8001194 <HAL_UART_RxCpltCallback>
}
 80052ec:	e007      	b.n	80052fe <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	699a      	ldr	r2, [r3, #24]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2108      	movs	r1, #8
 80052fa:	430a      	orrs	r2, r1
 80052fc:	619a      	str	r2, [r3, #24]
}
 80052fe:	46c0      	nop			@ (mov r8, r8)
 8005300:	46bd      	mov	sp, r7
 8005302:	b014      	add	sp, #80	@ 0x50
 8005304:	bd80      	pop	{r7, pc}
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	fffffedf 	.word	0xfffffedf
 800530c:	fbffffff 	.word	0xfbffffff

08005310 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b0a0      	sub	sp, #128	@ 0x80
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005318:	237a      	movs	r3, #122	@ 0x7a
 800531a:	18fb      	adds	r3, r7, r3
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	2160      	movs	r1, #96	@ 0x60
 8005320:	5a52      	ldrh	r2, [r2, r1]
 8005322:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	677b      	str	r3, [r7, #116]	@ 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	673b      	str	r3, [r7, #112]	@ 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	228c      	movs	r2, #140	@ 0x8c
 8005340:	589b      	ldr	r3, [r3, r2]
 8005342:	2b22      	cmp	r3, #34	@ 0x22
 8005344:	d000      	beq.n	8005348 <UART_RxISR_8BIT_FIFOEN+0x38>
 8005346:	e165      	b.n	8005614 <UART_RxISR_8BIT_FIFOEN+0x304>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005348:	236e      	movs	r3, #110	@ 0x6e
 800534a:	18fb      	adds	r3, r7, r3
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	2168      	movs	r1, #104	@ 0x68
 8005350:	5a52      	ldrh	r2, [r2, r1]
 8005352:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005354:	e10c      	b.n	8005570 <UART_RxISR_8BIT_FIFOEN+0x260>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800535c:	216c      	movs	r1, #108	@ 0x6c
 800535e:	187b      	adds	r3, r7, r1
 8005360:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005362:	187b      	adds	r3, r7, r1
 8005364:	881b      	ldrh	r3, [r3, #0]
 8005366:	b2da      	uxtb	r2, r3
 8005368:	237a      	movs	r3, #122	@ 0x7a
 800536a:	18fb      	adds	r3, r7, r3
 800536c:	881b      	ldrh	r3, [r3, #0]
 800536e:	b2d9      	uxtb	r1, r3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005374:	400a      	ands	r2, r1
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800537e:	1c5a      	adds	r2, r3, #1
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	225e      	movs	r2, #94	@ 0x5e
 8005388:	5a9b      	ldrh	r3, [r3, r2]
 800538a:	b29b      	uxth	r3, r3
 800538c:	3b01      	subs	r3, #1
 800538e:	b299      	uxth	r1, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	225e      	movs	r2, #94	@ 0x5e
 8005394:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	69db      	ldr	r3, [r3, #28]
 800539c:	67fb      	str	r3, [r7, #124]	@ 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800539e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053a0:	2207      	movs	r2, #7
 80053a2:	4013      	ands	r3, r2
 80053a4:	d049      	beq.n	800543a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80053a6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053a8:	2201      	movs	r2, #1
 80053aa:	4013      	ands	r3, r2
 80053ac:	d010      	beq.n	80053d0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80053ae:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80053b0:	2380      	movs	r3, #128	@ 0x80
 80053b2:	005b      	lsls	r3, r3, #1
 80053b4:	4013      	ands	r3, r2
 80053b6:	d00b      	beq.n	80053d0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2201      	movs	r2, #1
 80053be:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2290      	movs	r2, #144	@ 0x90
 80053c4:	589b      	ldr	r3, [r3, r2]
 80053c6:	2201      	movs	r2, #1
 80053c8:	431a      	orrs	r2, r3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2190      	movs	r1, #144	@ 0x90
 80053ce:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053d2:	2202      	movs	r2, #2
 80053d4:	4013      	ands	r3, r2
 80053d6:	d00f      	beq.n	80053f8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80053d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80053da:	2201      	movs	r2, #1
 80053dc:	4013      	ands	r3, r2
 80053de:	d00b      	beq.n	80053f8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2202      	movs	r2, #2
 80053e6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2290      	movs	r2, #144	@ 0x90
 80053ec:	589b      	ldr	r3, [r3, r2]
 80053ee:	2204      	movs	r2, #4
 80053f0:	431a      	orrs	r2, r3
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2190      	movs	r1, #144	@ 0x90
 80053f6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80053f8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80053fa:	2204      	movs	r2, #4
 80053fc:	4013      	ands	r3, r2
 80053fe:	d00f      	beq.n	8005420 <UART_RxISR_8BIT_FIFOEN+0x110>
 8005400:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005402:	2201      	movs	r2, #1
 8005404:	4013      	ands	r3, r2
 8005406:	d00b      	beq.n	8005420 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2204      	movs	r2, #4
 800540e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2290      	movs	r2, #144	@ 0x90
 8005414:	589b      	ldr	r3, [r3, r2]
 8005416:	2202      	movs	r2, #2
 8005418:	431a      	orrs	r2, r3
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2190      	movs	r1, #144	@ 0x90
 800541e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2290      	movs	r2, #144	@ 0x90
 8005424:	589b      	ldr	r3, [r3, r2]
 8005426:	2b00      	cmp	r3, #0
 8005428:	d007      	beq.n	800543a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	0018      	movs	r0, r3
 800542e:	f7ff f88f 	bl	8004550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2290      	movs	r2, #144	@ 0x90
 8005436:	2100      	movs	r1, #0
 8005438:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	225e      	movs	r2, #94	@ 0x5e
 800543e:	5a9b      	ldrh	r3, [r3, r2]
 8005440:	b29b      	uxth	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d000      	beq.n	8005448 <UART_RxISR_8BIT_FIFOEN+0x138>
 8005446:	e093      	b.n	8005570 <UART_RxISR_8BIT_FIFOEN+0x260>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005448:	f3ef 8310 	mrs	r3, PRIMASK
 800544c:	63bb      	str	r3, [r7, #56]	@ 0x38
  return(result);
 800544e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005450:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005452:	2301      	movs	r3, #1
 8005454:	63fb      	str	r3, [r7, #60]	@ 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005458:	f383 8810 	msr	PRIMASK, r3
}
 800545c:	46c0      	nop			@ (mov r8, r8)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4970      	ldr	r1, [pc, #448]	@ (800562c <UART_RxISR_8BIT_FIFOEN+0x31c>)
 800546a:	400a      	ands	r2, r1
 800546c:	601a      	str	r2, [r3, #0]
 800546e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005470:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005474:	f383 8810 	msr	PRIMASK, r3
}
 8005478:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800547a:	f3ef 8310 	mrs	r3, PRIMASK
 800547e:	647b      	str	r3, [r7, #68]	@ 0x44
  return(result);
 8005480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005482:	667b      	str	r3, [r7, #100]	@ 0x64
 8005484:	2301      	movs	r3, #1
 8005486:	64bb      	str	r3, [r7, #72]	@ 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005488:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800548a:	f383 8810 	msr	PRIMASK, r3
}
 800548e:	46c0      	nop			@ (mov r8, r8)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4965      	ldr	r1, [pc, #404]	@ (8005630 <UART_RxISR_8BIT_FIFOEN+0x320>)
 800549c:	400a      	ands	r2, r1
 800549e:	609a      	str	r2, [r3, #8]
 80054a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80054a6:	f383 8810 	msr	PRIMASK, r3
}
 80054aa:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	228c      	movs	r2, #140	@ 0x8c
 80054b0:	2120      	movs	r1, #32
 80054b2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2200      	movs	r2, #0
 80054b8:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	2380      	movs	r3, #128	@ 0x80
 80054c8:	041b      	lsls	r3, r3, #16
 80054ca:	4013      	ands	r3, r2
 80054cc:	d018      	beq.n	8005500 <UART_RxISR_8BIT_FIFOEN+0x1f0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80054ce:	f3ef 8310 	mrs	r3, PRIMASK
 80054d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 80054d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80054d6:	663b      	str	r3, [r7, #96]	@ 0x60
 80054d8:	2301      	movs	r3, #1
 80054da:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	f383 8810 	msr	PRIMASK, r3
}
 80054e2:	46c0      	nop			@ (mov r8, r8)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4951      	ldr	r1, [pc, #324]	@ (8005634 <UART_RxISR_8BIT_FIFOEN+0x324>)
 80054f0:	400a      	ands	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054f6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054fa:	f383 8810 	msr	PRIMASK, r3
}
 80054fe:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005504:	2b01      	cmp	r3, #1
 8005506:	d12f      	bne.n	8005568 <UART_RxISR_8BIT_FIFOEN+0x258>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800550e:	f3ef 8310 	mrs	r3, PRIMASK
 8005512:	623b      	str	r3, [r7, #32]
  return(result);
 8005514:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005516:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005518:	2301      	movs	r3, #1
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	f383 8810 	msr	PRIMASK, r3
}
 8005522:	46c0      	nop			@ (mov r8, r8)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2110      	movs	r1, #16
 8005530:	438a      	bics	r2, r1
 8005532:	601a      	str	r2, [r3, #0]
 8005534:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005536:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553a:	f383 8810 	msr	PRIMASK, r3
}
 800553e:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69db      	ldr	r3, [r3, #28]
 8005546:	2210      	movs	r2, #16
 8005548:	4013      	ands	r3, r2
 800554a:	2b10      	cmp	r3, #16
 800554c:	d103      	bne.n	8005556 <UART_RxISR_8BIT_FIFOEN+0x246>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2210      	movs	r2, #16
 8005554:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	225c      	movs	r2, #92	@ 0x5c
 800555a:	5a9a      	ldrh	r2, [r3, r2]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	0011      	movs	r1, r2
 8005560:	0018      	movs	r0, r3
 8005562:	f7fe fffd 	bl	8004560 <HAL_UARTEx_RxEventCallback>
 8005566:	e003      	b.n	8005570 <UART_RxISR_8BIT_FIFOEN+0x260>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	0018      	movs	r0, r3
 800556c:	f7fb fe12 	bl	8001194 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005570:	236e      	movs	r3, #110	@ 0x6e
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	881b      	ldrh	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d004      	beq.n	8005584 <UART_RxISR_8BIT_FIFOEN+0x274>
 800557a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800557c:	2220      	movs	r2, #32
 800557e:	4013      	ands	r3, r2
 8005580:	d000      	beq.n	8005584 <UART_RxISR_8BIT_FIFOEN+0x274>
 8005582:	e6e8      	b.n	8005356 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005584:	205a      	movs	r0, #90	@ 0x5a
 8005586:	183b      	adds	r3, r7, r0
 8005588:	687a      	ldr	r2, [r7, #4]
 800558a:	215e      	movs	r1, #94	@ 0x5e
 800558c:	5a52      	ldrh	r2, [r2, r1]
 800558e:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005590:	0001      	movs	r1, r0
 8005592:	187b      	adds	r3, r7, r1
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d044      	beq.n	8005624 <UART_RxISR_8BIT_FIFOEN+0x314>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	2268      	movs	r2, #104	@ 0x68
 800559e:	5a9b      	ldrh	r3, [r3, r2]
 80055a0:	187a      	adds	r2, r7, r1
 80055a2:	8812      	ldrh	r2, [r2, #0]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d23d      	bcs.n	8005624 <UART_RxISR_8BIT_FIFOEN+0x314>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055a8:	f3ef 8310 	mrs	r3, PRIMASK
 80055ac:	60bb      	str	r3, [r7, #8]
  return(result);
 80055ae:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80055b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80055b2:	2301      	movs	r3, #1
 80055b4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f383 8810 	msr	PRIMASK, r3
}
 80055bc:	46c0      	nop			@ (mov r8, r8)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	491b      	ldr	r1, [pc, #108]	@ (8005638 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80055ca:	400a      	ands	r2, r1
 80055cc:	609a      	str	r2, [r3, #8]
 80055ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055d0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f383 8810 	msr	PRIMASK, r3
}
 80055d8:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a17      	ldr	r2, [pc, #92]	@ (800563c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80055de:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80055e0:	f3ef 8310 	mrs	r3, PRIMASK
 80055e4:	617b      	str	r3, [r7, #20]
  return(result);
 80055e6:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80055e8:	653b      	str	r3, [r7, #80]	@ 0x50
 80055ea:	2301      	movs	r3, #1
 80055ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055ee:	69bb      	ldr	r3, [r7, #24]
 80055f0:	f383 8810 	msr	PRIMASK, r3
}
 80055f4:	46c0      	nop			@ (mov r8, r8)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	2120      	movs	r1, #32
 8005602:	430a      	orrs	r2, r1
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005608:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	f383 8810 	msr	PRIMASK, r3
}
 8005610:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005612:	e007      	b.n	8005624 <UART_RxISR_8BIT_FIFOEN+0x314>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699a      	ldr	r2, [r3, #24]
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2108      	movs	r1, #8
 8005620:	430a      	orrs	r2, r1
 8005622:	619a      	str	r2, [r3, #24]
}
 8005624:	46c0      	nop			@ (mov r8, r8)
 8005626:	46bd      	mov	sp, r7
 8005628:	b020      	add	sp, #128	@ 0x80
 800562a:	bd80      	pop	{r7, pc}
 800562c:	fffffeff 	.word	0xfffffeff
 8005630:	effffffe 	.word	0xeffffffe
 8005634:	fbffffff 	.word	0xfbffffff
 8005638:	efffffff 	.word	0xefffffff
 800563c:	08004fa1 	.word	0x08004fa1

08005640 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b0a2      	sub	sp, #136	@ 0x88
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005648:	2382      	movs	r3, #130	@ 0x82
 800564a:	18fb      	adds	r3, r7, r3
 800564c:	687a      	ldr	r2, [r7, #4]
 800564e:	2160      	movs	r1, #96	@ 0x60
 8005650:	5a52      	ldrh	r2, [r2, r1]
 8005652:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	2284      	movs	r2, #132	@ 0x84
 800565c:	18ba      	adds	r2, r7, r2
 800565e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	67fb      	str	r3, [r7, #124]	@ 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	228c      	movs	r2, #140	@ 0x8c
 8005674:	589b      	ldr	r3, [r3, r2]
 8005676:	2b22      	cmp	r3, #34	@ 0x22
 8005678:	d000      	beq.n	800567c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800567a:	e16f      	b.n	800595c <UART_RxISR_16BIT_FIFOEN+0x31c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800567c:	2376      	movs	r3, #118	@ 0x76
 800567e:	18fb      	adds	r3, r7, r3
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	2168      	movs	r1, #104	@ 0x68
 8005684:	5a52      	ldrh	r2, [r2, r1]
 8005686:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005688:	e114      	b.n	80058b4 <UART_RxISR_16BIT_FIFOEN+0x274>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005690:	2174      	movs	r1, #116	@ 0x74
 8005692:	187b      	adds	r3, r7, r1
 8005694:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800569a:	673b      	str	r3, [r7, #112]	@ 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800569c:	187b      	adds	r3, r7, r1
 800569e:	2282      	movs	r2, #130	@ 0x82
 80056a0:	18ba      	adds	r2, r7, r2
 80056a2:	881b      	ldrh	r3, [r3, #0]
 80056a4:	8812      	ldrh	r2, [r2, #0]
 80056a6:	4013      	ands	r3, r2
 80056a8:	b29a      	uxth	r2, r3
 80056aa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056b2:	1c9a      	adds	r2, r3, #2
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	225e      	movs	r2, #94	@ 0x5e
 80056bc:	5a9b      	ldrh	r3, [r3, r2]
 80056be:	b29b      	uxth	r3, r3
 80056c0:	3b01      	subs	r3, #1
 80056c2:	b299      	uxth	r1, r3
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	225e      	movs	r2, #94	@ 0x5e
 80056c8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69db      	ldr	r3, [r3, #28]
 80056d0:	2184      	movs	r1, #132	@ 0x84
 80056d2:	187a      	adds	r2, r7, r1
 80056d4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80056d6:	187b      	adds	r3, r7, r1
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2207      	movs	r2, #7
 80056dc:	4013      	ands	r3, r2
 80056de:	d04e      	beq.n	800577e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056e0:	187b      	adds	r3, r7, r1
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2201      	movs	r2, #1
 80056e6:	4013      	ands	r3, r2
 80056e8:	d010      	beq.n	800570c <UART_RxISR_16BIT_FIFOEN+0xcc>
 80056ea:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80056ec:	2380      	movs	r3, #128	@ 0x80
 80056ee:	005b      	lsls	r3, r3, #1
 80056f0:	4013      	ands	r3, r2
 80056f2:	d00b      	beq.n	800570c <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	2201      	movs	r2, #1
 80056fa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2290      	movs	r2, #144	@ 0x90
 8005700:	589b      	ldr	r3, [r3, r2]
 8005702:	2201      	movs	r2, #1
 8005704:	431a      	orrs	r2, r3
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2190      	movs	r1, #144	@ 0x90
 800570a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800570c:	2384      	movs	r3, #132	@ 0x84
 800570e:	18fb      	adds	r3, r7, r3
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2202      	movs	r2, #2
 8005714:	4013      	ands	r3, r2
 8005716:	d00f      	beq.n	8005738 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8005718:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800571a:	2201      	movs	r2, #1
 800571c:	4013      	ands	r3, r2
 800571e:	d00b      	beq.n	8005738 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2202      	movs	r2, #2
 8005726:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2290      	movs	r2, #144	@ 0x90
 800572c:	589b      	ldr	r3, [r3, r2]
 800572e:	2204      	movs	r2, #4
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2190      	movs	r1, #144	@ 0x90
 8005736:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005738:	2384      	movs	r3, #132	@ 0x84
 800573a:	18fb      	adds	r3, r7, r3
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2204      	movs	r2, #4
 8005740:	4013      	ands	r3, r2
 8005742:	d00f      	beq.n	8005764 <UART_RxISR_16BIT_FIFOEN+0x124>
 8005744:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005746:	2201      	movs	r2, #1
 8005748:	4013      	ands	r3, r2
 800574a:	d00b      	beq.n	8005764 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	2204      	movs	r2, #4
 8005752:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2290      	movs	r2, #144	@ 0x90
 8005758:	589b      	ldr	r3, [r3, r2]
 800575a:	2202      	movs	r2, #2
 800575c:	431a      	orrs	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2190      	movs	r1, #144	@ 0x90
 8005762:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2290      	movs	r2, #144	@ 0x90
 8005768:	589b      	ldr	r3, [r3, r2]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d007      	beq.n	800577e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	0018      	movs	r0, r3
 8005772:	f7fe feed 	bl	8004550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2290      	movs	r2, #144	@ 0x90
 800577a:	2100      	movs	r1, #0
 800577c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	225e      	movs	r2, #94	@ 0x5e
 8005782:	5a9b      	ldrh	r3, [r3, r2]
 8005784:	b29b      	uxth	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d000      	beq.n	800578c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800578a:	e093      	b.n	80058b4 <UART_RxISR_16BIT_FIFOEN+0x274>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800578c:	f3ef 8310 	mrs	r3, PRIMASK
 8005790:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8005792:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005794:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005796:	2301      	movs	r3, #1
 8005798:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800579a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800579c:	f383 8810 	msr	PRIMASK, r3
}
 80057a0:	46c0      	nop			@ (mov r8, r8)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4971      	ldr	r1, [pc, #452]	@ (8005974 <UART_RxISR_16BIT_FIFOEN+0x334>)
 80057ae:	400a      	ands	r2, r1
 80057b0:	601a      	str	r2, [r3, #0]
 80057b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057b4:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057b8:	f383 8810 	msr	PRIMASK, r3
}
 80057bc:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80057be:	f3ef 8310 	mrs	r3, PRIMASK
 80057c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 80057c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80057c8:	2301      	movs	r3, #1
 80057ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057ce:	f383 8810 	msr	PRIMASK, r3
}
 80057d2:	46c0      	nop			@ (mov r8, r8)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4966      	ldr	r1, [pc, #408]	@ (8005978 <UART_RxISR_16BIT_FIFOEN+0x338>)
 80057e0:	400a      	ands	r2, r1
 80057e2:	609a      	str	r2, [r3, #8]
 80057e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80057e6:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80057e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057ea:	f383 8810 	msr	PRIMASK, r3
}
 80057ee:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	228c      	movs	r2, #140	@ 0x8c
 80057f4:	2120      	movs	r1, #32
 80057f6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	685a      	ldr	r2, [r3, #4]
 800580a:	2380      	movs	r3, #128	@ 0x80
 800580c:	041b      	lsls	r3, r3, #16
 800580e:	4013      	ands	r3, r2
 8005810:	d018      	beq.n	8005844 <UART_RxISR_16BIT_FIFOEN+0x204>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005812:	f3ef 8310 	mrs	r3, PRIMASK
 8005816:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8005818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800581a:	667b      	str	r3, [r7, #100]	@ 0x64
 800581c:	2301      	movs	r3, #1
 800581e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005820:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005822:	f383 8810 	msr	PRIMASK, r3
}
 8005826:	46c0      	nop			@ (mov r8, r8)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4952      	ldr	r1, [pc, #328]	@ (800597c <UART_RxISR_16BIT_FIFOEN+0x33c>)
 8005834:	400a      	ands	r2, r1
 8005836:	601a      	str	r2, [r3, #0]
 8005838:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800583a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800583c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583e:	f383 8810 	msr	PRIMASK, r3
}
 8005842:	46c0      	nop			@ (mov r8, r8)
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005848:	2b01      	cmp	r3, #1
 800584a:	d12f      	bne.n	80058ac <UART_RxISR_16BIT_FIFOEN+0x26c>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	66da      	str	r2, [r3, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005852:	f3ef 8310 	mrs	r3, PRIMASK
 8005856:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8005858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585a:	663b      	str	r3, [r7, #96]	@ 0x60
 800585c:	2301      	movs	r3, #1
 800585e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005862:	f383 8810 	msr	PRIMASK, r3
}
 8005866:	46c0      	nop			@ (mov r8, r8)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	2110      	movs	r1, #16
 8005874:	438a      	bics	r2, r1
 8005876:	601a      	str	r2, [r3, #0]
 8005878:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800587a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800587c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800587e:	f383 8810 	msr	PRIMASK, r3
}
 8005882:	46c0      	nop			@ (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	69db      	ldr	r3, [r3, #28]
 800588a:	2210      	movs	r2, #16
 800588c:	4013      	ands	r3, r2
 800588e:	2b10      	cmp	r3, #16
 8005890:	d103      	bne.n	800589a <UART_RxISR_16BIT_FIFOEN+0x25a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	2210      	movs	r2, #16
 8005898:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	225c      	movs	r2, #92	@ 0x5c
 800589e:	5a9a      	ldrh	r2, [r3, r2]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	0011      	movs	r1, r2
 80058a4:	0018      	movs	r0, r3
 80058a6:	f7fe fe5b 	bl	8004560 <HAL_UARTEx_RxEventCallback>
 80058aa:	e003      	b.n	80058b4 <UART_RxISR_16BIT_FIFOEN+0x274>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	0018      	movs	r0, r3
 80058b0:	f7fb fc70 	bl	8001194 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80058b4:	2376      	movs	r3, #118	@ 0x76
 80058b6:	18fb      	adds	r3, r7, r3
 80058b8:	881b      	ldrh	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d006      	beq.n	80058cc <UART_RxISR_16BIT_FIFOEN+0x28c>
 80058be:	2384      	movs	r3, #132	@ 0x84
 80058c0:	18fb      	adds	r3, r7, r3
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2220      	movs	r2, #32
 80058c6:	4013      	ands	r3, r2
 80058c8:	d000      	beq.n	80058cc <UART_RxISR_16BIT_FIFOEN+0x28c>
 80058ca:	e6de      	b.n	800568a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80058cc:	205e      	movs	r0, #94	@ 0x5e
 80058ce:	183b      	adds	r3, r7, r0
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	215e      	movs	r1, #94	@ 0x5e
 80058d4:	5a52      	ldrh	r2, [r2, r1]
 80058d6:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80058d8:	0001      	movs	r1, r0
 80058da:	187b      	adds	r3, r7, r1
 80058dc:	881b      	ldrh	r3, [r3, #0]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d044      	beq.n	800596c <UART_RxISR_16BIT_FIFOEN+0x32c>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2268      	movs	r2, #104	@ 0x68
 80058e6:	5a9b      	ldrh	r3, [r3, r2]
 80058e8:	187a      	adds	r2, r7, r1
 80058ea:	8812      	ldrh	r2, [r2, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d23d      	bcs.n	800596c <UART_RxISR_16BIT_FIFOEN+0x32c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80058f0:	f3ef 8310 	mrs	r3, PRIMASK
 80058f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80058f6:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80058f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80058fa:	2301      	movs	r3, #1
 80058fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f383 8810 	msr	PRIMASK, r3
}
 8005904:	46c0      	nop			@ (mov r8, r8)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689a      	ldr	r2, [r3, #8]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	491b      	ldr	r1, [pc, #108]	@ (8005980 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8005912:	400a      	ands	r2, r1
 8005914:	609a      	str	r2, [r3, #8]
 8005916:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005918:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f383 8810 	msr	PRIMASK, r3
}
 8005920:	46c0      	nop			@ (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a17      	ldr	r2, [pc, #92]	@ (8005984 <UART_RxISR_16BIT_FIFOEN+0x344>)
 8005926:	675a      	str	r2, [r3, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8005928:	f3ef 8310 	mrs	r3, PRIMASK
 800592c:	61bb      	str	r3, [r7, #24]
  return(result);
 800592e:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005930:	657b      	str	r3, [r7, #84]	@ 0x54
 8005932:	2301      	movs	r3, #1
 8005934:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	f383 8810 	msr	PRIMASK, r3
}
 800593c:	46c0      	nop			@ (mov r8, r8)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	2120      	movs	r1, #32
 800594a:	430a      	orrs	r2, r1
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005950:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	f383 8810 	msr	PRIMASK, r3
}
 8005958:	46c0      	nop			@ (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800595a:	e007      	b.n	800596c <UART_RxISR_16BIT_FIFOEN+0x32c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2108      	movs	r1, #8
 8005968:	430a      	orrs	r2, r1
 800596a:	619a      	str	r2, [r3, #24]
}
 800596c:	46c0      	nop			@ (mov r8, r8)
 800596e:	46bd      	mov	sp, r7
 8005970:	b022      	add	sp, #136	@ 0x88
 8005972:	bd80      	pop	{r7, pc}
 8005974:	fffffeff 	.word	0xfffffeff
 8005978:	effffffe 	.word	0xeffffffe
 800597c:	fbffffff 	.word	0xfbffffff
 8005980:	efffffff 	.word	0xefffffff
 8005984:	08005159 	.word	0x08005159

08005988 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005990:	46c0      	nop			@ (mov r8, r8)
 8005992:	46bd      	mov	sp, r7
 8005994:	b002      	add	sp, #8
 8005996:	bd80      	pop	{r7, pc}

08005998 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80059a0:	46c0      	nop			@ (mov r8, r8)
 80059a2:	46bd      	mov	sp, r7
 80059a4:	b002      	add	sp, #8
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80059b0:	46c0      	nop			@ (mov r8, r8)
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b002      	add	sp, #8
 80059b6:	bd80      	pop	{r7, pc}

080059b8 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2284      	movs	r2, #132	@ 0x84
 80059c4:	5c9b      	ldrb	r3, [r3, r2]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d101      	bne.n	80059ce <HAL_UARTEx_EnableFifoMode+0x16>
 80059ca:	2302      	movs	r3, #2
 80059cc:	e02d      	b.n	8005a2a <HAL_UARTEx_EnableFifoMode+0x72>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2284      	movs	r2, #132	@ 0x84
 80059d2:	2101      	movs	r1, #1
 80059d4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2288      	movs	r2, #136	@ 0x88
 80059da:	2124      	movs	r1, #36	@ 0x24
 80059dc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2101      	movs	r1, #1
 80059f2:	438a      	bics	r2, r1
 80059f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2280      	movs	r2, #128	@ 0x80
 80059fa:	0592      	lsls	r2, r2, #22
 80059fc:	4313      	orrs	r3, r2
 80059fe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2280      	movs	r2, #128	@ 0x80
 8005a04:	0592      	lsls	r2, r2, #22
 8005a06:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	0018      	movs	r0, r3
 8005a14:	f000 f88e 	bl	8005b34 <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2288      	movs	r2, #136	@ 0x88
 8005a1c:	2120      	movs	r1, #32
 8005a1e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2284      	movs	r2, #132	@ 0x84
 8005a24:	2100      	movs	r1, #0
 8005a26:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005a28:	2300      	movs	r3, #0
}
 8005a2a:	0018      	movs	r0, r3
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	b004      	add	sp, #16
 8005a30:	bd80      	pop	{r7, pc}

08005a32 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a32:	b580      	push	{r7, lr}
 8005a34:	b084      	sub	sp, #16
 8005a36:	af00      	add	r7, sp, #0
 8005a38:	6078      	str	r0, [r7, #4]
 8005a3a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2284      	movs	r2, #132	@ 0x84
 8005a40:	5c9b      	ldrb	r3, [r3, r2]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d101      	bne.n	8005a4a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a46:	2302      	movs	r3, #2
 8005a48:	e02e      	b.n	8005aa8 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2284      	movs	r2, #132	@ 0x84
 8005a4e:	2101      	movs	r1, #1
 8005a50:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2288      	movs	r2, #136	@ 0x88
 8005a56:	2124      	movs	r1, #36	@ 0x24
 8005a58:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	2101      	movs	r1, #1
 8005a6e:	438a      	bics	r2, r1
 8005a70:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	00db      	lsls	r3, r3, #3
 8005a7a:	08d9      	lsrs	r1, r3, #3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	430a      	orrs	r2, r1
 8005a84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	0018      	movs	r0, r3
 8005a8a:	f000 f853 	bl	8005b34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2288      	movs	r2, #136	@ 0x88
 8005a9a:	2120      	movs	r1, #32
 8005a9c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2284      	movs	r2, #132	@ 0x84
 8005aa2:	2100      	movs	r1, #0
 8005aa4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005aa6:	2300      	movs	r3, #0
}
 8005aa8:	0018      	movs	r0, r3
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	b004      	add	sp, #16
 8005aae:	bd80      	pop	{r7, pc}

08005ab0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b084      	sub	sp, #16
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2284      	movs	r2, #132	@ 0x84
 8005abe:	5c9b      	ldrb	r3, [r3, r2]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d101      	bne.n	8005ac8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ac4:	2302      	movs	r3, #2
 8005ac6:	e02f      	b.n	8005b28 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2284      	movs	r2, #132	@ 0x84
 8005acc:	2101      	movs	r1, #1
 8005ace:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2288      	movs	r2, #136	@ 0x88
 8005ad4:	2124      	movs	r1, #36	@ 0x24
 8005ad6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	2101      	movs	r1, #1
 8005aec:	438a      	bics	r2, r1
 8005aee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	4a0e      	ldr	r2, [pc, #56]	@ (8005b30 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	0019      	movs	r1, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	430a      	orrs	r2, r1
 8005b04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	0018      	movs	r0, r3
 8005b0a:	f000 f813 	bl	8005b34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2288      	movs	r2, #136	@ 0x88
 8005b1a:	2120      	movs	r1, #32
 8005b1c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2284      	movs	r2, #132	@ 0x84
 8005b22:	2100      	movs	r1, #0
 8005b24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005b26:	2300      	movs	r3, #0
}
 8005b28:	0018      	movs	r0, r3
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	b004      	add	sp, #16
 8005b2e:	bd80      	pop	{r7, pc}
 8005b30:	f1ffffff 	.word	0xf1ffffff

08005b34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005b36:	b085      	sub	sp, #20
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d108      	bne.n	8005b56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	226a      	movs	r2, #106	@ 0x6a
 8005b48:	2101      	movs	r1, #1
 8005b4a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2268      	movs	r2, #104	@ 0x68
 8005b50:	2101      	movs	r1, #1
 8005b52:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005b54:	e043      	b.n	8005bde <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005b56:	260f      	movs	r6, #15
 8005b58:	19bb      	adds	r3, r7, r6
 8005b5a:	2208      	movs	r2, #8
 8005b5c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005b5e:	200e      	movs	r0, #14
 8005b60:	183b      	adds	r3, r7, r0
 8005b62:	2208      	movs	r2, #8
 8005b64:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	0e5b      	lsrs	r3, r3, #25
 8005b6e:	b2da      	uxtb	r2, r3
 8005b70:	240d      	movs	r4, #13
 8005b72:	193b      	adds	r3, r7, r4
 8005b74:	2107      	movs	r1, #7
 8005b76:	400a      	ands	r2, r1
 8005b78:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	689b      	ldr	r3, [r3, #8]
 8005b80:	0f5b      	lsrs	r3, r3, #29
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	250c      	movs	r5, #12
 8005b86:	197b      	adds	r3, r7, r5
 8005b88:	2107      	movs	r1, #7
 8005b8a:	400a      	ands	r2, r1
 8005b8c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005b8e:	183b      	adds	r3, r7, r0
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	197a      	adds	r2, r7, r5
 8005b94:	7812      	ldrb	r2, [r2, #0]
 8005b96:	4914      	ldr	r1, [pc, #80]	@ (8005be8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005b98:	5c8a      	ldrb	r2, [r1, r2]
 8005b9a:	435a      	muls	r2, r3
 8005b9c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005b9e:	197b      	adds	r3, r7, r5
 8005ba0:	781b      	ldrb	r3, [r3, #0]
 8005ba2:	4a12      	ldr	r2, [pc, #72]	@ (8005bec <UARTEx_SetNbDataToProcess+0xb8>)
 8005ba4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005ba6:	0019      	movs	r1, r3
 8005ba8:	f7fa fb4a 	bl	8000240 <__divsi3>
 8005bac:	0003      	movs	r3, r0
 8005bae:	b299      	uxth	r1, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	226a      	movs	r2, #106	@ 0x6a
 8005bb4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bb6:	19bb      	adds	r3, r7, r6
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	193a      	adds	r2, r7, r4
 8005bbc:	7812      	ldrb	r2, [r2, #0]
 8005bbe:	490a      	ldr	r1, [pc, #40]	@ (8005be8 <UARTEx_SetNbDataToProcess+0xb4>)
 8005bc0:	5c8a      	ldrb	r2, [r1, r2]
 8005bc2:	435a      	muls	r2, r3
 8005bc4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bc6:	193b      	adds	r3, r7, r4
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	4a08      	ldr	r2, [pc, #32]	@ (8005bec <UARTEx_SetNbDataToProcess+0xb8>)
 8005bcc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bce:	0019      	movs	r1, r3
 8005bd0:	f7fa fb36 	bl	8000240 <__divsi3>
 8005bd4:	0003      	movs	r3, r0
 8005bd6:	b299      	uxth	r1, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2268      	movs	r2, #104	@ 0x68
 8005bdc:	5299      	strh	r1, [r3, r2]
}
 8005bde:	46c0      	nop			@ (mov r8, r8)
 8005be0:	46bd      	mov	sp, r7
 8005be2:	b005      	add	sp, #20
 8005be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005be6:	46c0      	nop			@ (mov r8, r8)
 8005be8:	080066c4 	.word	0x080066c4
 8005bec:	080066cc 	.word	0x080066cc

08005bf0 <siprintf>:
 8005bf0:	b40e      	push	{r1, r2, r3}
 8005bf2:	b500      	push	{lr}
 8005bf4:	490b      	ldr	r1, [pc, #44]	@ (8005c24 <siprintf+0x34>)
 8005bf6:	b09c      	sub	sp, #112	@ 0x70
 8005bf8:	ab1d      	add	r3, sp, #116	@ 0x74
 8005bfa:	9002      	str	r0, [sp, #8]
 8005bfc:	9006      	str	r0, [sp, #24]
 8005bfe:	9107      	str	r1, [sp, #28]
 8005c00:	9104      	str	r1, [sp, #16]
 8005c02:	4809      	ldr	r0, [pc, #36]	@ (8005c28 <siprintf+0x38>)
 8005c04:	4909      	ldr	r1, [pc, #36]	@ (8005c2c <siprintf+0x3c>)
 8005c06:	cb04      	ldmia	r3!, {r2}
 8005c08:	9105      	str	r1, [sp, #20]
 8005c0a:	6800      	ldr	r0, [r0, #0]
 8005c0c:	a902      	add	r1, sp, #8
 8005c0e:	9301      	str	r3, [sp, #4]
 8005c10:	f000 f99e 	bl	8005f50 <_svfiprintf_r>
 8005c14:	2200      	movs	r2, #0
 8005c16:	9b02      	ldr	r3, [sp, #8]
 8005c18:	701a      	strb	r2, [r3, #0]
 8005c1a:	b01c      	add	sp, #112	@ 0x70
 8005c1c:	bc08      	pop	{r3}
 8005c1e:	b003      	add	sp, #12
 8005c20:	4718      	bx	r3
 8005c22:	46c0      	nop			@ (mov r8, r8)
 8005c24:	7fffffff 	.word	0x7fffffff
 8005c28:	2000000c 	.word	0x2000000c
 8005c2c:	ffff0208 	.word	0xffff0208

08005c30 <memset>:
 8005c30:	0003      	movs	r3, r0
 8005c32:	1882      	adds	r2, r0, r2
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d100      	bne.n	8005c3a <memset+0xa>
 8005c38:	4770      	bx	lr
 8005c3a:	7019      	strb	r1, [r3, #0]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	e7f9      	b.n	8005c34 <memset+0x4>

08005c40 <__errno>:
 8005c40:	4b01      	ldr	r3, [pc, #4]	@ (8005c48 <__errno+0x8>)
 8005c42:	6818      	ldr	r0, [r3, #0]
 8005c44:	4770      	bx	lr
 8005c46:	46c0      	nop			@ (mov r8, r8)
 8005c48:	2000000c 	.word	0x2000000c

08005c4c <__libc_init_array>:
 8005c4c:	b570      	push	{r4, r5, r6, lr}
 8005c4e:	2600      	movs	r6, #0
 8005c50:	4c0c      	ldr	r4, [pc, #48]	@ (8005c84 <__libc_init_array+0x38>)
 8005c52:	4d0d      	ldr	r5, [pc, #52]	@ (8005c88 <__libc_init_array+0x3c>)
 8005c54:	1b64      	subs	r4, r4, r5
 8005c56:	10a4      	asrs	r4, r4, #2
 8005c58:	42a6      	cmp	r6, r4
 8005c5a:	d109      	bne.n	8005c70 <__libc_init_array+0x24>
 8005c5c:	2600      	movs	r6, #0
 8005c5e:	f000 fc65 	bl	800652c <_init>
 8005c62:	4c0a      	ldr	r4, [pc, #40]	@ (8005c8c <__libc_init_array+0x40>)
 8005c64:	4d0a      	ldr	r5, [pc, #40]	@ (8005c90 <__libc_init_array+0x44>)
 8005c66:	1b64      	subs	r4, r4, r5
 8005c68:	10a4      	asrs	r4, r4, #2
 8005c6a:	42a6      	cmp	r6, r4
 8005c6c:	d105      	bne.n	8005c7a <__libc_init_array+0x2e>
 8005c6e:	bd70      	pop	{r4, r5, r6, pc}
 8005c70:	00b3      	lsls	r3, r6, #2
 8005c72:	58eb      	ldr	r3, [r5, r3]
 8005c74:	4798      	blx	r3
 8005c76:	3601      	adds	r6, #1
 8005c78:	e7ee      	b.n	8005c58 <__libc_init_array+0xc>
 8005c7a:	00b3      	lsls	r3, r6, #2
 8005c7c:	58eb      	ldr	r3, [r5, r3]
 8005c7e:	4798      	blx	r3
 8005c80:	3601      	adds	r6, #1
 8005c82:	e7f2      	b.n	8005c6a <__libc_init_array+0x1e>
 8005c84:	08006708 	.word	0x08006708
 8005c88:	08006708 	.word	0x08006708
 8005c8c:	0800670c 	.word	0x0800670c
 8005c90:	08006708 	.word	0x08006708

08005c94 <__retarget_lock_acquire_recursive>:
 8005c94:	4770      	bx	lr

08005c96 <__retarget_lock_release_recursive>:
 8005c96:	4770      	bx	lr

08005c98 <_free_r>:
 8005c98:	b570      	push	{r4, r5, r6, lr}
 8005c9a:	0005      	movs	r5, r0
 8005c9c:	1e0c      	subs	r4, r1, #0
 8005c9e:	d010      	beq.n	8005cc2 <_free_r+0x2a>
 8005ca0:	3c04      	subs	r4, #4
 8005ca2:	6823      	ldr	r3, [r4, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	da00      	bge.n	8005caa <_free_r+0x12>
 8005ca8:	18e4      	adds	r4, r4, r3
 8005caa:	0028      	movs	r0, r5
 8005cac:	f000 f8e0 	bl	8005e70 <__malloc_lock>
 8005cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8005d28 <_free_r+0x90>)
 8005cb2:	6813      	ldr	r3, [r2, #0]
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d105      	bne.n	8005cc4 <_free_r+0x2c>
 8005cb8:	6063      	str	r3, [r4, #4]
 8005cba:	6014      	str	r4, [r2, #0]
 8005cbc:	0028      	movs	r0, r5
 8005cbe:	f000 f8df 	bl	8005e80 <__malloc_unlock>
 8005cc2:	bd70      	pop	{r4, r5, r6, pc}
 8005cc4:	42a3      	cmp	r3, r4
 8005cc6:	d908      	bls.n	8005cda <_free_r+0x42>
 8005cc8:	6820      	ldr	r0, [r4, #0]
 8005cca:	1821      	adds	r1, r4, r0
 8005ccc:	428b      	cmp	r3, r1
 8005cce:	d1f3      	bne.n	8005cb8 <_free_r+0x20>
 8005cd0:	6819      	ldr	r1, [r3, #0]
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	1809      	adds	r1, r1, r0
 8005cd6:	6021      	str	r1, [r4, #0]
 8005cd8:	e7ee      	b.n	8005cb8 <_free_r+0x20>
 8005cda:	001a      	movs	r2, r3
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <_free_r+0x4e>
 8005ce2:	42a3      	cmp	r3, r4
 8005ce4:	d9f9      	bls.n	8005cda <_free_r+0x42>
 8005ce6:	6811      	ldr	r1, [r2, #0]
 8005ce8:	1850      	adds	r0, r2, r1
 8005cea:	42a0      	cmp	r0, r4
 8005cec:	d10b      	bne.n	8005d06 <_free_r+0x6e>
 8005cee:	6820      	ldr	r0, [r4, #0]
 8005cf0:	1809      	adds	r1, r1, r0
 8005cf2:	1850      	adds	r0, r2, r1
 8005cf4:	6011      	str	r1, [r2, #0]
 8005cf6:	4283      	cmp	r3, r0
 8005cf8:	d1e0      	bne.n	8005cbc <_free_r+0x24>
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	1841      	adds	r1, r0, r1
 8005d00:	6011      	str	r1, [r2, #0]
 8005d02:	6053      	str	r3, [r2, #4]
 8005d04:	e7da      	b.n	8005cbc <_free_r+0x24>
 8005d06:	42a0      	cmp	r0, r4
 8005d08:	d902      	bls.n	8005d10 <_free_r+0x78>
 8005d0a:	230c      	movs	r3, #12
 8005d0c:	602b      	str	r3, [r5, #0]
 8005d0e:	e7d5      	b.n	8005cbc <_free_r+0x24>
 8005d10:	6820      	ldr	r0, [r4, #0]
 8005d12:	1821      	adds	r1, r4, r0
 8005d14:	428b      	cmp	r3, r1
 8005d16:	d103      	bne.n	8005d20 <_free_r+0x88>
 8005d18:	6819      	ldr	r1, [r3, #0]
 8005d1a:	685b      	ldr	r3, [r3, #4]
 8005d1c:	1809      	adds	r1, r1, r0
 8005d1e:	6021      	str	r1, [r4, #0]
 8005d20:	6063      	str	r3, [r4, #4]
 8005d22:	6054      	str	r4, [r2, #4]
 8005d24:	e7ca      	b.n	8005cbc <_free_r+0x24>
 8005d26:	46c0      	nop			@ (mov r8, r8)
 8005d28:	200006b8 	.word	0x200006b8

08005d2c <sbrk_aligned>:
 8005d2c:	b570      	push	{r4, r5, r6, lr}
 8005d2e:	4e0f      	ldr	r6, [pc, #60]	@ (8005d6c <sbrk_aligned+0x40>)
 8005d30:	000d      	movs	r5, r1
 8005d32:	6831      	ldr	r1, [r6, #0]
 8005d34:	0004      	movs	r4, r0
 8005d36:	2900      	cmp	r1, #0
 8005d38:	d102      	bne.n	8005d40 <sbrk_aligned+0x14>
 8005d3a:	f000 fb99 	bl	8006470 <_sbrk_r>
 8005d3e:	6030      	str	r0, [r6, #0]
 8005d40:	0029      	movs	r1, r5
 8005d42:	0020      	movs	r0, r4
 8005d44:	f000 fb94 	bl	8006470 <_sbrk_r>
 8005d48:	1c43      	adds	r3, r0, #1
 8005d4a:	d103      	bne.n	8005d54 <sbrk_aligned+0x28>
 8005d4c:	2501      	movs	r5, #1
 8005d4e:	426d      	negs	r5, r5
 8005d50:	0028      	movs	r0, r5
 8005d52:	bd70      	pop	{r4, r5, r6, pc}
 8005d54:	2303      	movs	r3, #3
 8005d56:	1cc5      	adds	r5, r0, #3
 8005d58:	439d      	bics	r5, r3
 8005d5a:	42a8      	cmp	r0, r5
 8005d5c:	d0f8      	beq.n	8005d50 <sbrk_aligned+0x24>
 8005d5e:	1a29      	subs	r1, r5, r0
 8005d60:	0020      	movs	r0, r4
 8005d62:	f000 fb85 	bl	8006470 <_sbrk_r>
 8005d66:	3001      	adds	r0, #1
 8005d68:	d1f2      	bne.n	8005d50 <sbrk_aligned+0x24>
 8005d6a:	e7ef      	b.n	8005d4c <sbrk_aligned+0x20>
 8005d6c:	200006b4 	.word	0x200006b4

08005d70 <_malloc_r>:
 8005d70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d72:	2203      	movs	r2, #3
 8005d74:	1ccb      	adds	r3, r1, #3
 8005d76:	4393      	bics	r3, r2
 8005d78:	3308      	adds	r3, #8
 8005d7a:	0005      	movs	r5, r0
 8005d7c:	001f      	movs	r7, r3
 8005d7e:	2b0c      	cmp	r3, #12
 8005d80:	d234      	bcs.n	8005dec <_malloc_r+0x7c>
 8005d82:	270c      	movs	r7, #12
 8005d84:	42b9      	cmp	r1, r7
 8005d86:	d833      	bhi.n	8005df0 <_malloc_r+0x80>
 8005d88:	0028      	movs	r0, r5
 8005d8a:	f000 f871 	bl	8005e70 <__malloc_lock>
 8005d8e:	4e37      	ldr	r6, [pc, #220]	@ (8005e6c <_malloc_r+0xfc>)
 8005d90:	6833      	ldr	r3, [r6, #0]
 8005d92:	001c      	movs	r4, r3
 8005d94:	2c00      	cmp	r4, #0
 8005d96:	d12f      	bne.n	8005df8 <_malloc_r+0x88>
 8005d98:	0039      	movs	r1, r7
 8005d9a:	0028      	movs	r0, r5
 8005d9c:	f7ff ffc6 	bl	8005d2c <sbrk_aligned>
 8005da0:	0004      	movs	r4, r0
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	d15f      	bne.n	8005e66 <_malloc_r+0xf6>
 8005da6:	6834      	ldr	r4, [r6, #0]
 8005da8:	9400      	str	r4, [sp, #0]
 8005daa:	9b00      	ldr	r3, [sp, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d14a      	bne.n	8005e46 <_malloc_r+0xd6>
 8005db0:	2c00      	cmp	r4, #0
 8005db2:	d052      	beq.n	8005e5a <_malloc_r+0xea>
 8005db4:	6823      	ldr	r3, [r4, #0]
 8005db6:	0028      	movs	r0, r5
 8005db8:	18e3      	adds	r3, r4, r3
 8005dba:	9900      	ldr	r1, [sp, #0]
 8005dbc:	9301      	str	r3, [sp, #4]
 8005dbe:	f000 fb57 	bl	8006470 <_sbrk_r>
 8005dc2:	9b01      	ldr	r3, [sp, #4]
 8005dc4:	4283      	cmp	r3, r0
 8005dc6:	d148      	bne.n	8005e5a <_malloc_r+0xea>
 8005dc8:	6823      	ldr	r3, [r4, #0]
 8005dca:	0028      	movs	r0, r5
 8005dcc:	1aff      	subs	r7, r7, r3
 8005dce:	0039      	movs	r1, r7
 8005dd0:	f7ff ffac 	bl	8005d2c <sbrk_aligned>
 8005dd4:	3001      	adds	r0, #1
 8005dd6:	d040      	beq.n	8005e5a <_malloc_r+0xea>
 8005dd8:	6823      	ldr	r3, [r4, #0]
 8005dda:	19db      	adds	r3, r3, r7
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	6833      	ldr	r3, [r6, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	2a00      	cmp	r2, #0
 8005de4:	d133      	bne.n	8005e4e <_malloc_r+0xde>
 8005de6:	9b00      	ldr	r3, [sp, #0]
 8005de8:	6033      	str	r3, [r6, #0]
 8005dea:	e019      	b.n	8005e20 <_malloc_r+0xb0>
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	dac9      	bge.n	8005d84 <_malloc_r+0x14>
 8005df0:	230c      	movs	r3, #12
 8005df2:	602b      	str	r3, [r5, #0]
 8005df4:	2000      	movs	r0, #0
 8005df6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005df8:	6821      	ldr	r1, [r4, #0]
 8005dfa:	1bc9      	subs	r1, r1, r7
 8005dfc:	d420      	bmi.n	8005e40 <_malloc_r+0xd0>
 8005dfe:	290b      	cmp	r1, #11
 8005e00:	d90a      	bls.n	8005e18 <_malloc_r+0xa8>
 8005e02:	19e2      	adds	r2, r4, r7
 8005e04:	6027      	str	r7, [r4, #0]
 8005e06:	42a3      	cmp	r3, r4
 8005e08:	d104      	bne.n	8005e14 <_malloc_r+0xa4>
 8005e0a:	6032      	str	r2, [r6, #0]
 8005e0c:	6863      	ldr	r3, [r4, #4]
 8005e0e:	6011      	str	r1, [r2, #0]
 8005e10:	6053      	str	r3, [r2, #4]
 8005e12:	e005      	b.n	8005e20 <_malloc_r+0xb0>
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	e7f9      	b.n	8005e0c <_malloc_r+0x9c>
 8005e18:	6862      	ldr	r2, [r4, #4]
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	d10e      	bne.n	8005e3c <_malloc_r+0xcc>
 8005e1e:	6032      	str	r2, [r6, #0]
 8005e20:	0028      	movs	r0, r5
 8005e22:	f000 f82d 	bl	8005e80 <__malloc_unlock>
 8005e26:	0020      	movs	r0, r4
 8005e28:	2207      	movs	r2, #7
 8005e2a:	300b      	adds	r0, #11
 8005e2c:	1d23      	adds	r3, r4, #4
 8005e2e:	4390      	bics	r0, r2
 8005e30:	1ac2      	subs	r2, r0, r3
 8005e32:	4298      	cmp	r0, r3
 8005e34:	d0df      	beq.n	8005df6 <_malloc_r+0x86>
 8005e36:	1a1b      	subs	r3, r3, r0
 8005e38:	50a3      	str	r3, [r4, r2]
 8005e3a:	e7dc      	b.n	8005df6 <_malloc_r+0x86>
 8005e3c:	605a      	str	r2, [r3, #4]
 8005e3e:	e7ef      	b.n	8005e20 <_malloc_r+0xb0>
 8005e40:	0023      	movs	r3, r4
 8005e42:	6864      	ldr	r4, [r4, #4]
 8005e44:	e7a6      	b.n	8005d94 <_malloc_r+0x24>
 8005e46:	9c00      	ldr	r4, [sp, #0]
 8005e48:	6863      	ldr	r3, [r4, #4]
 8005e4a:	9300      	str	r3, [sp, #0]
 8005e4c:	e7ad      	b.n	8005daa <_malloc_r+0x3a>
 8005e4e:	001a      	movs	r2, r3
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	42a3      	cmp	r3, r4
 8005e54:	d1fb      	bne.n	8005e4e <_malloc_r+0xde>
 8005e56:	2300      	movs	r3, #0
 8005e58:	e7da      	b.n	8005e10 <_malloc_r+0xa0>
 8005e5a:	230c      	movs	r3, #12
 8005e5c:	0028      	movs	r0, r5
 8005e5e:	602b      	str	r3, [r5, #0]
 8005e60:	f000 f80e 	bl	8005e80 <__malloc_unlock>
 8005e64:	e7c6      	b.n	8005df4 <_malloc_r+0x84>
 8005e66:	6007      	str	r7, [r0, #0]
 8005e68:	e7da      	b.n	8005e20 <_malloc_r+0xb0>
 8005e6a:	46c0      	nop			@ (mov r8, r8)
 8005e6c:	200006b8 	.word	0x200006b8

08005e70 <__malloc_lock>:
 8005e70:	b510      	push	{r4, lr}
 8005e72:	4802      	ldr	r0, [pc, #8]	@ (8005e7c <__malloc_lock+0xc>)
 8005e74:	f7ff ff0e 	bl	8005c94 <__retarget_lock_acquire_recursive>
 8005e78:	bd10      	pop	{r4, pc}
 8005e7a:	46c0      	nop			@ (mov r8, r8)
 8005e7c:	200006b0 	.word	0x200006b0

08005e80 <__malloc_unlock>:
 8005e80:	b510      	push	{r4, lr}
 8005e82:	4802      	ldr	r0, [pc, #8]	@ (8005e8c <__malloc_unlock+0xc>)
 8005e84:	f7ff ff07 	bl	8005c96 <__retarget_lock_release_recursive>
 8005e88:	bd10      	pop	{r4, pc}
 8005e8a:	46c0      	nop			@ (mov r8, r8)
 8005e8c:	200006b0 	.word	0x200006b0

08005e90 <__ssputs_r>:
 8005e90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e92:	688e      	ldr	r6, [r1, #8]
 8005e94:	b085      	sub	sp, #20
 8005e96:	001f      	movs	r7, r3
 8005e98:	000c      	movs	r4, r1
 8005e9a:	680b      	ldr	r3, [r1, #0]
 8005e9c:	9002      	str	r0, [sp, #8]
 8005e9e:	9203      	str	r2, [sp, #12]
 8005ea0:	42be      	cmp	r6, r7
 8005ea2:	d830      	bhi.n	8005f06 <__ssputs_r+0x76>
 8005ea4:	210c      	movs	r1, #12
 8005ea6:	5e62      	ldrsh	r2, [r4, r1]
 8005ea8:	2190      	movs	r1, #144	@ 0x90
 8005eaa:	00c9      	lsls	r1, r1, #3
 8005eac:	420a      	tst	r2, r1
 8005eae:	d028      	beq.n	8005f02 <__ssputs_r+0x72>
 8005eb0:	2003      	movs	r0, #3
 8005eb2:	6921      	ldr	r1, [r4, #16]
 8005eb4:	1a5b      	subs	r3, r3, r1
 8005eb6:	9301      	str	r3, [sp, #4]
 8005eb8:	6963      	ldr	r3, [r4, #20]
 8005eba:	4343      	muls	r3, r0
 8005ebc:	9801      	ldr	r0, [sp, #4]
 8005ebe:	0fdd      	lsrs	r5, r3, #31
 8005ec0:	18ed      	adds	r5, r5, r3
 8005ec2:	1c7b      	adds	r3, r7, #1
 8005ec4:	181b      	adds	r3, r3, r0
 8005ec6:	106d      	asrs	r5, r5, #1
 8005ec8:	42ab      	cmp	r3, r5
 8005eca:	d900      	bls.n	8005ece <__ssputs_r+0x3e>
 8005ecc:	001d      	movs	r5, r3
 8005ece:	0552      	lsls	r2, r2, #21
 8005ed0:	d528      	bpl.n	8005f24 <__ssputs_r+0x94>
 8005ed2:	0029      	movs	r1, r5
 8005ed4:	9802      	ldr	r0, [sp, #8]
 8005ed6:	f7ff ff4b 	bl	8005d70 <_malloc_r>
 8005eda:	1e06      	subs	r6, r0, #0
 8005edc:	d02c      	beq.n	8005f38 <__ssputs_r+0xa8>
 8005ede:	9a01      	ldr	r2, [sp, #4]
 8005ee0:	6921      	ldr	r1, [r4, #16]
 8005ee2:	f000 fae2 	bl	80064aa <memcpy>
 8005ee6:	89a2      	ldrh	r2, [r4, #12]
 8005ee8:	4b18      	ldr	r3, [pc, #96]	@ (8005f4c <__ssputs_r+0xbc>)
 8005eea:	401a      	ands	r2, r3
 8005eec:	2380      	movs	r3, #128	@ 0x80
 8005eee:	4313      	orrs	r3, r2
 8005ef0:	81a3      	strh	r3, [r4, #12]
 8005ef2:	9b01      	ldr	r3, [sp, #4]
 8005ef4:	6126      	str	r6, [r4, #16]
 8005ef6:	18f6      	adds	r6, r6, r3
 8005ef8:	6026      	str	r6, [r4, #0]
 8005efa:	003e      	movs	r6, r7
 8005efc:	6165      	str	r5, [r4, #20]
 8005efe:	1aed      	subs	r5, r5, r3
 8005f00:	60a5      	str	r5, [r4, #8]
 8005f02:	42be      	cmp	r6, r7
 8005f04:	d900      	bls.n	8005f08 <__ssputs_r+0x78>
 8005f06:	003e      	movs	r6, r7
 8005f08:	0032      	movs	r2, r6
 8005f0a:	9903      	ldr	r1, [sp, #12]
 8005f0c:	6820      	ldr	r0, [r4, #0]
 8005f0e:	f000 fa9b 	bl	8006448 <memmove>
 8005f12:	2000      	movs	r0, #0
 8005f14:	68a3      	ldr	r3, [r4, #8]
 8005f16:	1b9b      	subs	r3, r3, r6
 8005f18:	60a3      	str	r3, [r4, #8]
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	199b      	adds	r3, r3, r6
 8005f1e:	6023      	str	r3, [r4, #0]
 8005f20:	b005      	add	sp, #20
 8005f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f24:	002a      	movs	r2, r5
 8005f26:	9802      	ldr	r0, [sp, #8]
 8005f28:	f000 fac8 	bl	80064bc <_realloc_r>
 8005f2c:	1e06      	subs	r6, r0, #0
 8005f2e:	d1e0      	bne.n	8005ef2 <__ssputs_r+0x62>
 8005f30:	6921      	ldr	r1, [r4, #16]
 8005f32:	9802      	ldr	r0, [sp, #8]
 8005f34:	f7ff feb0 	bl	8005c98 <_free_r>
 8005f38:	230c      	movs	r3, #12
 8005f3a:	2001      	movs	r0, #1
 8005f3c:	9a02      	ldr	r2, [sp, #8]
 8005f3e:	4240      	negs	r0, r0
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	89a2      	ldrh	r2, [r4, #12]
 8005f44:	3334      	adds	r3, #52	@ 0x34
 8005f46:	4313      	orrs	r3, r2
 8005f48:	81a3      	strh	r3, [r4, #12]
 8005f4a:	e7e9      	b.n	8005f20 <__ssputs_r+0x90>
 8005f4c:	fffffb7f 	.word	0xfffffb7f

08005f50 <_svfiprintf_r>:
 8005f50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f52:	b0a1      	sub	sp, #132	@ 0x84
 8005f54:	9003      	str	r0, [sp, #12]
 8005f56:	001d      	movs	r5, r3
 8005f58:	898b      	ldrh	r3, [r1, #12]
 8005f5a:	000f      	movs	r7, r1
 8005f5c:	0016      	movs	r6, r2
 8005f5e:	061b      	lsls	r3, r3, #24
 8005f60:	d511      	bpl.n	8005f86 <_svfiprintf_r+0x36>
 8005f62:	690b      	ldr	r3, [r1, #16]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d10e      	bne.n	8005f86 <_svfiprintf_r+0x36>
 8005f68:	2140      	movs	r1, #64	@ 0x40
 8005f6a:	f7ff ff01 	bl	8005d70 <_malloc_r>
 8005f6e:	6038      	str	r0, [r7, #0]
 8005f70:	6138      	str	r0, [r7, #16]
 8005f72:	2800      	cmp	r0, #0
 8005f74:	d105      	bne.n	8005f82 <_svfiprintf_r+0x32>
 8005f76:	230c      	movs	r3, #12
 8005f78:	9a03      	ldr	r2, [sp, #12]
 8005f7a:	6013      	str	r3, [r2, #0]
 8005f7c:	2001      	movs	r0, #1
 8005f7e:	4240      	negs	r0, r0
 8005f80:	e0cf      	b.n	8006122 <_svfiprintf_r+0x1d2>
 8005f82:	2340      	movs	r3, #64	@ 0x40
 8005f84:	617b      	str	r3, [r7, #20]
 8005f86:	2300      	movs	r3, #0
 8005f88:	ac08      	add	r4, sp, #32
 8005f8a:	6163      	str	r3, [r4, #20]
 8005f8c:	3320      	adds	r3, #32
 8005f8e:	7663      	strb	r3, [r4, #25]
 8005f90:	3310      	adds	r3, #16
 8005f92:	76a3      	strb	r3, [r4, #26]
 8005f94:	9507      	str	r5, [sp, #28]
 8005f96:	0035      	movs	r5, r6
 8005f98:	782b      	ldrb	r3, [r5, #0]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d001      	beq.n	8005fa2 <_svfiprintf_r+0x52>
 8005f9e:	2b25      	cmp	r3, #37	@ 0x25
 8005fa0:	d148      	bne.n	8006034 <_svfiprintf_r+0xe4>
 8005fa2:	1bab      	subs	r3, r5, r6
 8005fa4:	9305      	str	r3, [sp, #20]
 8005fa6:	42b5      	cmp	r5, r6
 8005fa8:	d00b      	beq.n	8005fc2 <_svfiprintf_r+0x72>
 8005faa:	0032      	movs	r2, r6
 8005fac:	0039      	movs	r1, r7
 8005fae:	9803      	ldr	r0, [sp, #12]
 8005fb0:	f7ff ff6e 	bl	8005e90 <__ssputs_r>
 8005fb4:	3001      	adds	r0, #1
 8005fb6:	d100      	bne.n	8005fba <_svfiprintf_r+0x6a>
 8005fb8:	e0ae      	b.n	8006118 <_svfiprintf_r+0x1c8>
 8005fba:	6963      	ldr	r3, [r4, #20]
 8005fbc:	9a05      	ldr	r2, [sp, #20]
 8005fbe:	189b      	adds	r3, r3, r2
 8005fc0:	6163      	str	r3, [r4, #20]
 8005fc2:	782b      	ldrb	r3, [r5, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d100      	bne.n	8005fca <_svfiprintf_r+0x7a>
 8005fc8:	e0a6      	b.n	8006118 <_svfiprintf_r+0x1c8>
 8005fca:	2201      	movs	r2, #1
 8005fcc:	2300      	movs	r3, #0
 8005fce:	4252      	negs	r2, r2
 8005fd0:	6062      	str	r2, [r4, #4]
 8005fd2:	a904      	add	r1, sp, #16
 8005fd4:	3254      	adds	r2, #84	@ 0x54
 8005fd6:	1852      	adds	r2, r2, r1
 8005fd8:	1c6e      	adds	r6, r5, #1
 8005fda:	6023      	str	r3, [r4, #0]
 8005fdc:	60e3      	str	r3, [r4, #12]
 8005fde:	60a3      	str	r3, [r4, #8]
 8005fe0:	7013      	strb	r3, [r2, #0]
 8005fe2:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005fe4:	4b54      	ldr	r3, [pc, #336]	@ (8006138 <_svfiprintf_r+0x1e8>)
 8005fe6:	2205      	movs	r2, #5
 8005fe8:	0018      	movs	r0, r3
 8005fea:	7831      	ldrb	r1, [r6, #0]
 8005fec:	9305      	str	r3, [sp, #20]
 8005fee:	f000 fa51 	bl	8006494 <memchr>
 8005ff2:	1c75      	adds	r5, r6, #1
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	d11f      	bne.n	8006038 <_svfiprintf_r+0xe8>
 8005ff8:	6822      	ldr	r2, [r4, #0]
 8005ffa:	06d3      	lsls	r3, r2, #27
 8005ffc:	d504      	bpl.n	8006008 <_svfiprintf_r+0xb8>
 8005ffe:	2353      	movs	r3, #83	@ 0x53
 8006000:	a904      	add	r1, sp, #16
 8006002:	185b      	adds	r3, r3, r1
 8006004:	2120      	movs	r1, #32
 8006006:	7019      	strb	r1, [r3, #0]
 8006008:	0713      	lsls	r3, r2, #28
 800600a:	d504      	bpl.n	8006016 <_svfiprintf_r+0xc6>
 800600c:	2353      	movs	r3, #83	@ 0x53
 800600e:	a904      	add	r1, sp, #16
 8006010:	185b      	adds	r3, r3, r1
 8006012:	212b      	movs	r1, #43	@ 0x2b
 8006014:	7019      	strb	r1, [r3, #0]
 8006016:	7833      	ldrb	r3, [r6, #0]
 8006018:	2b2a      	cmp	r3, #42	@ 0x2a
 800601a:	d016      	beq.n	800604a <_svfiprintf_r+0xfa>
 800601c:	0035      	movs	r5, r6
 800601e:	2100      	movs	r1, #0
 8006020:	200a      	movs	r0, #10
 8006022:	68e3      	ldr	r3, [r4, #12]
 8006024:	782a      	ldrb	r2, [r5, #0]
 8006026:	1c6e      	adds	r6, r5, #1
 8006028:	3a30      	subs	r2, #48	@ 0x30
 800602a:	2a09      	cmp	r2, #9
 800602c:	d950      	bls.n	80060d0 <_svfiprintf_r+0x180>
 800602e:	2900      	cmp	r1, #0
 8006030:	d111      	bne.n	8006056 <_svfiprintf_r+0x106>
 8006032:	e017      	b.n	8006064 <_svfiprintf_r+0x114>
 8006034:	3501      	adds	r5, #1
 8006036:	e7af      	b.n	8005f98 <_svfiprintf_r+0x48>
 8006038:	9b05      	ldr	r3, [sp, #20]
 800603a:	6822      	ldr	r2, [r4, #0]
 800603c:	1ac0      	subs	r0, r0, r3
 800603e:	2301      	movs	r3, #1
 8006040:	4083      	lsls	r3, r0
 8006042:	4313      	orrs	r3, r2
 8006044:	002e      	movs	r6, r5
 8006046:	6023      	str	r3, [r4, #0]
 8006048:	e7cc      	b.n	8005fe4 <_svfiprintf_r+0x94>
 800604a:	9b07      	ldr	r3, [sp, #28]
 800604c:	1d19      	adds	r1, r3, #4
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	9107      	str	r1, [sp, #28]
 8006052:	2b00      	cmp	r3, #0
 8006054:	db01      	blt.n	800605a <_svfiprintf_r+0x10a>
 8006056:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006058:	e004      	b.n	8006064 <_svfiprintf_r+0x114>
 800605a:	425b      	negs	r3, r3
 800605c:	60e3      	str	r3, [r4, #12]
 800605e:	2302      	movs	r3, #2
 8006060:	4313      	orrs	r3, r2
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	782b      	ldrb	r3, [r5, #0]
 8006066:	2b2e      	cmp	r3, #46	@ 0x2e
 8006068:	d10c      	bne.n	8006084 <_svfiprintf_r+0x134>
 800606a:	786b      	ldrb	r3, [r5, #1]
 800606c:	2b2a      	cmp	r3, #42	@ 0x2a
 800606e:	d134      	bne.n	80060da <_svfiprintf_r+0x18a>
 8006070:	9b07      	ldr	r3, [sp, #28]
 8006072:	3502      	adds	r5, #2
 8006074:	1d1a      	adds	r2, r3, #4
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	9207      	str	r2, [sp, #28]
 800607a:	2b00      	cmp	r3, #0
 800607c:	da01      	bge.n	8006082 <_svfiprintf_r+0x132>
 800607e:	2301      	movs	r3, #1
 8006080:	425b      	negs	r3, r3
 8006082:	9309      	str	r3, [sp, #36]	@ 0x24
 8006084:	4e2d      	ldr	r6, [pc, #180]	@ (800613c <_svfiprintf_r+0x1ec>)
 8006086:	2203      	movs	r2, #3
 8006088:	0030      	movs	r0, r6
 800608a:	7829      	ldrb	r1, [r5, #0]
 800608c:	f000 fa02 	bl	8006494 <memchr>
 8006090:	2800      	cmp	r0, #0
 8006092:	d006      	beq.n	80060a2 <_svfiprintf_r+0x152>
 8006094:	2340      	movs	r3, #64	@ 0x40
 8006096:	1b80      	subs	r0, r0, r6
 8006098:	4083      	lsls	r3, r0
 800609a:	6822      	ldr	r2, [r4, #0]
 800609c:	3501      	adds	r5, #1
 800609e:	4313      	orrs	r3, r2
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	7829      	ldrb	r1, [r5, #0]
 80060a4:	2206      	movs	r2, #6
 80060a6:	4826      	ldr	r0, [pc, #152]	@ (8006140 <_svfiprintf_r+0x1f0>)
 80060a8:	1c6e      	adds	r6, r5, #1
 80060aa:	7621      	strb	r1, [r4, #24]
 80060ac:	f000 f9f2 	bl	8006494 <memchr>
 80060b0:	2800      	cmp	r0, #0
 80060b2:	d038      	beq.n	8006126 <_svfiprintf_r+0x1d6>
 80060b4:	4b23      	ldr	r3, [pc, #140]	@ (8006144 <_svfiprintf_r+0x1f4>)
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d122      	bne.n	8006100 <_svfiprintf_r+0x1b0>
 80060ba:	2207      	movs	r2, #7
 80060bc:	9b07      	ldr	r3, [sp, #28]
 80060be:	3307      	adds	r3, #7
 80060c0:	4393      	bics	r3, r2
 80060c2:	3308      	adds	r3, #8
 80060c4:	9307      	str	r3, [sp, #28]
 80060c6:	6963      	ldr	r3, [r4, #20]
 80060c8:	9a04      	ldr	r2, [sp, #16]
 80060ca:	189b      	adds	r3, r3, r2
 80060cc:	6163      	str	r3, [r4, #20]
 80060ce:	e762      	b.n	8005f96 <_svfiprintf_r+0x46>
 80060d0:	4343      	muls	r3, r0
 80060d2:	0035      	movs	r5, r6
 80060d4:	2101      	movs	r1, #1
 80060d6:	189b      	adds	r3, r3, r2
 80060d8:	e7a4      	b.n	8006024 <_svfiprintf_r+0xd4>
 80060da:	2300      	movs	r3, #0
 80060dc:	200a      	movs	r0, #10
 80060de:	0019      	movs	r1, r3
 80060e0:	3501      	adds	r5, #1
 80060e2:	6063      	str	r3, [r4, #4]
 80060e4:	782a      	ldrb	r2, [r5, #0]
 80060e6:	1c6e      	adds	r6, r5, #1
 80060e8:	3a30      	subs	r2, #48	@ 0x30
 80060ea:	2a09      	cmp	r2, #9
 80060ec:	d903      	bls.n	80060f6 <_svfiprintf_r+0x1a6>
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0c8      	beq.n	8006084 <_svfiprintf_r+0x134>
 80060f2:	9109      	str	r1, [sp, #36]	@ 0x24
 80060f4:	e7c6      	b.n	8006084 <_svfiprintf_r+0x134>
 80060f6:	4341      	muls	r1, r0
 80060f8:	0035      	movs	r5, r6
 80060fa:	2301      	movs	r3, #1
 80060fc:	1889      	adds	r1, r1, r2
 80060fe:	e7f1      	b.n	80060e4 <_svfiprintf_r+0x194>
 8006100:	aa07      	add	r2, sp, #28
 8006102:	9200      	str	r2, [sp, #0]
 8006104:	0021      	movs	r1, r4
 8006106:	003a      	movs	r2, r7
 8006108:	4b0f      	ldr	r3, [pc, #60]	@ (8006148 <_svfiprintf_r+0x1f8>)
 800610a:	9803      	ldr	r0, [sp, #12]
 800610c:	e000      	b.n	8006110 <_svfiprintf_r+0x1c0>
 800610e:	bf00      	nop
 8006110:	9004      	str	r0, [sp, #16]
 8006112:	9b04      	ldr	r3, [sp, #16]
 8006114:	3301      	adds	r3, #1
 8006116:	d1d6      	bne.n	80060c6 <_svfiprintf_r+0x176>
 8006118:	89bb      	ldrh	r3, [r7, #12]
 800611a:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800611c:	065b      	lsls	r3, r3, #25
 800611e:	d500      	bpl.n	8006122 <_svfiprintf_r+0x1d2>
 8006120:	e72c      	b.n	8005f7c <_svfiprintf_r+0x2c>
 8006122:	b021      	add	sp, #132	@ 0x84
 8006124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006126:	aa07      	add	r2, sp, #28
 8006128:	9200      	str	r2, [sp, #0]
 800612a:	0021      	movs	r1, r4
 800612c:	003a      	movs	r2, r7
 800612e:	4b06      	ldr	r3, [pc, #24]	@ (8006148 <_svfiprintf_r+0x1f8>)
 8006130:	9803      	ldr	r0, [sp, #12]
 8006132:	f000 f87b 	bl	800622c <_printf_i>
 8006136:	e7eb      	b.n	8006110 <_svfiprintf_r+0x1c0>
 8006138:	080066d4 	.word	0x080066d4
 800613c:	080066da 	.word	0x080066da
 8006140:	080066de 	.word	0x080066de
 8006144:	00000000 	.word	0x00000000
 8006148:	08005e91 	.word	0x08005e91

0800614c <_printf_common>:
 800614c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800614e:	0016      	movs	r6, r2
 8006150:	9301      	str	r3, [sp, #4]
 8006152:	688a      	ldr	r2, [r1, #8]
 8006154:	690b      	ldr	r3, [r1, #16]
 8006156:	000c      	movs	r4, r1
 8006158:	9000      	str	r0, [sp, #0]
 800615a:	4293      	cmp	r3, r2
 800615c:	da00      	bge.n	8006160 <_printf_common+0x14>
 800615e:	0013      	movs	r3, r2
 8006160:	0022      	movs	r2, r4
 8006162:	6033      	str	r3, [r6, #0]
 8006164:	3243      	adds	r2, #67	@ 0x43
 8006166:	7812      	ldrb	r2, [r2, #0]
 8006168:	2a00      	cmp	r2, #0
 800616a:	d001      	beq.n	8006170 <_printf_common+0x24>
 800616c:	3301      	adds	r3, #1
 800616e:	6033      	str	r3, [r6, #0]
 8006170:	6823      	ldr	r3, [r4, #0]
 8006172:	069b      	lsls	r3, r3, #26
 8006174:	d502      	bpl.n	800617c <_printf_common+0x30>
 8006176:	6833      	ldr	r3, [r6, #0]
 8006178:	3302      	adds	r3, #2
 800617a:	6033      	str	r3, [r6, #0]
 800617c:	6822      	ldr	r2, [r4, #0]
 800617e:	2306      	movs	r3, #6
 8006180:	0015      	movs	r5, r2
 8006182:	401d      	ands	r5, r3
 8006184:	421a      	tst	r2, r3
 8006186:	d027      	beq.n	80061d8 <_printf_common+0x8c>
 8006188:	0023      	movs	r3, r4
 800618a:	3343      	adds	r3, #67	@ 0x43
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	1e5a      	subs	r2, r3, #1
 8006190:	4193      	sbcs	r3, r2
 8006192:	6822      	ldr	r2, [r4, #0]
 8006194:	0692      	lsls	r2, r2, #26
 8006196:	d430      	bmi.n	80061fa <_printf_common+0xae>
 8006198:	0022      	movs	r2, r4
 800619a:	9901      	ldr	r1, [sp, #4]
 800619c:	9800      	ldr	r0, [sp, #0]
 800619e:	9d08      	ldr	r5, [sp, #32]
 80061a0:	3243      	adds	r2, #67	@ 0x43
 80061a2:	47a8      	blx	r5
 80061a4:	3001      	adds	r0, #1
 80061a6:	d025      	beq.n	80061f4 <_printf_common+0xa8>
 80061a8:	2206      	movs	r2, #6
 80061aa:	6823      	ldr	r3, [r4, #0]
 80061ac:	2500      	movs	r5, #0
 80061ae:	4013      	ands	r3, r2
 80061b0:	2b04      	cmp	r3, #4
 80061b2:	d105      	bne.n	80061c0 <_printf_common+0x74>
 80061b4:	6833      	ldr	r3, [r6, #0]
 80061b6:	68e5      	ldr	r5, [r4, #12]
 80061b8:	1aed      	subs	r5, r5, r3
 80061ba:	43eb      	mvns	r3, r5
 80061bc:	17db      	asrs	r3, r3, #31
 80061be:	401d      	ands	r5, r3
 80061c0:	68a3      	ldr	r3, [r4, #8]
 80061c2:	6922      	ldr	r2, [r4, #16]
 80061c4:	4293      	cmp	r3, r2
 80061c6:	dd01      	ble.n	80061cc <_printf_common+0x80>
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	18ed      	adds	r5, r5, r3
 80061cc:	2600      	movs	r6, #0
 80061ce:	42b5      	cmp	r5, r6
 80061d0:	d120      	bne.n	8006214 <_printf_common+0xc8>
 80061d2:	2000      	movs	r0, #0
 80061d4:	e010      	b.n	80061f8 <_printf_common+0xac>
 80061d6:	3501      	adds	r5, #1
 80061d8:	68e3      	ldr	r3, [r4, #12]
 80061da:	6832      	ldr	r2, [r6, #0]
 80061dc:	1a9b      	subs	r3, r3, r2
 80061de:	42ab      	cmp	r3, r5
 80061e0:	ddd2      	ble.n	8006188 <_printf_common+0x3c>
 80061e2:	0022      	movs	r2, r4
 80061e4:	2301      	movs	r3, #1
 80061e6:	9901      	ldr	r1, [sp, #4]
 80061e8:	9800      	ldr	r0, [sp, #0]
 80061ea:	9f08      	ldr	r7, [sp, #32]
 80061ec:	3219      	adds	r2, #25
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	d1f0      	bne.n	80061d6 <_printf_common+0x8a>
 80061f4:	2001      	movs	r0, #1
 80061f6:	4240      	negs	r0, r0
 80061f8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80061fa:	2030      	movs	r0, #48	@ 0x30
 80061fc:	18e1      	adds	r1, r4, r3
 80061fe:	3143      	adds	r1, #67	@ 0x43
 8006200:	7008      	strb	r0, [r1, #0]
 8006202:	0021      	movs	r1, r4
 8006204:	1c5a      	adds	r2, r3, #1
 8006206:	3145      	adds	r1, #69	@ 0x45
 8006208:	7809      	ldrb	r1, [r1, #0]
 800620a:	18a2      	adds	r2, r4, r2
 800620c:	3243      	adds	r2, #67	@ 0x43
 800620e:	3302      	adds	r3, #2
 8006210:	7011      	strb	r1, [r2, #0]
 8006212:	e7c1      	b.n	8006198 <_printf_common+0x4c>
 8006214:	0022      	movs	r2, r4
 8006216:	2301      	movs	r3, #1
 8006218:	9901      	ldr	r1, [sp, #4]
 800621a:	9800      	ldr	r0, [sp, #0]
 800621c:	9f08      	ldr	r7, [sp, #32]
 800621e:	321a      	adds	r2, #26
 8006220:	47b8      	blx	r7
 8006222:	3001      	adds	r0, #1
 8006224:	d0e6      	beq.n	80061f4 <_printf_common+0xa8>
 8006226:	3601      	adds	r6, #1
 8006228:	e7d1      	b.n	80061ce <_printf_common+0x82>
	...

0800622c <_printf_i>:
 800622c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800622e:	b08b      	sub	sp, #44	@ 0x2c
 8006230:	9206      	str	r2, [sp, #24]
 8006232:	000a      	movs	r2, r1
 8006234:	3243      	adds	r2, #67	@ 0x43
 8006236:	9307      	str	r3, [sp, #28]
 8006238:	9005      	str	r0, [sp, #20]
 800623a:	9203      	str	r2, [sp, #12]
 800623c:	7e0a      	ldrb	r2, [r1, #24]
 800623e:	000c      	movs	r4, r1
 8006240:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006242:	2a78      	cmp	r2, #120	@ 0x78
 8006244:	d809      	bhi.n	800625a <_printf_i+0x2e>
 8006246:	2a62      	cmp	r2, #98	@ 0x62
 8006248:	d80b      	bhi.n	8006262 <_printf_i+0x36>
 800624a:	2a00      	cmp	r2, #0
 800624c:	d100      	bne.n	8006250 <_printf_i+0x24>
 800624e:	e0bc      	b.n	80063ca <_printf_i+0x19e>
 8006250:	497b      	ldr	r1, [pc, #492]	@ (8006440 <_printf_i+0x214>)
 8006252:	9104      	str	r1, [sp, #16]
 8006254:	2a58      	cmp	r2, #88	@ 0x58
 8006256:	d100      	bne.n	800625a <_printf_i+0x2e>
 8006258:	e090      	b.n	800637c <_printf_i+0x150>
 800625a:	0025      	movs	r5, r4
 800625c:	3542      	adds	r5, #66	@ 0x42
 800625e:	702a      	strb	r2, [r5, #0]
 8006260:	e022      	b.n	80062a8 <_printf_i+0x7c>
 8006262:	0010      	movs	r0, r2
 8006264:	3863      	subs	r0, #99	@ 0x63
 8006266:	2815      	cmp	r0, #21
 8006268:	d8f7      	bhi.n	800625a <_printf_i+0x2e>
 800626a:	f7f9 ff55 	bl	8000118 <__gnu_thumb1_case_shi>
 800626e:	0016      	.short	0x0016
 8006270:	fff6001f 	.word	0xfff6001f
 8006274:	fff6fff6 	.word	0xfff6fff6
 8006278:	001ffff6 	.word	0x001ffff6
 800627c:	fff6fff6 	.word	0xfff6fff6
 8006280:	fff6fff6 	.word	0xfff6fff6
 8006284:	003600a1 	.word	0x003600a1
 8006288:	fff60080 	.word	0xfff60080
 800628c:	00b2fff6 	.word	0x00b2fff6
 8006290:	0036fff6 	.word	0x0036fff6
 8006294:	fff6fff6 	.word	0xfff6fff6
 8006298:	0084      	.short	0x0084
 800629a:	0025      	movs	r5, r4
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	3542      	adds	r5, #66	@ 0x42
 80062a0:	1d11      	adds	r1, r2, #4
 80062a2:	6019      	str	r1, [r3, #0]
 80062a4:	6813      	ldr	r3, [r2, #0]
 80062a6:	702b      	strb	r3, [r5, #0]
 80062a8:	2301      	movs	r3, #1
 80062aa:	e0a0      	b.n	80063ee <_printf_i+0x1c2>
 80062ac:	6818      	ldr	r0, [r3, #0]
 80062ae:	6809      	ldr	r1, [r1, #0]
 80062b0:	1d02      	adds	r2, r0, #4
 80062b2:	060d      	lsls	r5, r1, #24
 80062b4:	d50b      	bpl.n	80062ce <_printf_i+0xa2>
 80062b6:	6806      	ldr	r6, [r0, #0]
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	2e00      	cmp	r6, #0
 80062bc:	da03      	bge.n	80062c6 <_printf_i+0x9a>
 80062be:	232d      	movs	r3, #45	@ 0x2d
 80062c0:	9a03      	ldr	r2, [sp, #12]
 80062c2:	4276      	negs	r6, r6
 80062c4:	7013      	strb	r3, [r2, #0]
 80062c6:	4b5e      	ldr	r3, [pc, #376]	@ (8006440 <_printf_i+0x214>)
 80062c8:	270a      	movs	r7, #10
 80062ca:	9304      	str	r3, [sp, #16]
 80062cc:	e018      	b.n	8006300 <_printf_i+0xd4>
 80062ce:	6806      	ldr	r6, [r0, #0]
 80062d0:	601a      	str	r2, [r3, #0]
 80062d2:	0649      	lsls	r1, r1, #25
 80062d4:	d5f1      	bpl.n	80062ba <_printf_i+0x8e>
 80062d6:	b236      	sxth	r6, r6
 80062d8:	e7ef      	b.n	80062ba <_printf_i+0x8e>
 80062da:	6808      	ldr	r0, [r1, #0]
 80062dc:	6819      	ldr	r1, [r3, #0]
 80062de:	c940      	ldmia	r1!, {r6}
 80062e0:	0605      	lsls	r5, r0, #24
 80062e2:	d402      	bmi.n	80062ea <_printf_i+0xbe>
 80062e4:	0640      	lsls	r0, r0, #25
 80062e6:	d500      	bpl.n	80062ea <_printf_i+0xbe>
 80062e8:	b2b6      	uxth	r6, r6
 80062ea:	6019      	str	r1, [r3, #0]
 80062ec:	4b54      	ldr	r3, [pc, #336]	@ (8006440 <_printf_i+0x214>)
 80062ee:	270a      	movs	r7, #10
 80062f0:	9304      	str	r3, [sp, #16]
 80062f2:	2a6f      	cmp	r2, #111	@ 0x6f
 80062f4:	d100      	bne.n	80062f8 <_printf_i+0xcc>
 80062f6:	3f02      	subs	r7, #2
 80062f8:	0023      	movs	r3, r4
 80062fa:	2200      	movs	r2, #0
 80062fc:	3343      	adds	r3, #67	@ 0x43
 80062fe:	701a      	strb	r2, [r3, #0]
 8006300:	6863      	ldr	r3, [r4, #4]
 8006302:	60a3      	str	r3, [r4, #8]
 8006304:	2b00      	cmp	r3, #0
 8006306:	db03      	blt.n	8006310 <_printf_i+0xe4>
 8006308:	2104      	movs	r1, #4
 800630a:	6822      	ldr	r2, [r4, #0]
 800630c:	438a      	bics	r2, r1
 800630e:	6022      	str	r2, [r4, #0]
 8006310:	2e00      	cmp	r6, #0
 8006312:	d102      	bne.n	800631a <_printf_i+0xee>
 8006314:	9d03      	ldr	r5, [sp, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00c      	beq.n	8006334 <_printf_i+0x108>
 800631a:	9d03      	ldr	r5, [sp, #12]
 800631c:	0030      	movs	r0, r6
 800631e:	0039      	movs	r1, r7
 8006320:	f7f9 ff8a 	bl	8000238 <__aeabi_uidivmod>
 8006324:	9b04      	ldr	r3, [sp, #16]
 8006326:	3d01      	subs	r5, #1
 8006328:	5c5b      	ldrb	r3, [r3, r1]
 800632a:	702b      	strb	r3, [r5, #0]
 800632c:	0033      	movs	r3, r6
 800632e:	0006      	movs	r6, r0
 8006330:	429f      	cmp	r7, r3
 8006332:	d9f3      	bls.n	800631c <_printf_i+0xf0>
 8006334:	2f08      	cmp	r7, #8
 8006336:	d109      	bne.n	800634c <_printf_i+0x120>
 8006338:	6823      	ldr	r3, [r4, #0]
 800633a:	07db      	lsls	r3, r3, #31
 800633c:	d506      	bpl.n	800634c <_printf_i+0x120>
 800633e:	6862      	ldr	r2, [r4, #4]
 8006340:	6923      	ldr	r3, [r4, #16]
 8006342:	429a      	cmp	r2, r3
 8006344:	dc02      	bgt.n	800634c <_printf_i+0x120>
 8006346:	2330      	movs	r3, #48	@ 0x30
 8006348:	3d01      	subs	r5, #1
 800634a:	702b      	strb	r3, [r5, #0]
 800634c:	9b03      	ldr	r3, [sp, #12]
 800634e:	1b5b      	subs	r3, r3, r5
 8006350:	6123      	str	r3, [r4, #16]
 8006352:	9b07      	ldr	r3, [sp, #28]
 8006354:	0021      	movs	r1, r4
 8006356:	9300      	str	r3, [sp, #0]
 8006358:	9805      	ldr	r0, [sp, #20]
 800635a:	9b06      	ldr	r3, [sp, #24]
 800635c:	aa09      	add	r2, sp, #36	@ 0x24
 800635e:	f7ff fef5 	bl	800614c <_printf_common>
 8006362:	3001      	adds	r0, #1
 8006364:	d148      	bne.n	80063f8 <_printf_i+0x1cc>
 8006366:	2001      	movs	r0, #1
 8006368:	4240      	negs	r0, r0
 800636a:	b00b      	add	sp, #44	@ 0x2c
 800636c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800636e:	2220      	movs	r2, #32
 8006370:	6809      	ldr	r1, [r1, #0]
 8006372:	430a      	orrs	r2, r1
 8006374:	6022      	str	r2, [r4, #0]
 8006376:	2278      	movs	r2, #120	@ 0x78
 8006378:	4932      	ldr	r1, [pc, #200]	@ (8006444 <_printf_i+0x218>)
 800637a:	9104      	str	r1, [sp, #16]
 800637c:	0021      	movs	r1, r4
 800637e:	3145      	adds	r1, #69	@ 0x45
 8006380:	700a      	strb	r2, [r1, #0]
 8006382:	6819      	ldr	r1, [r3, #0]
 8006384:	6822      	ldr	r2, [r4, #0]
 8006386:	c940      	ldmia	r1!, {r6}
 8006388:	0610      	lsls	r0, r2, #24
 800638a:	d402      	bmi.n	8006392 <_printf_i+0x166>
 800638c:	0650      	lsls	r0, r2, #25
 800638e:	d500      	bpl.n	8006392 <_printf_i+0x166>
 8006390:	b2b6      	uxth	r6, r6
 8006392:	6019      	str	r1, [r3, #0]
 8006394:	07d3      	lsls	r3, r2, #31
 8006396:	d502      	bpl.n	800639e <_printf_i+0x172>
 8006398:	2320      	movs	r3, #32
 800639a:	4313      	orrs	r3, r2
 800639c:	6023      	str	r3, [r4, #0]
 800639e:	2e00      	cmp	r6, #0
 80063a0:	d001      	beq.n	80063a6 <_printf_i+0x17a>
 80063a2:	2710      	movs	r7, #16
 80063a4:	e7a8      	b.n	80062f8 <_printf_i+0xcc>
 80063a6:	2220      	movs	r2, #32
 80063a8:	6823      	ldr	r3, [r4, #0]
 80063aa:	4393      	bics	r3, r2
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	e7f8      	b.n	80063a2 <_printf_i+0x176>
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	680d      	ldr	r5, [r1, #0]
 80063b4:	1d10      	adds	r0, r2, #4
 80063b6:	6949      	ldr	r1, [r1, #20]
 80063b8:	6018      	str	r0, [r3, #0]
 80063ba:	6813      	ldr	r3, [r2, #0]
 80063bc:	062e      	lsls	r6, r5, #24
 80063be:	d501      	bpl.n	80063c4 <_printf_i+0x198>
 80063c0:	6019      	str	r1, [r3, #0]
 80063c2:	e002      	b.n	80063ca <_printf_i+0x19e>
 80063c4:	066d      	lsls	r5, r5, #25
 80063c6:	d5fb      	bpl.n	80063c0 <_printf_i+0x194>
 80063c8:	8019      	strh	r1, [r3, #0]
 80063ca:	2300      	movs	r3, #0
 80063cc:	9d03      	ldr	r5, [sp, #12]
 80063ce:	6123      	str	r3, [r4, #16]
 80063d0:	e7bf      	b.n	8006352 <_printf_i+0x126>
 80063d2:	681a      	ldr	r2, [r3, #0]
 80063d4:	1d11      	adds	r1, r2, #4
 80063d6:	6019      	str	r1, [r3, #0]
 80063d8:	6815      	ldr	r5, [r2, #0]
 80063da:	2100      	movs	r1, #0
 80063dc:	0028      	movs	r0, r5
 80063de:	6862      	ldr	r2, [r4, #4]
 80063e0:	f000 f858 	bl	8006494 <memchr>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d001      	beq.n	80063ec <_printf_i+0x1c0>
 80063e8:	1b40      	subs	r0, r0, r5
 80063ea:	6060      	str	r0, [r4, #4]
 80063ec:	6863      	ldr	r3, [r4, #4]
 80063ee:	6123      	str	r3, [r4, #16]
 80063f0:	2300      	movs	r3, #0
 80063f2:	9a03      	ldr	r2, [sp, #12]
 80063f4:	7013      	strb	r3, [r2, #0]
 80063f6:	e7ac      	b.n	8006352 <_printf_i+0x126>
 80063f8:	002a      	movs	r2, r5
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	9906      	ldr	r1, [sp, #24]
 80063fe:	9805      	ldr	r0, [sp, #20]
 8006400:	9d07      	ldr	r5, [sp, #28]
 8006402:	47a8      	blx	r5
 8006404:	3001      	adds	r0, #1
 8006406:	d0ae      	beq.n	8006366 <_printf_i+0x13a>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	079b      	lsls	r3, r3, #30
 800640c:	d415      	bmi.n	800643a <_printf_i+0x20e>
 800640e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006410:	68e0      	ldr	r0, [r4, #12]
 8006412:	4298      	cmp	r0, r3
 8006414:	daa9      	bge.n	800636a <_printf_i+0x13e>
 8006416:	0018      	movs	r0, r3
 8006418:	e7a7      	b.n	800636a <_printf_i+0x13e>
 800641a:	0022      	movs	r2, r4
 800641c:	2301      	movs	r3, #1
 800641e:	9906      	ldr	r1, [sp, #24]
 8006420:	9805      	ldr	r0, [sp, #20]
 8006422:	9e07      	ldr	r6, [sp, #28]
 8006424:	3219      	adds	r2, #25
 8006426:	47b0      	blx	r6
 8006428:	3001      	adds	r0, #1
 800642a:	d09c      	beq.n	8006366 <_printf_i+0x13a>
 800642c:	3501      	adds	r5, #1
 800642e:	68e3      	ldr	r3, [r4, #12]
 8006430:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006432:	1a9b      	subs	r3, r3, r2
 8006434:	42ab      	cmp	r3, r5
 8006436:	dcf0      	bgt.n	800641a <_printf_i+0x1ee>
 8006438:	e7e9      	b.n	800640e <_printf_i+0x1e2>
 800643a:	2500      	movs	r5, #0
 800643c:	e7f7      	b.n	800642e <_printf_i+0x202>
 800643e:	46c0      	nop			@ (mov r8, r8)
 8006440:	080066e5 	.word	0x080066e5
 8006444:	080066f6 	.word	0x080066f6

08006448 <memmove>:
 8006448:	b510      	push	{r4, lr}
 800644a:	4288      	cmp	r0, r1
 800644c:	d806      	bhi.n	800645c <memmove+0x14>
 800644e:	2300      	movs	r3, #0
 8006450:	429a      	cmp	r2, r3
 8006452:	d008      	beq.n	8006466 <memmove+0x1e>
 8006454:	5ccc      	ldrb	r4, [r1, r3]
 8006456:	54c4      	strb	r4, [r0, r3]
 8006458:	3301      	adds	r3, #1
 800645a:	e7f9      	b.n	8006450 <memmove+0x8>
 800645c:	188b      	adds	r3, r1, r2
 800645e:	4298      	cmp	r0, r3
 8006460:	d2f5      	bcs.n	800644e <memmove+0x6>
 8006462:	3a01      	subs	r2, #1
 8006464:	d200      	bcs.n	8006468 <memmove+0x20>
 8006466:	bd10      	pop	{r4, pc}
 8006468:	5c8b      	ldrb	r3, [r1, r2]
 800646a:	5483      	strb	r3, [r0, r2]
 800646c:	e7f9      	b.n	8006462 <memmove+0x1a>
	...

08006470 <_sbrk_r>:
 8006470:	2300      	movs	r3, #0
 8006472:	b570      	push	{r4, r5, r6, lr}
 8006474:	4d06      	ldr	r5, [pc, #24]	@ (8006490 <_sbrk_r+0x20>)
 8006476:	0004      	movs	r4, r0
 8006478:	0008      	movs	r0, r1
 800647a:	602b      	str	r3, [r5, #0]
 800647c:	f7fb f868 	bl	8001550 <_sbrk>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	d103      	bne.n	800648c <_sbrk_r+0x1c>
 8006484:	682b      	ldr	r3, [r5, #0]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d000      	beq.n	800648c <_sbrk_r+0x1c>
 800648a:	6023      	str	r3, [r4, #0]
 800648c:	bd70      	pop	{r4, r5, r6, pc}
 800648e:	46c0      	nop			@ (mov r8, r8)
 8006490:	200006ac 	.word	0x200006ac

08006494 <memchr>:
 8006494:	b2c9      	uxtb	r1, r1
 8006496:	1882      	adds	r2, r0, r2
 8006498:	4290      	cmp	r0, r2
 800649a:	d101      	bne.n	80064a0 <memchr+0xc>
 800649c:	2000      	movs	r0, #0
 800649e:	4770      	bx	lr
 80064a0:	7803      	ldrb	r3, [r0, #0]
 80064a2:	428b      	cmp	r3, r1
 80064a4:	d0fb      	beq.n	800649e <memchr+0xa>
 80064a6:	3001      	adds	r0, #1
 80064a8:	e7f6      	b.n	8006498 <memchr+0x4>

080064aa <memcpy>:
 80064aa:	2300      	movs	r3, #0
 80064ac:	b510      	push	{r4, lr}
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d100      	bne.n	80064b4 <memcpy+0xa>
 80064b2:	bd10      	pop	{r4, pc}
 80064b4:	5ccc      	ldrb	r4, [r1, r3]
 80064b6:	54c4      	strb	r4, [r0, r3]
 80064b8:	3301      	adds	r3, #1
 80064ba:	e7f8      	b.n	80064ae <memcpy+0x4>

080064bc <_realloc_r>:
 80064bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80064be:	0006      	movs	r6, r0
 80064c0:	000c      	movs	r4, r1
 80064c2:	0015      	movs	r5, r2
 80064c4:	2900      	cmp	r1, #0
 80064c6:	d105      	bne.n	80064d4 <_realloc_r+0x18>
 80064c8:	0011      	movs	r1, r2
 80064ca:	f7ff fc51 	bl	8005d70 <_malloc_r>
 80064ce:	0004      	movs	r4, r0
 80064d0:	0020      	movs	r0, r4
 80064d2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80064d4:	2a00      	cmp	r2, #0
 80064d6:	d103      	bne.n	80064e0 <_realloc_r+0x24>
 80064d8:	f7ff fbde 	bl	8005c98 <_free_r>
 80064dc:	2400      	movs	r4, #0
 80064de:	e7f7      	b.n	80064d0 <_realloc_r+0x14>
 80064e0:	f000 f81b 	bl	800651a <_malloc_usable_size_r>
 80064e4:	0007      	movs	r7, r0
 80064e6:	4285      	cmp	r5, r0
 80064e8:	d802      	bhi.n	80064f0 <_realloc_r+0x34>
 80064ea:	0843      	lsrs	r3, r0, #1
 80064ec:	42ab      	cmp	r3, r5
 80064ee:	d3ef      	bcc.n	80064d0 <_realloc_r+0x14>
 80064f0:	0029      	movs	r1, r5
 80064f2:	0030      	movs	r0, r6
 80064f4:	f7ff fc3c 	bl	8005d70 <_malloc_r>
 80064f8:	9001      	str	r0, [sp, #4]
 80064fa:	2800      	cmp	r0, #0
 80064fc:	d0ee      	beq.n	80064dc <_realloc_r+0x20>
 80064fe:	002a      	movs	r2, r5
 8006500:	42bd      	cmp	r5, r7
 8006502:	d900      	bls.n	8006506 <_realloc_r+0x4a>
 8006504:	003a      	movs	r2, r7
 8006506:	0021      	movs	r1, r4
 8006508:	9801      	ldr	r0, [sp, #4]
 800650a:	f7ff ffce 	bl	80064aa <memcpy>
 800650e:	0021      	movs	r1, r4
 8006510:	0030      	movs	r0, r6
 8006512:	f7ff fbc1 	bl	8005c98 <_free_r>
 8006516:	9c01      	ldr	r4, [sp, #4]
 8006518:	e7da      	b.n	80064d0 <_realloc_r+0x14>

0800651a <_malloc_usable_size_r>:
 800651a:	1f0b      	subs	r3, r1, #4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	1f18      	subs	r0, r3, #4
 8006520:	2b00      	cmp	r3, #0
 8006522:	da01      	bge.n	8006528 <_malloc_usable_size_r+0xe>
 8006524:	580b      	ldr	r3, [r1, r0]
 8006526:	18c0      	adds	r0, r0, r3
 8006528:	4770      	bx	lr
	...

0800652c <_init>:
 800652c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800652e:	46c0      	nop			@ (mov r8, r8)
 8006530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006532:	bc08      	pop	{r3}
 8006534:	469e      	mov	lr, r3
 8006536:	4770      	bx	lr

08006538 <_fini>:
 8006538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800653a:	46c0      	nop			@ (mov r8, r8)
 800653c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800653e:	bc08      	pop	{r3}
 8006540:	469e      	mov	lr, r3
 8006542:	4770      	bx	lr
