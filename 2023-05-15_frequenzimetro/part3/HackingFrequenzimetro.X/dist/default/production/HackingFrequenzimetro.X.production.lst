

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Mon Jun 12 15:53:57 2023

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     6                           	psect	clrtext,global,class=CODE,delta=2
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.20
    21                           ; Generated 12/02/2020 GMT
    22                           ; 
    23                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution.
    37                           ; 
    38                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    39                           ;        software without specific prior written permission.
    40                           ; 
    41                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    42                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    43                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    44                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    45                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    46                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    47                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    48                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    49                           ; 
    50                           ; 
    51                           ; Code-generator required, PIC16F628A Definitions
    52                           ; 
    53                           ; SFR Addresses
    54  0000                     	;# 
    55  0001                     	;# 
    56  0002                     	;# 
    57  0003                     	;# 
    58  0004                     	;# 
    59  0005                     	;# 
    60  0006                     	;# 
    61  000A                     	;# 
    62  000B                     	;# 
    63  000C                     	;# 
    64  000E                     	;# 
    65  000E                     	;# 
    66  000F                     	;# 
    67  0010                     	;# 
    68  0011                     	;# 
    69  0012                     	;# 
    70  0015                     	;# 
    71  0015                     	;# 
    72  0016                     	;# 
    73  0017                     	;# 
    74  0018                     	;# 
    75  0019                     	;# 
    76  001A                     	;# 
    77  001F                     	;# 
    78  0081                     	;# 
    79  0085                     	;# 
    80  0086                     	;# 
    81  008C                     	;# 
    82  008E                     	;# 
    83  0092                     	;# 
    84  0098                     	;# 
    85  0099                     	;# 
    86  009A                     	;# 
    87  009B                     	;# 
    88  009C                     	;# 
    89  009D                     	;# 
    90  009F                     	;# 
    91  0000                     	;# 
    92  0001                     	;# 
    93  0002                     	;# 
    94  0003                     	;# 
    95  0004                     	;# 
    96  0005                     	;# 
    97  0006                     	;# 
    98  000A                     	;# 
    99  000B                     	;# 
   100  000C                     	;# 
   101  000E                     	;# 
   102  000E                     	;# 
   103  000F                     	;# 
   104  0010                     	;# 
   105  0011                     	;# 
   106  0012                     	;# 
   107  0015                     	;# 
   108  0015                     	;# 
   109  0016                     	;# 
   110  0017                     	;# 
   111  0018                     	;# 
   112  0019                     	;# 
   113  001A                     	;# 
   114  001F                     	;# 
   115  0081                     	;# 
   116  0085                     	;# 
   117  0086                     	;# 
   118  008C                     	;# 
   119  008E                     	;# 
   120  0092                     	;# 
   121  0098                     	;# 
   122  0099                     	;# 
   123  009A                     	;# 
   124  009B                     	;# 
   125  009C                     	;# 
   126  009D                     	;# 
   127  009F                     	;# 
   128  0012                     _T2CONbits	set	18
   129  0006                     _PORTB	set	6
   130  0005                     _PORTA	set	5
   131  001F                     _CMCONbits	set	31
   132  000C                     _PIR1bits	set	12
   133  000B                     _INTCONbits	set	11
   134  0001                     _TMR0	set	1
   135  0061                     _TMR2IF	set	97
   136  005A                     _TMR0IF	set	90
   137  005D                     _TMR0IE	set	93
   138  0092                     _PR2	set	146
   139  0086                     _TRISB	set	134
   140  0085                     _TRISA	set	133
   141  008C                     _PIE1bits	set	140
   142  0081                     _OPTION_REGbits	set	129
   143  0461                     _TMR2IE	set	1121
   144                           
   145                           	psect	cinit
   146  000F                     start_initialization:	
   147                           ; #config settings
   148                           
   149  000F                     __initialization:
   150                           
   151                           ; Clear objects allocated to BANK0
   152  000F  1383               	bcf	3,7	;select IRP bank0
   153  0010  3045               	movlw	low __pbssBANK0
   154  0011  0084               	movwf	4
   155  0012  3051               	movlw	low (__pbssBANK0+12)
   156  0013  226E               	fcall	clear_ram0
   157  0014                     end_of_initialization:	
   158                           ;End of C runtime variable initialization code
   159                           
   160  0014                     __end_of__initialization:
   161  0014  0183               	clrf	3
   162  0015  2A76               	ljmp	_main	;jump to C main() function
   163                           
   164                           	psect	bssBANK0
   165  0045                     __pbssBANK0:
   166  0045                     _frequenza:
   167  0045                     	ds	4
   168  0049                     _millisecondi:
   169  0049                     	ds	2
   170  004B                     _t0_gross_prec:
   171  004B                     	ds	2
   172  004D                     _t0_gross:
   173  004D                     	ds	2
   174  004F                     _t0_ovl:
   175  004F                     	ds	2
   176                           
   177                           	psect	clrtext
   178  026E                     clear_ram0:	
   179                           ;	Called with FSR containing the base address, and
   180                           ;	W with the last address+1
   181                           
   182  026E  0064               	clrwdt	;clear the watchdog before getting into this loop
   183  026F                     clrloop0:
   184  026F  0180               	clrf	0	;clear RAM location pointed to by FSR
   185  0270  0A84               	incf	4,f	;increment pointer
   186  0271  0604               	xorwf	4,w	;XOR with final address
   187  0272  1903               	btfsc	3,2	;have we reached the end yet?
   188  0273  3400               	retlw	0	;all done for this memory range, return
   189  0274  0604               	xorwf	4,w	;XOR again to restore value
   190  0275  2A6F               	goto	clrloop0	;do the next byte
   191                           
   192                           	psect	cstackCOMMON
   193  0070                     __pcstackCOMMON:
   194  0070                     ?_tcInt:
   195  0070                     ?_setup:	
   196                           ; 1 bytes @ 0x0
   197                           
   198  0070                     ?_loop:	
   199                           ; 1 bytes @ 0x0
   200                           
   201  0070                     ?_main:	
   202                           ; 1 bytes @ 0x0
   203                           
   204  0070                     ?___lmul:	
   205                           ; 1 bytes @ 0x0
   206                           
   207  0070                     ___lmul@multiplier:	
   208                           ; 4 bytes @ 0x0
   209                           
   210                           
   211                           ; 4 bytes @ 0x0
   212  0070                     	ds	4
   213  0074                     ___lmul@multiplicand:
   214                           
   215                           ; 4 bytes @ 0x4
   216  0074                     	ds	4
   217  0078                     ??___lmul:
   218                           
   219                           ; 1 bytes @ 0x8
   220  0078                     	ds	1
   221  0079                     ___lmul@product:
   222                           
   223                           ; 4 bytes @ 0x9
   224  0079                     	ds	4
   225  007D                     ??___aldiv:
   226                           
   227                           ; 1 bytes @ 0xD
   228  007D                     	ds	1
   229                           
   230                           	psect	cstackBANK0
   231  0020                     __pcstackBANK0:
   232  0020                     ?___aldiv:
   233  0020                     ___aldiv@divisor:	
   234                           ; 4 bytes @ 0x0
   235                           
   236                           
   237                           ; 4 bytes @ 0x0
   238  0020                     	ds	4
   239  0024                     ___aldiv@dividend:
   240                           
   241                           ; 4 bytes @ 0x4
   242  0024                     	ds	4
   243  0028                     ___aldiv@counter:
   244                           
   245                           ; 1 bytes @ 0x8
   246  0028                     	ds	1
   247  0029                     ___aldiv@sign:
   248                           
   249                           ; 1 bytes @ 0x9
   250  0029                     	ds	1
   251  002A                     ___aldiv@quotient:
   252                           
   253                           ; 4 bytes @ 0xA
   254  002A                     	ds	4
   255  002E                     ??_tcInt:
   256                           
   257                           ; 1 bytes @ 0xE
   258  002E                     	ds	9
   259  0037                     ??_setup:
   260  0037                     ?___xxtofl:	
   261                           ; 1 bytes @ 0x17
   262                           
   263  0037                     ___xxtofl@val:	
   264                           ; 4 bytes @ 0x17
   265                           
   266                           
   267                           ; 4 bytes @ 0x17
   268  0037                     	ds	4
   269  003B                     ??___xxtofl:
   270                           
   271                           ; 1 bytes @ 0x1B
   272  003B                     	ds	4
   273  003F                     ___xxtofl@sign:
   274                           
   275                           ; 1 bytes @ 0x1F
   276  003F                     	ds	1
   277  0040                     ___xxtofl@exp:
   278                           
   279                           ; 1 bytes @ 0x20
   280  0040                     	ds	1
   281  0041                     ___xxtofl@arg:
   282                           
   283                           ; 4 bytes @ 0x21
   284  0041                     	ds	4
   285  0045                     ??_loop:
   286  0045                     ??_main:	
   287                           ; 1 bytes @ 0x25
   288                           
   289                           
   290                           	psect	maintext
   291  0276                     __pmaintext:	
   292                           ; 1 bytes @ 0x25
   293 ;;
   294 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   295 ;;
   296 ;; *************** function _main *****************
   297 ;; Defined at:
   298 ;;		line 136 in file "main.c"
   299 ;; Parameters:    Size  Location     Type
   300 ;;		None
   301 ;; Auto vars:     Size  Location     Type
   302 ;;		None
   303 ;; Return value:  Size  Location     Type
   304 ;;                  1    wreg      void 
   305 ;; Registers used:
   306 ;;		wreg, status,2, status,0, pclath, cstack
   307 ;; Tracked objects:
   308 ;;		On entry : B00/0
   309 ;;		On exit  : 0/0
   310 ;;		Unchanged: 0/0
   311 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   312 ;;      Params:         0       0       0       0
   313 ;;      Locals:         0       0       0       0
   314 ;;      Temps:          0       0       0       0
   315 ;;      Totals:         0       0       0       0
   316 ;;Total ram usage:        0 bytes
   317 ;; Hardware stack levels required when called: 4
   318 ;; This function calls:
   319 ;;		_loop
   320 ;;		_setup
   321 ;; This function is called by:
   322 ;;		Startup code after reset
   323 ;; This function uses a non-reentrant model
   324 ;;
   325                           
   326                           
   327                           ;psect for function _main
   328  0276                     _main:
   329                           
   330                           ;main.c: 137:     setup();
   331                           
   332                           ;incstack = 0
   333                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   334  0276  21DD               	fcall	_setup
   335  0277                     l61:	
   336                           ;main.c: 139:     while ( 1 ) {
   337                           
   338                           
   339                           ;main.c: 141:         loop();
   340  0277  225F               	fcall	_loop
   341  0278  2A77               	goto	l61
   342  0279                     __end_of_main:
   343                           
   344                           	psect	text1
   345  01DD                     __ptext1:	
   346 ;; *************** function _setup *****************
   347 ;; Defined at:
   348 ;;		line 60 in file "main.c"
   349 ;; Parameters:    Size  Location     Type
   350 ;;		None
   351 ;; Auto vars:     Size  Location     Type
   352 ;;		None
   353 ;; Return value:  Size  Location     Type
   354 ;;                  1    wreg      void 
   355 ;; Registers used:
   356 ;;		wreg, status,2, status,0
   357 ;; Tracked objects:
   358 ;;		On entry : 0/0
   359 ;;		On exit  : 0/0
   360 ;;		Unchanged: 0/0
   361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   362 ;;      Params:         0       0       0       0
   363 ;;      Locals:         0       0       0       0
   364 ;;      Temps:          0       0       0       0
   365 ;;      Totals:         0       0       0       0
   366 ;;Total ram usage:        0 bytes
   367 ;; Hardware stack levels used: 1
   368 ;; Hardware stack levels required when called: 2
   369 ;; This function calls:
   370 ;;		Nothing
   371 ;; This function is called by:
   372 ;;		_main
   373 ;; This function uses a non-reentrant model
   374 ;;
   375                           
   376                           
   377                           ;psect for function _setup
   378  01DD                     _setup:
   379                           
   380                           ;main.c: 62:     OPTION_REGbits.PS = 7;
   381                           
   382                           ;incstack = 0
   383                           ; Regs used in _setup: [wreg+status,2+status,0]
   384  01DD  3007               	movlw	7
   385  01DE  1683               	bsf	3,5	;RP0=1, select bank1
   386  01DF  1303               	bcf	3,6	;RP1=0, select bank1
   387  01E0  0481               	iorwf	1,f	;volatile
   388                           
   389                           ;main.c: 63:     OPTION_REGbits.PSA = 1;
   390  01E1  1581               	bsf	1,3	;volatile
   391                           
   392                           ;main.c: 64:     OPTION_REGbits.T0SE = 0;
   393  01E2  1201               	bcf	1,4	;volatile
   394                           
   395                           ;main.c: 65:     OPTION_REGbits.T0CS = 1;
   396  01E3  1681               	bsf	1,5	;volatile
   397                           
   398                           ;main.c: 66:     OPTION_REGbits.nRBPU = 1;
   399  01E4  1781               	bsf	1,7	;volatile
   400                           
   401                           ;main.c: 68:     INTCONbits.GIE = 0;
   402  01E5  138B               	bcf	11,7	;volatile
   403                           
   404                           ;main.c: 70:     INTCONbits.PEIE = 1;
   405  01E6  170B               	bsf	11,6	;volatile
   406                           
   407                           ;main.c: 71:     INTCONbits.T0IE = 1;
   408  01E7  168B               	bsf	11,5	;volatile
   409                           
   410                           ;main.c: 72:     INTCONbits.T0IF = 0;
   411  01E8  110B               	bcf	11,2	;volatile
   412                           
   413                           ;main.c: 74:     PIE1bits.TMR2IE = 1;
   414  01E9  148C               	bsf	12,1	;volatile
   415                           
   416                           ;main.c: 76:     PIR1bits.TMR2IF = 0;
   417  01EA  1283               	bcf	3,5	;RP0=0, select bank0
   418  01EB  1303               	bcf	3,6	;RP1=0, select bank0
   419  01EC  108C               	bcf	12,1	;volatile
   420                           
   421                           ;main.c: 80:     CMCONbits.CM = 7;
   422  01ED  3007               	movlw	7
   423  01EE  049F               	iorwf	31,f	;volatile
   424                           
   425                           ;main.c: 82:     TRISA = 0b00110000;
   426  01EF  3030               	movlw	48
   427  01F0  1683               	bsf	3,5	;RP0=1, select bank1
   428  01F1  1303               	bcf	3,6	;RP1=0, select bank1
   429  01F2  0085               	movwf	5	;volatile
   430                           
   431                           ;main.c: 86:     PORTA = 0b00001111;
   432  01F3  300F               	movlw	15
   433  01F4  1283               	bcf	3,5	;RP0=0, select bank0
   434  01F5  1303               	bcf	3,6	;RP1=0, select bank0
   435  01F6  0085               	movwf	5	;volatile
   436                           
   437                           ;main.c: 88:     TRISB = 0b00000000;
   438  01F7  1683               	bsf	3,5	;RP0=1, select bank1
   439  01F8  1303               	bcf	3,6	;RP1=0, select bank1
   440  01F9  0186               	clrf	6	;volatile
   441                           
   442                           ;main.c: 97:     PORTB = 0b00000000;
   443  01FA  1283               	bcf	3,5	;RP0=0, select bank0
   444  01FB  1303               	bcf	3,6	;RP1=0, select bank0
   445  01FC  0186               	clrf	6	;volatile
   446                           
   447                           ;main.c: 102:     TMR0 = 0;
   448  01FD  0181               	clrf	1	;volatile
   449                           
   450                           ;main.c: 105:     T2CONbits.T2CKPS = 1;
   451  01FE  0812               	movf	18,w	;volatile
   452  01FF  39FC               	andlw	-4
   453  0200  3801               	iorlw	1
   454  0201  0092               	movwf	18	;volatile
   455                           
   456                           ;main.c: 106:     T2CONbits.TOUTPS = 10-1;
   457  0202  0812               	movf	18,w	;volatile
   458  0203  3987               	andlw	-121
   459  0204  3848               	iorlw	72
   460  0205  0092               	movwf	18	;volatile
   461                           
   462                           ;main.c: 107:     T2CONbits.TMR2ON = 1;
   463  0206  1512               	bsf	18,2	;volatile
   464                           
   465                           ;main.c: 108:     PR2 = 125 - 1;
   466  0207  307C               	movlw	124
   467  0208  1683               	bsf	3,5	;RP0=1, select bank1
   468  0209  1303               	bcf	3,6	;RP1=0, select bank1
   469  020A  0092               	movwf	18	;volatile
   470                           
   471                           ;main.c: 111:     t0_ovl = 0;
   472  020B  1283               	bcf	3,5	;RP0=0, select bank0
   473  020C  1303               	bcf	3,6	;RP1=0, select bank0
   474  020D  01CF               	clrf	_t0_ovl	;volatile
   475  020E  01D0               	clrf	_t0_ovl+1	;volatile
   476                           
   477                           ;main.c: 112:     TMR0 = 0;
   478  020F  0181               	clrf	1	;volatile
   479                           
   480                           ;main.c: 114:     t0_gross = 0;
   481  0210  01CD               	clrf	_t0_gross	;volatile
   482  0211  01CE               	clrf	_t0_gross+1	;volatile
   483                           
   484                           ;main.c: 115:     t0_gross_prec = 0;
   485  0212  01CB               	clrf	_t0_gross_prec	;volatile
   486  0213  01CC               	clrf	_t0_gross_prec+1	;volatile
   487                           
   488                           ;main.c: 117:     millisecondi = 0;
   489  0214  01C9               	clrf	_millisecondi	;volatile
   490  0215  01CA               	clrf	_millisecondi+1	;volatile
   491                           
   492                           ;main.c: 118:     frequenza = 0;
   493  0216  3000               	movlw	0
   494  0217  00C8               	movwf	_frequenza+3	;volatile
   495  0218  3000               	movlw	0
   496  0219  00C7               	movwf	_frequenza+2	;volatile
   497  021A  3000               	movlw	0
   498  021B  00C6               	movwf	_frequenza+1	;volatile
   499  021C  3000               	movlw	0
   500  021D  00C5               	movwf	_frequenza	;volatile
   501                           
   502                           ;main.c: 120:     INTCONbits.GIE = 1;
   503  021E  178B               	bsf	11,7	;volatile
   504  021F  0008               	return
   505  0220                     __end_of_setup:
   506                           
   507                           	psect	text2
   508  025F                     __ptext2:	
   509 ;; *************** function _loop *****************
   510 ;; Defined at:
   511 ;;		line 123 in file "main.c"
   512 ;; Parameters:    Size  Location     Type
   513 ;;		None
   514 ;; Auto vars:     Size  Location     Type
   515 ;;  f               4    0        float 
   516 ;; Return value:  Size  Location     Type
   517 ;;                  1    wreg      void 
   518 ;; Registers used:
   519 ;;		wreg, status,2, status,0, pclath, cstack
   520 ;; Tracked objects:
   521 ;;		On entry : 0/0
   522 ;;		On exit  : 0/0
   523 ;;		Unchanged: 0/0
   524 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   525 ;;      Params:         0       0       0       0
   526 ;;      Locals:         0       0       0       0
   527 ;;      Temps:          0       0       0       0
   528 ;;      Totals:         0       0       0       0
   529 ;;Total ram usage:        0 bytes
   530 ;; Hardware stack levels used: 1
   531 ;; Hardware stack levels required when called: 3
   532 ;; This function calls:
   533 ;;		___xxtofl
   534 ;; This function is called by:
   535 ;;		_main
   536 ;; This function uses a non-reentrant model
   537 ;;
   538                           
   539                           
   540                           ;psect for function _loop
   541  025F                     _loop:
   542                           
   543                           ;main.c: 126:     float f;;main.c: 128:     INTCONbits.GIE = 0;
   544                           
   545                           ;incstack = 0
   546                           ; Regs used in _loop: [wreg+status,2+status,0+pclath+cstack]
   547  025F  138B               	bcf	11,7	;volatile
   548  0260  1283               	bcf	3,5	;RP0=0, select bank0
   549  0261  1303               	bcf	3,6	;RP1=0, select bank0
   550  0262  0848               	movf	_frequenza+3,w	;volatile
   551  0263  00BA               	movwf	___xxtofl@val+3
   552  0264  0847               	movf	_frequenza+2,w	;volatile
   553  0265  00B9               	movwf	___xxtofl@val+2
   554  0266  0846               	movf	_frequenza+1,w	;volatile
   555  0267  00B8               	movwf	___xxtofl@val+1
   556  0268  0845               	movf	_frequenza,w	;volatile
   557  0269  00B7               	movwf	___xxtofl@val
   558  026A  3001               	movlw	1
   559  026B  2016               	fcall	___xxtofl
   560                           
   561                           ;main.c: 130:     INTCONbits.GIE = 1;
   562  026C  178B               	bsf	11,7	;volatile
   563  026D  0008               	return
   564  026E                     __end_of_loop:
   565                           
   566                           	psect	text3
   567  0016                     __ptext3:	
   568 ;; *************** function ___xxtofl *****************
   569 ;; Defined at:
   570 ;;		line 10 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\xxtofl.c"
   571 ;; Parameters:    Size  Location     Type
   572 ;;  sign            1    wreg     unsigned char 
   573 ;;  val             4   23[BANK0 ] long 
   574 ;; Auto vars:     Size  Location     Type
   575 ;;  sign            1   31[BANK0 ] unsigned char 
   576 ;;  arg             4   33[BANK0 ] unsigned long 
   577 ;;  exp             1   32[BANK0 ] unsigned char 
   578 ;; Return value:  Size  Location     Type
   579 ;;                  4   23[BANK0 ] unsigned char 
   580 ;; Registers used:
   581 ;;		wreg, status,2, status,0
   582 ;; Tracked objects:
   583 ;;		On entry : 0/0
   584 ;;		On exit  : 0/0
   585 ;;		Unchanged: 0/0
   586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   587 ;;      Params:         0       4       0       0
   588 ;;      Locals:         0       6       0       0
   589 ;;      Temps:          0       4       0       0
   590 ;;      Totals:         0      14       0       0
   591 ;;Total ram usage:       14 bytes
   592 ;; Hardware stack levels used: 1
   593 ;; Hardware stack levels required when called: 2
   594 ;; This function calls:
   595 ;;		Nothing
   596 ;; This function is called by:
   597 ;;		_loop
   598 ;; This function uses a non-reentrant model
   599 ;;
   600                           
   601                           
   602                           ;psect for function ___xxtofl
   603  0016                     ___xxtofl:
   604                           
   605                           ;incstack = 0
   606                           ; Regs used in ___xxtofl: [wreg+status,2+status,0]
   607                           ;___xxtofl@sign stored from wreg
   608  0016  1283               	bcf	3,5	;RP0=0, select bank0
   609  0017  1303               	bcf	3,6	;RP1=0, select bank0
   610  0018  00BF               	movwf	___xxtofl@sign
   611  0019  083F               	movf	___xxtofl@sign,w
   612  001A  1D03               	btfss	3,2
   613  001B  1FBA               	btfss	___xxtofl@val+3,7
   614  001C  282D               	goto	l850
   615  001D  0937               	comf	___xxtofl@val,w
   616  001E  00C1               	movwf	___xxtofl@arg
   617  001F  0938               	comf	___xxtofl@val+1,w
   618  0020  00C2               	movwf	___xxtofl@arg+1
   619  0021  0939               	comf	___xxtofl@val+2,w
   620  0022  00C3               	movwf	___xxtofl@arg+2
   621  0023  093A               	comf	___xxtofl@val+3,w
   622  0024  00C4               	movwf	___xxtofl@arg+3
   623  0025  0AC1               	incf	___xxtofl@arg,f
   624  0026  1903               	skipnz
   625  0027  0AC2               	incf	___xxtofl@arg+1,f
   626  0028  1903               	skipnz
   627  0029  0AC3               	incf	___xxtofl@arg+2,f
   628  002A  1903               	skipnz
   629  002B  0AC4               	incf	___xxtofl@arg+3,f
   630  002C  2835               	goto	l583
   631  002D                     l850:
   632  002D  083A               	movf	___xxtofl@val+3,w
   633  002E  00C4               	movwf	___xxtofl@arg+3
   634  002F  0839               	movf	___xxtofl@val+2,w
   635  0030  00C3               	movwf	___xxtofl@arg+2
   636  0031  0838               	movf	___xxtofl@val+1,w
   637  0032  00C2               	movwf	___xxtofl@arg+1
   638  0033  0837               	movf	___xxtofl@val,w
   639  0034  00C1               	movwf	___xxtofl@arg
   640  0035                     l583:
   641  0035  083A               	movf	___xxtofl@val+3,w
   642  0036  0439               	iorwf	___xxtofl@val+2,w
   643  0037  0438               	iorwf	___xxtofl@val+1,w
   644  0038  0437               	iorwf	___xxtofl@val,w
   645  0039  1D03               	skipz
   646  003A  2844               	goto	l856
   647  003B  3000               	movlw	0
   648  003C  00BA               	movwf	?___xxtofl+3
   649  003D  3000               	movlw	0
   650  003E  00B9               	movwf	?___xxtofl+2
   651  003F  3000               	movlw	0
   652  0040  00B8               	movwf	?___xxtofl+1
   653  0041  3000               	movlw	0
   654  0042  00B7               	movwf	?___xxtofl
   655  0043  0008               	return
   656  0044                     l856:
   657  0044  3096               	movlw	150
   658  0045  00BB               	movwf	??___xxtofl
   659  0046  083B               	movf	??___xxtofl,w
   660  0047  00C0               	movwf	___xxtofl@exp
   661  0048                     l860:
   662  0048  30FE               	movlw	254
   663  0049  0544               	andwf	___xxtofl@arg+3,w
   664  004A  1903               	btfsc	3,2
   665  004B  2875               	goto	l589
   666  004C  3001               	movlw	1
   667  004D  00BB               	movwf	??___xxtofl
   668  004E  083B               	movf	??___xxtofl,w
   669  004F  07C0               	addwf	___xxtofl@exp,f
   670  0050  3001               	movlw	1
   671  0051                     u395:
   672  0051  1003               	clrc
   673  0052  0CC4               	rrf	___xxtofl@arg+3,f
   674  0053  0CC3               	rrf	___xxtofl@arg+2,f
   675  0054  0CC2               	rrf	___xxtofl@arg+1,f
   676  0055  0CC1               	rrf	___xxtofl@arg,f
   677  0056  3EFF               	addlw	-1
   678  0057  1D03               	skipz
   679  0058  2851               	goto	u395
   680  0059  2848               	goto	l860
   681  005A                     l862:
   682  005A  3001               	movlw	1
   683  005B  00BB               	movwf	??___xxtofl
   684  005C  083B               	movf	??___xxtofl,w
   685  005D  07C0               	addwf	___xxtofl@exp,f
   686  005E  3001               	movlw	1
   687  005F  07C1               	addwf	___xxtofl@arg,f
   688  0060  3000               	movlw	0
   689  0061  1803               	skipnc
   690  0062  3001               	movlw	1
   691  0063  07C2               	addwf	___xxtofl@arg+1,f
   692  0064  3000               	movlw	0
   693  0065  1803               	skipnc
   694  0066  3001               	movlw	1
   695  0067  07C3               	addwf	___xxtofl@arg+2,f
   696  0068  3000               	movlw	0
   697  0069  1803               	skipnc
   698  006A  3001               	movlw	1
   699  006B  07C4               	addwf	___xxtofl@arg+3,f
   700  006C  3001               	movlw	1
   701  006D                     u415:
   702  006D  1003               	clrc
   703  006E  0CC4               	rrf	___xxtofl@arg+3,f
   704  006F  0CC3               	rrf	___xxtofl@arg+2,f
   705  0070  0CC2               	rrf	___xxtofl@arg+1,f
   706  0071  0CC1               	rrf	___xxtofl@arg,f
   707  0072  3EFF               	addlw	-1
   708  0073  1D03               	skipz
   709  0074  286D               	goto	u415
   710  0075                     l589:
   711  0075  30FF               	movlw	255
   712  0076  0544               	andwf	___xxtofl@arg+3,w
   713  0077  1903               	btfsc	3,2
   714  0078  2889               	goto	l870
   715  0079  285A               	goto	l862
   716  007A                     l872:
   717  007A  3002               	movlw	2
   718  007B  0240               	subwf	___xxtofl@exp,w
   719  007C  1C03               	btfss	3,0
   720  007D  288B               	goto	l596
   721  007E  3001               	movlw	1
   722  007F  02C0               	subwf	___xxtofl@exp,f
   723  0080  3001               	movlw	1
   724  0081  00BB               	movwf	??___xxtofl
   725  0082                     u435:
   726  0082  1003               	clrc
   727  0083  0DC1               	rlf	___xxtofl@arg,f
   728  0084  0DC2               	rlf	___xxtofl@arg+1,f
   729  0085  0DC3               	rlf	___xxtofl@arg+2,f
   730  0086  0DC4               	rlf	___xxtofl@arg+3,f
   731  0087  0BBB               	decfsz	??___xxtofl,f
   732  0088  2882               	goto	u435
   733  0089                     l870:
   734  0089  1FC3               	btfss	___xxtofl@arg+2,7
   735  008A  287A               	goto	l872
   736  008B                     l596:
   737  008B  1840               	btfsc	___xxtofl@exp,0
   738  008C  2895               	goto	l597
   739  008D  30FF               	movlw	255
   740  008E  05C1               	andwf	___xxtofl@arg,f
   741  008F  30FF               	movlw	255
   742  0090  05C2               	andwf	___xxtofl@arg+1,f
   743  0091  307F               	movlw	127
   744  0092  05C3               	andwf	___xxtofl@arg+2,f
   745  0093  30FF               	movlw	255
   746  0094  05C4               	andwf	___xxtofl@arg+3,f
   747  0095                     l597:
   748  0095  1003               	clrc
   749  0096  0CC0               	rrf	___xxtofl@exp,f
   750  0097  0840               	movf	___xxtofl@exp,w
   751  0098  00BB               	movwf	??___xxtofl
   752  0099  01BC               	clrf	??___xxtofl+1
   753  009A  01BD               	clrf	??___xxtofl+2
   754  009B  01BE               	clrf	??___xxtofl+3
   755  009C  3018               	movlw	24
   756  009D                     u475:
   757  009D  1003               	clrc
   758  009E  0DBB               	rlf	??___xxtofl,f
   759  009F  0DBC               	rlf	??___xxtofl+1,f
   760  00A0  0DBD               	rlf	??___xxtofl+2,f
   761  00A1  0DBE               	rlf	??___xxtofl+3,f
   762  00A2  3EFF               	addlw	-1
   763  00A3  1D03               	skipz
   764  00A4  289D               	goto	u475
   765  00A5  083B               	movf	??___xxtofl,w
   766  00A6  04C1               	iorwf	___xxtofl@arg,f
   767  00A7  083C               	movf	??___xxtofl+1,w
   768  00A8  04C2               	iorwf	___xxtofl@arg+1,f
   769  00A9  083D               	movf	??___xxtofl+2,w
   770  00AA  04C3               	iorwf	___xxtofl@arg+2,f
   771  00AB  083E               	movf	??___xxtofl+3,w
   772  00AC  04C4               	iorwf	___xxtofl@arg+3,f
   773  00AD  083F               	movf	___xxtofl@sign,w
   774  00AE  1D03               	btfss	3,2
   775  00AF  1FBA               	btfss	___xxtofl@val+3,7
   776  00B0  28B2               	goto	l884
   777  00B1  17C4               	bsf	___xxtofl@arg+3,7
   778  00B2                     l884:
   779  00B2  0844               	movf	___xxtofl@arg+3,w
   780  00B3  00BA               	movwf	?___xxtofl+3
   781  00B4  0843               	movf	___xxtofl@arg+2,w
   782  00B5  00B9               	movwf	?___xxtofl+2
   783  00B6  0842               	movf	___xxtofl@arg+1,w
   784  00B7  00B8               	movwf	?___xxtofl+1
   785  00B8  0841               	movf	___xxtofl@arg,w
   786  00B9  00B7               	movwf	?___xxtofl
   787  00BA  0008               	return
   788  00BB                     __end_of___xxtofl:
   789                           
   790                           	psect	text4
   791  00BB                     __ptext4:	
   792 ;; *************** function _tcInt *****************
   793 ;; Defined at:
   794 ;;		line 29 in file "main.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;		None
   797 ;; Auto vars:     Size  Location     Type
   798 ;;		None
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		wreg, status,2, status,0, btemp+1, pclath, cstack
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   808 ;;      Params:         0       0       0       0
   809 ;;      Locals:         0       0       0       0
   810 ;;      Temps:          0       9       0       0
   811 ;;      Totals:         0       9       0       0
   812 ;;Total ram usage:        9 bytes
   813 ;; Hardware stack levels used: 1
   814 ;; Hardware stack levels required when called: 1
   815 ;; This function calls:
   816 ;;		___aldiv
   817 ;;		___lmul
   818 ;; This function is called by:
   819 ;;		Interrupt level 1
   820 ;; This function uses a non-reentrant model
   821 ;;
   822                           
   823                           
   824                           ;psect for function _tcInt
   825  00BB                     _tcInt:
   826                           
   827                           ;main.c: 31:     if (TMR0IE && TMR0IF) {
   828  00BB  1A8B               	btfsc	11,5	;volatile
   829  00BC  1D0B               	btfss	11,2	;volatile
   830  00BD  28C5               	goto	i1l1010
   831                           
   832                           ;main.c: 32:         TMR0IF=0;
   833  00BE  110B               	bcf	11,2	;volatile
   834                           
   835                           ;main.c: 34:         t0_ovl += 256;
   836  00BF  3000               	movlw	0
   837  00C0  07CF               	addwf	_t0_ovl,f	;volatile
   838  00C1  1803               	skipnc
   839  00C2  0AD0               	incf	_t0_ovl+1,f	;volatile
   840  00C3  3001               	movlw	1
   841  00C4  07D0               	addwf	_t0_ovl+1,f	;volatile
   842  00C5                     i1l1010:
   843                           
   844                           ;main.c: 37:     if (TMR2IE && TMR2IF) {
   845  00C5  1683               	bsf	3,5	;RP0=1, select bank1
   846  00C6  1303               	bcf	3,6	;RP1=0, select bank1
   847  00C7  1C8C               	btfss	12,1	;volatile
   848  00C8  2943               	goto	i1l50
   849  00C9  1283               	bcf	3,5	;RP0=0, select bank0
   850  00CA  1303               	bcf	3,6	;RP1=0, select bank0
   851  00CB  1C8C               	btfss	12,1	;volatile
   852  00CC  2943               	goto	i1l50
   853                           
   854                           ;main.c: 38:         TMR2IF=0;
   855  00CD  108C               	bcf	12,1	;volatile
   856                           
   857                           ;main.c: 41:         millisecondi ++;
   858  00CE  3001               	movlw	1
   859  00CF  07C9               	addwf	_millisecondi,f	;volatile
   860  00D0  1803               	skipnc
   861  00D1  0ACA               	incf	_millisecondi+1,f	;volatile
   862  00D2  3000               	movlw	0
   863  00D3  07CA               	addwf	_millisecondi+1,f	;volatile
   864                           
   865                           ;main.c: 43:         if (millisecondi >= 1000) {
   866  00D4  084A               	movf	_millisecondi+1,w	;volatile
   867  00D5  3A80               	xorlw	128
   868  00D6  00FF               	movwf	127
   869  00D7  3083               	movlw	131
   870  00D8  027F               	subwf	127,w
   871  00D9  1D03               	skipz
   872  00DA  28DD               	goto	u69_25
   873  00DB  30E8               	movlw	232
   874  00DC  0249               	subwf	_millisecondi,w	;volatile
   875  00DD                     u69_25:
   876  00DD  1C03               	skipc
   877  00DE  2943               	goto	i1l50
   878                           
   879                           ;main.c: 46:             t0_gross = TMR0 + t0_ovl;
   880  00DF  1283               	bcf	3,5	;RP0=0, select bank0
   881  00E0  1303               	bcf	3,6	;RP1=0, select bank0
   882  00E1  0801               	movf	1,w	;volatile
   883  00E2  074F               	addwf	_t0_ovl,w	;volatile
   884  00E3  00AE               	movwf	??_tcInt
   885  00E4  0850               	movf	_t0_ovl+1,w	;volatile
   886  00E5  1803               	skipnc
   887  00E6  0A50               	incf	_t0_ovl+1,w	;volatile
   888  00E7  00AF               	movwf	??_tcInt+1
   889  00E8  082E               	movf	??_tcInt,w
   890  00E9  00CD               	movwf	_t0_gross	;volatile
   891  00EA  082F               	movf	??_tcInt+1,w
   892  00EB  00CE               	movwf	_t0_gross+1	;volatile
   893                           
   894                           ;main.c: 49:             frequenza = ((frequenza * 3) + (t0_gross - t0_gross_prec)) / 4;
   895  00EC  3000               	movlw	0
   896  00ED  00A3               	movwf	___aldiv@divisor+3
   897  00EE  3000               	movlw	0
   898  00EF  00A2               	movwf	___aldiv@divisor+2
   899  00F0  3000               	movlw	0
   900  00F1  00A1               	movwf	___aldiv@divisor+1
   901  00F2  3004               	movlw	4
   902  00F3  00A0               	movwf	___aldiv@divisor
   903  00F4  084B               	movf	_t0_gross_prec,w	;volatile
   904  00F5  024D               	subwf	_t0_gross,w	;volatile
   905  00F6  00AE               	movwf	??_tcInt
   906  00F7  084C               	movf	_t0_gross_prec+1,w	;volatile
   907  00F8  1C03               	skipc
   908  00F9  0A4C               	incf	_t0_gross_prec+1,w	;volatile
   909  00FA  024E               	subwf	_t0_gross+1,w	;volatile
   910  00FB  00AF               	movwf	??_tcInt+1
   911  00FC  082E               	movf	??_tcInt,w
   912  00FD  00B0               	movwf	??_tcInt+2
   913  00FE  082F               	movf	??_tcInt+1,w
   914  00FF  00B1               	movwf	??_tcInt+3
   915  0100  3000               	movlw	0
   916  0101  1BB1               	btfsc	??_tcInt+3,7
   917  0102  30FF               	movlw	255
   918  0103  00B2               	movwf	??_tcInt+4
   919  0104  00B3               	movwf	??_tcInt+5
   920  0105  0848               	movf	_frequenza+3,w	;volatile
   921  0106  00F3               	movwf	___lmul@multiplier+3
   922  0107  0847               	movf	_frequenza+2,w	;volatile
   923  0108  00F2               	movwf	___lmul@multiplier+2
   924  0109  0846               	movf	_frequenza+1,w	;volatile
   925  010A  00F1               	movwf	___lmul@multiplier+1
   926  010B  0845               	movf	_frequenza,w	;volatile
   927  010C  00F0               	movwf	___lmul@multiplier
   928  010D  3000               	movlw	0
   929  010E  00F7               	movwf	___lmul@multiplicand+3
   930  010F  3000               	movlw	0
   931  0110  00F6               	movwf	___lmul@multiplicand+2
   932  0111  3000               	movlw	0
   933  0112  00F5               	movwf	___lmul@multiplicand+1
   934  0113  3003               	movlw	3
   935  0114  00F4               	movwf	___lmul@multiplicand
   936  0115  2220               	fcall	___lmul
   937  0116  0870               	movf	?___lmul,w
   938  0117  1283               	bcf	3,5	;RP0=0, select bank0
   939  0118  1303               	bcf	3,6	;RP1=0, select bank0
   940  0119  07B0               	addwf	??_tcInt+2,f
   941  011A  0871               	movf	?___lmul+1,w
   942  011B  1803               	skipnc
   943  011C  0F71               	incfsz	?___lmul+1,w
   944  011D  291F               	goto	u70_20
   945  011E  2920               	goto	u70_21
   946  011F                     u70_20:
   947  011F  07B1               	addwf	??_tcInt+3,f
   948  0120                     u70_21:
   949  0120  0872               	movf	?___lmul+2,w
   950  0121  1803               	skipnc
   951  0122  0F72               	incfsz	?___lmul+2,w
   952  0123  2925               	goto	u70_22
   953  0124  2926               	goto	u70_23
   954  0125                     u70_22:
   955  0125  07B2               	addwf	??_tcInt+4,f
   956  0126                     u70_23:
   957  0126  0873               	movf	?___lmul+3,w
   958  0127  1803               	skipnc
   959  0128  0A73               	incf	?___lmul+3,w
   960  0129  07B3               	addwf	??_tcInt+5,f
   961  012A  0833               	movf	??_tcInt+5,w
   962  012B  00A7               	movwf	___aldiv@dividend+3
   963  012C  0832               	movf	??_tcInt+4,w
   964  012D  00A6               	movwf	___aldiv@dividend+2
   965  012E  0831               	movf	??_tcInt+3,w
   966  012F  00A5               	movwf	___aldiv@dividend+1
   967  0130  0830               	movf	??_tcInt+2,w
   968  0131  00A4               	movwf	___aldiv@dividend
   969  0132  214E               	fcall	___aldiv
   970  0133  1283               	bcf	3,5	;RP0=0, select bank0
   971  0134  1303               	bcf	3,6	;RP1=0, select bank0
   972  0135  0823               	movf	?___aldiv+3,w
   973  0136  00C8               	movwf	_frequenza+3	;volatile
   974  0137  0822               	movf	?___aldiv+2,w
   975  0138  00C7               	movwf	_frequenza+2	;volatile
   976  0139  0821               	movf	?___aldiv+1,w
   977  013A  00C6               	movwf	_frequenza+1	;volatile
   978  013B  0820               	movf	?___aldiv,w
   979  013C  00C5               	movwf	_frequenza	;volatile
   980                           
   981                           ;main.c: 51:             t0_gross_prec = t0_gross;
   982  013D  084E               	movf	_t0_gross+1,w	;volatile
   983  013E  00CC               	movwf	_t0_gross_prec+1	;volatile
   984  013F  084D               	movf	_t0_gross,w	;volatile
   985  0140  00CB               	movwf	_t0_gross_prec	;volatile
   986                           
   987                           ;main.c: 52:             millisecondi = 0;
   988  0141  01C9               	clrf	_millisecondi	;volatile
   989  0142  01CA               	clrf	_millisecondi+1	;volatile
   990  0143                     i1l50:
   991  0143  1283               	bcf	3,5	;RP0=0, select bank0
   992  0144  1303               	bcf	3,6	;RP1=0, select bank0
   993  0145  0836               	movf	??_tcInt+8,w
   994  0146  00FF               	movwf	127
   995  0147  0835               	movf	??_tcInt+7,w
   996  0148  008A               	movwf	10
   997  0149  0E34               	swapf	??_tcInt+6,w
   998  014A  0083               	movwf	3
   999  014B  0EFE               	swapf	126,f
  1000  014C  0E7E               	swapf	126,w
  1001  014D  0009               	retfie
  1002  014E                     __end_of_tcInt:
  1003                           
  1004                           	psect	intentry
  1005  0004                     __pintentry:	
  1006                           ;incstack = 0
  1007                           ; Regs used in _tcInt: [wreg+status,2+status,0+btemp+1+pclath+cstack]
  1008                           
  1009  0004                     interrupt_function:
  1010  007E                     saved_w	set	btemp
  1011  0004  00FE               	movwf	btemp
  1012  0005  0E03               	swapf	3,w
  1013  0006  1283               	bcf	3,5	;RP0=0, select bank0
  1014  0007  1303               	bcf	3,6	;RP1=0, select bank0
  1015  0008  00B4               	movwf	??_tcInt+6
  1016  0009  080A               	movf	10,w
  1017  000A  00B5               	movwf	??_tcInt+7
  1018  000B  087F               	movf	btemp+1,w
  1019  000C  00B6               	movwf	??_tcInt+8
  1020  000D  28BB               	ljmp	_tcInt
  1021                           
  1022                           	psect	text5
  1023  0220                     __ptext5:	
  1024 ;; *************** function ___lmul *****************
  1025 ;; Defined at:
  1026 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\Umul32.c"
  1027 ;; Parameters:    Size  Location     Type
  1028 ;;  multiplier      4    0[COMMON] unsigned long 
  1029 ;;  multiplicand    4    4[COMMON] unsigned long 
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;  product         4    9[COMMON] unsigned long 
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  4    0[COMMON] unsigned long 
  1034 ;; Registers used:
  1035 ;;		wreg, status,2, status,0
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1041 ;;      Params:         8       0       0       0
  1042 ;;      Locals:         4       0       0       0
  1043 ;;      Temps:          1       0       0       0
  1044 ;;      Totals:        13       0       0       0
  1045 ;;Total ram usage:       13 bytes
  1046 ;; Hardware stack levels used: 1
  1047 ;; This function calls:
  1048 ;;		Nothing
  1049 ;; This function is called by:
  1050 ;;		_tcInt
  1051 ;; This function uses a non-reentrant model
  1052 ;;
  1053                           
  1054                           
  1055                           ;psect for function ___lmul
  1056  0220                     ___lmul:
  1057                           
  1058                           ;incstack = 0
  1059                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  1060  0220  3000               	movlw	0
  1061  0221  00FC               	movwf	___lmul@product+3
  1062  0222  3000               	movlw	0
  1063  0223  00FB               	movwf	___lmul@product+2
  1064  0224  3000               	movlw	0
  1065  0225  00FA               	movwf	___lmul@product+1
  1066  0226  3000               	movlw	0
  1067  0227  00F9               	movwf	___lmul@product
  1068  0228                     i1l950:
  1069  0228  1C70               	btfss	___lmul@multiplier,0
  1070  0229  2A3E               	goto	i1l954
  1071  022A  0874               	movf	___lmul@multiplicand,w
  1072  022B  07F9               	addwf	___lmul@product,f
  1073  022C  0875               	movf	___lmul@multiplicand+1,w
  1074  022D  1103               	clrz
  1075  022E  1803               	skipnc
  1076  022F  3E01               	addlw	1
  1077  0230  1D03               	btfss	3,2
  1078  0231  07FA               	addwf	___lmul@product+1,f
  1079  0232  0876               	movf	___lmul@multiplicand+2,w
  1080  0233  1103               	clrz
  1081  0234  1803               	skipnc
  1082  0235  3E01               	addlw	1
  1083  0236  1D03               	btfss	3,2
  1084  0237  07FB               	addwf	___lmul@product+2,f
  1085  0238  0877               	movf	___lmul@multiplicand+3,w
  1086  0239  1103               	clrz
  1087  023A  1803               	skipnc
  1088  023B  3E01               	addlw	1
  1089  023C  1D03               	btfss	3,2
  1090  023D  07FC               	addwf	___lmul@product+3,f
  1091  023E                     i1l954:
  1092  023E  3001               	movlw	1
  1093  023F  00F8               	movwf	??___lmul
  1094  0240                     u52_25:
  1095  0240  1003               	clrc
  1096  0241  0DF4               	rlf	___lmul@multiplicand,f
  1097  0242  0DF5               	rlf	___lmul@multiplicand+1,f
  1098  0243  0DF6               	rlf	___lmul@multiplicand+2,f
  1099  0244  0DF7               	rlf	___lmul@multiplicand+3,f
  1100  0245  0BF8               	decfsz	??___lmul,f
  1101  0246  2A40               	goto	u52_25
  1102  0247  3001               	movlw	1
  1103  0248                     u53_25:
  1104  0248  1003               	clrc
  1105  0249  0CF3               	rrf	___lmul@multiplier+3,f
  1106  024A  0CF2               	rrf	___lmul@multiplier+2,f
  1107  024B  0CF1               	rrf	___lmul@multiplier+1,f
  1108  024C  0CF0               	rrf	___lmul@multiplier,f
  1109  024D  3EFF               	addlw	-1
  1110  024E  1D03               	skipz
  1111  024F  2A48               	goto	u53_25
  1112  0250  0873               	movf	___lmul@multiplier+3,w
  1113  0251  0472               	iorwf	___lmul@multiplier+2,w
  1114  0252  0471               	iorwf	___lmul@multiplier+1,w
  1115  0253  0470               	iorwf	___lmul@multiplier,w
  1116  0254  1D03               	skipz
  1117  0255  2A28               	goto	i1l950
  1118  0256  087C               	movf	___lmul@product+3,w
  1119  0257  00F3               	movwf	?___lmul+3
  1120  0258  087B               	movf	___lmul@product+2,w
  1121  0259  00F2               	movwf	?___lmul+2
  1122  025A  087A               	movf	___lmul@product+1,w
  1123  025B  00F1               	movwf	?___lmul+1
  1124  025C  0879               	movf	___lmul@product,w
  1125  025D  00F0               	movwf	?___lmul
  1126  025E  0008               	return
  1127  025F                     __end_of___lmul:
  1128                           
  1129                           	psect	text6
  1130  014E                     __ptext6:	
  1131 ;; *************** function ___aldiv *****************
  1132 ;; Defined at:
  1133 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.32\pic\sources\c90\common\aldiv.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;  divisor         4    0[BANK0 ] long 
  1136 ;;  dividend        4    4[BANK0 ] long 
  1137 ;; Auto vars:     Size  Location     Type
  1138 ;;  quotient        4   10[BANK0 ] long 
  1139 ;;  sign            1    9[BANK0 ] unsigned char 
  1140 ;;  counter         1    8[BANK0 ] unsigned char 
  1141 ;; Return value:  Size  Location     Type
  1142 ;;                  4    0[BANK0 ] long 
  1143 ;; Registers used:
  1144 ;;		wreg, status,2, status,0
  1145 ;; Tracked objects:
  1146 ;;		On entry : 0/0
  1147 ;;		On exit  : 0/0
  1148 ;;		Unchanged: 0/0
  1149 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1150 ;;      Params:         0       8       0       0
  1151 ;;      Locals:         0       6       0       0
  1152 ;;      Temps:          1       0       0       0
  1153 ;;      Totals:         1      14       0       0
  1154 ;;Total ram usage:       15 bytes
  1155 ;; Hardware stack levels used: 1
  1156 ;; This function calls:
  1157 ;;		Nothing
  1158 ;; This function is called by:
  1159 ;;		_tcInt
  1160 ;; This function uses a non-reentrant model
  1161 ;;
  1162                           
  1163                           
  1164                           ;psect for function ___aldiv
  1165  014E                     ___aldiv:
  1166                           
  1167                           ;incstack = 0
  1168                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1169  014E  1283               	bcf	3,5	;RP0=0, select bank0
  1170  014F  1303               	bcf	3,6	;RP1=0, select bank0
  1171  0150  01A9               	clrf	___aldiv@sign
  1172  0151  1FA3               	btfss	___aldiv@divisor+3,7
  1173  0152  2960               	goto	i1l215
  1174  0153  09A0               	comf	___aldiv@divisor,f
  1175  0154  09A1               	comf	___aldiv@divisor+1,f
  1176  0155  09A2               	comf	___aldiv@divisor+2,f
  1177  0156  09A3               	comf	___aldiv@divisor+3,f
  1178  0157  0AA0               	incf	___aldiv@divisor,f
  1179  0158  1903               	skipnz
  1180  0159  0AA1               	incf	___aldiv@divisor+1,f
  1181  015A  1903               	skipnz
  1182  015B  0AA2               	incf	___aldiv@divisor+2,f
  1183  015C  1903               	skipnz
  1184  015D  0AA3               	incf	___aldiv@divisor+3,f
  1185  015E  01A9               	clrf	___aldiv@sign
  1186  015F  0AA9               	incf	___aldiv@sign,f
  1187  0160                     i1l215:
  1188  0160  1FA7               	btfss	___aldiv@dividend+3,7
  1189  0161  2971               	goto	i1l972
  1190  0162  09A4               	comf	___aldiv@dividend,f
  1191  0163  09A5               	comf	___aldiv@dividend+1,f
  1192  0164  09A6               	comf	___aldiv@dividend+2,f
  1193  0165  09A7               	comf	___aldiv@dividend+3,f
  1194  0166  0AA4               	incf	___aldiv@dividend,f
  1195  0167  1903               	skipnz
  1196  0168  0AA5               	incf	___aldiv@dividend+1,f
  1197  0169  1903               	skipnz
  1198  016A  0AA6               	incf	___aldiv@dividend+2,f
  1199  016B  1903               	skipnz
  1200  016C  0AA7               	incf	___aldiv@dividend+3,f
  1201  016D  3001               	movlw	1
  1202  016E  00FD               	movwf	??___aldiv
  1203  016F  087D               	movf	??___aldiv,w
  1204  0170  06A9               	xorwf	___aldiv@sign,f
  1205  0171                     i1l972:
  1206  0171  3000               	movlw	0
  1207  0172  00AD               	movwf	___aldiv@quotient+3
  1208  0173  3000               	movlw	0
  1209  0174  00AC               	movwf	___aldiv@quotient+2
  1210  0175  3000               	movlw	0
  1211  0176  00AB               	movwf	___aldiv@quotient+1
  1212  0177  3000               	movlw	0
  1213  0178  00AA               	movwf	___aldiv@quotient
  1214  0179  0823               	movf	___aldiv@divisor+3,w
  1215  017A  0422               	iorwf	___aldiv@divisor+2,w
  1216  017B  0421               	iorwf	___aldiv@divisor+1,w
  1217  017C  0420               	iorwf	___aldiv@divisor,w
  1218  017D  1903               	skipnz
  1219  017E  29C6               	goto	i1l994
  1220  017F  01A8               	clrf	___aldiv@counter
  1221  0180  0AA8               	incf	___aldiv@counter,f
  1222  0181                     i1l980:
  1223  0181  1BA3               	btfsc	___aldiv@divisor+3,7
  1224  0182  2991               	goto	i1l982
  1225  0183  3001               	movlw	1
  1226  0184  00FD               	movwf	??___aldiv
  1227  0185                     u58_25:
  1228  0185  1003               	clrc
  1229  0186  0DA0               	rlf	___aldiv@divisor,f
  1230  0187  0DA1               	rlf	___aldiv@divisor+1,f
  1231  0188  0DA2               	rlf	___aldiv@divisor+2,f
  1232  0189  0DA3               	rlf	___aldiv@divisor+3,f
  1233  018A  0BFD               	decfsz	??___aldiv,f
  1234  018B  2985               	goto	u58_25
  1235  018C  3001               	movlw	1
  1236  018D  00FD               	movwf	??___aldiv
  1237  018E  087D               	movf	??___aldiv,w
  1238  018F  07A8               	addwf	___aldiv@counter,f
  1239  0190  2981               	goto	i1l980
  1240  0191                     i1l982:
  1241  0191  3001               	movlw	1
  1242  0192  00FD               	movwf	??___aldiv
  1243  0193                     u60_25:
  1244  0193  1003               	clrc
  1245  0194  0DAA               	rlf	___aldiv@quotient,f
  1246  0195  0DAB               	rlf	___aldiv@quotient+1,f
  1247  0196  0DAC               	rlf	___aldiv@quotient+2,f
  1248  0197  0DAD               	rlf	___aldiv@quotient+3,f
  1249  0198  0BFD               	decfsz	??___aldiv,f
  1250  0199  2993               	goto	u60_25
  1251  019A  0823               	movf	___aldiv@divisor+3,w
  1252  019B  0227               	subwf	___aldiv@dividend+3,w
  1253  019C  1D03               	skipz
  1254  019D  29A8               	goto	u61_25
  1255  019E  0822               	movf	___aldiv@divisor+2,w
  1256  019F  0226               	subwf	___aldiv@dividend+2,w
  1257  01A0  1D03               	skipz
  1258  01A1  29A8               	goto	u61_25
  1259  01A2  0821               	movf	___aldiv@divisor+1,w
  1260  01A3  0225               	subwf	___aldiv@dividend+1,w
  1261  01A4  1D03               	skipz
  1262  01A5  29A8               	goto	u61_25
  1263  01A6  0820               	movf	___aldiv@divisor,w
  1264  01A7  0224               	subwf	___aldiv@dividend,w
  1265  01A8                     u61_25:
  1266  01A8  1C03               	skipc
  1267  01A9  29B9               	goto	i1l990
  1268  01AA  0820               	movf	___aldiv@divisor,w
  1269  01AB  02A4               	subwf	___aldiv@dividend,f
  1270  01AC  0821               	movf	___aldiv@divisor+1,w
  1271  01AD  1C03               	skipc
  1272  01AE  0F21               	incfsz	___aldiv@divisor+1,w
  1273  01AF  02A5               	subwf	___aldiv@dividend+1,f
  1274  01B0  0822               	movf	___aldiv@divisor+2,w
  1275  01B1  1C03               	skipc
  1276  01B2  0F22               	incfsz	___aldiv@divisor+2,w
  1277  01B3  02A6               	subwf	___aldiv@dividend+2,f
  1278  01B4  0823               	movf	___aldiv@divisor+3,w
  1279  01B5  1C03               	skipc
  1280  01B6  0F23               	incfsz	___aldiv@divisor+3,w
  1281  01B7  02A7               	subwf	___aldiv@dividend+3,f
  1282  01B8  142A               	bsf	___aldiv@quotient,0
  1283  01B9                     i1l990:
  1284  01B9  3001               	movlw	1
  1285  01BA                     u62_25:
  1286  01BA  1003               	clrc
  1287  01BB  0CA3               	rrf	___aldiv@divisor+3,f
  1288  01BC  0CA2               	rrf	___aldiv@divisor+2,f
  1289  01BD  0CA1               	rrf	___aldiv@divisor+1,f
  1290  01BE  0CA0               	rrf	___aldiv@divisor,f
  1291  01BF  3EFF               	addlw	-1
  1292  01C0  1D03               	skipz
  1293  01C1  29BA               	goto	u62_25
  1294  01C2  3001               	movlw	1
  1295  01C3  02A8               	subwf	___aldiv@counter,f
  1296  01C4  1D03               	btfss	3,2
  1297  01C5  2991               	goto	i1l982
  1298  01C6                     i1l994:
  1299  01C6  0829               	movf	___aldiv@sign,w
  1300  01C7  1903               	btfsc	3,2
  1301  01C8  29D4               	goto	i1l998
  1302  01C9  09AA               	comf	___aldiv@quotient,f
  1303  01CA  09AB               	comf	___aldiv@quotient+1,f
  1304  01CB  09AC               	comf	___aldiv@quotient+2,f
  1305  01CC  09AD               	comf	___aldiv@quotient+3,f
  1306  01CD  0AAA               	incf	___aldiv@quotient,f
  1307  01CE  1903               	skipnz
  1308  01CF  0AAB               	incf	___aldiv@quotient+1,f
  1309  01D0  1903               	skipnz
  1310  01D1  0AAC               	incf	___aldiv@quotient+2,f
  1311  01D2  1903               	skipnz
  1312  01D3  0AAD               	incf	___aldiv@quotient+3,f
  1313  01D4                     i1l998:
  1314  01D4  082D               	movf	___aldiv@quotient+3,w
  1315  01D5  00A3               	movwf	?___aldiv+3
  1316  01D6  082C               	movf	___aldiv@quotient+2,w
  1317  01D7  00A2               	movwf	?___aldiv+2
  1318  01D8  082B               	movf	___aldiv@quotient+1,w
  1319  01D9  00A1               	movwf	?___aldiv+1
  1320  01DA  082A               	movf	___aldiv@quotient,w
  1321  01DB  00A0               	movwf	?___aldiv
  1322  01DC  0008               	return
  1323  01DD                     __end_of___aldiv:
  1324  007E                     btemp	set	126	;btemp
  1325  007E                     wtemp0	set	126
  1326                           
  1327                           	psect	config
  1328                           
  1329                           ;Config register CONFIG @ 0x2007
  1330                           ;	Oscillator Selection bits
  1331                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1332                           ;	Watchdog Timer Enable bit
  1333                           ;	WDTE = OFF, WDT disabled
  1334                           ;	Power-up Timer Enable bit
  1335                           ;	PWRTE = ON, PWRT enabled
  1336                           ;	RA5/MCLR/VPP Pin Function Select bit
  1337                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
  1338                           ;	Brown-out Detect Enable bit
  1339                           ;	BOREN = ON, BOD enabled
  1340                           ;	Low-Voltage Programming Enable bit
  1341                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1342                           ;	Data EE Memory Code Protection bit
  1343                           ;	CPD = OFF, Data memory code protection off
  1344                           ;	Flash Program Memory Code Protection bit
  1345                           ;	CP = OFF, Code protection off
  1346  2007                     	org	8199
  1347  2007  3F62               	dw	16226

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         12
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     37      49
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _tcInt in COMMON

    _tcInt->___aldiv
    ___aldiv->___lmul

Critical Paths under _main in BANK0

    _loop->___xxtofl

Critical Paths under _tcInt in BANK0

    _tcInt->___aldiv

Critical Paths under _main in BANK1

    None.

Critical Paths under _tcInt in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _tcInt in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     399
                               _loop
                              _setup
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _loop                                                 4     4      0     399
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (2) ___xxtofl                                            14    10      4     398
                                             23 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _tcInt                                                9     9      0     696
                                             14 BANK0      9     9      0
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (4) ___lmul                                              13     5      8     244
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             15     7      8     452
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _loop
     ___xxtofl
   _setup

 _tcInt (ROOT)
   ___aldiv
     ___lmul (ARG)
   ___lmul

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50     25      31       3       61.3%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      3F       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      3F      10        0.0%


Microchip Technology PIC Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Mon Jun 12 15:53:57 2023

                     l61 0277                       fsr 0004                      l583 0035  
                    l850 002D                      l596 008B                      l860 0048  
                    l597 0095                      l589 0075                      l870 0089  
                    l862 005A                      l872 007A                      l856 0044  
                    l884 00B2                      _PR2 0092                      u415 006D  
                    u435 0082                      u475 009D                      u395 0051  
                    indf 0000                     i1l50 0143                     _TMR0 0001  
                   _main 0276                     _loop 025F                     btemp 007E  
                   start 000E          __end_of___aldiv 01DD                    ?_main 0070  
                  ?_loop 0070                    i1l215 0160                    i1l950 0228  
                  i1l954 023E                    i1l980 0181                    i1l972 0171  
                  i1l990 01B9                    i1l982 0191                    i1l994 01C6  
                  i1l998 01D4                    _PORTA 0005                    _PORTB 0006  
                  u60_25 0193                    u52_25 0240                    u61_25 01A8  
                  u53_25 0248                    u70_20 011F                    u70_21 0120  
                  u70_22 0125                    u70_23 0126                    u62_25 01BA  
                  _TRISA 0085                    _TRISB 0086                    u58_25 0185  
                  u69_25 00DD      ___lmul@multiplicand 0074                    _tcInt 00BB  
                  _setup 01DD                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 0279  
           __end_of_loop 026E                   ??_main 0045                   ??_loop 0045  
                 ?_tcInt 0070                   ?_setup 0070                   i1l1010 00C5  
                 _TMR0IE 005D                   _TMR0IF 005A                   _TMR2IE 0461  
                 _TMR2IF 0061         __end_of___xxtofl 00BB                   _t0_ovl 004F  
                 ___lmul 0220                ??___aldiv 007D                   saved_w 007E  
           ___xxtofl@arg 0041             ___xxtofl@exp 0040             ___xxtofl@val 0037  
__end_of__initialization 0014           __pcstackCOMMON 0070            __end_of_tcInt 014E  
          __end_of_setup 0220           _OPTION_REGbits 0081                  ??_tcInt 002E  
                ??_setup 0037               __pbssBANK0 0045               __pmaintext 0276  
                ?___lmul 0070               __pintentry 0004           ___lmul@product 0079  
              ?___xxtofl 0037                  ___aldiv 014E          __size_of___lmul 003F  
              _CMCONbits 001F                  __ptext1 01DD                  __ptext2 025F  
                __ptext3 0016                  __ptext4 00BB                  __ptext5 0220  
                __ptext6 014E                _T2CONbits 0012               ??___xxtofl 003B  
       ___aldiv@dividend 0024                  clrloop0 026F     end_of_initialization 0014  
       ___aldiv@quotient 002A            ___xxtofl@sign 003F           __end_of___lmul 025F  
    start_initialization 000F                 ??___lmul 0078                ___latbits 0000  
          __pcstackBANK0 0020        __size_of___xxtofl 00A5                 ?___aldiv 0020  
              _frequenza 0045           __size_of_tcInt 0093           __size_of_setup 0043  
        ___aldiv@divisor 0020        interrupt_function 0004          ___aldiv@counter 0028  
           _millisecondi 0049                clear_ram0 026E                 _PIE1bits 008C  
               _PIR1bits 000C        ___lmul@multiplier 0070            _t0_gross_prec 004B  
               _t0_gross 004D         __size_of___aldiv 008F                 ___xxtofl 0016  
          __size_of_main 0003            __size_of_loop 000F               _INTCONbits 000B  
               intlevel1 0000             ___aldiv@sign 0029  
